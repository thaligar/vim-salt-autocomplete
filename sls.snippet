snippet esxdatacenter.mod_init ""
esxdatacenter.mod_init:
  - low: ${1}
endsnippet

snippet esxdatacenter.datacenter_configured "Makes sure a datacenter exists."
esxdatacenter.datacenter_configured:
  - name: ${1}
endsnippet

snippet mssql_user.present "Checks existance of the named user."
mssql_user.present:
  - name: ${1}
  - login: ${2:None}
  - domain: ${3:None}
  - database: ${4:None}
  - roles: ${5:None}
  - options: ${6:None}
endsnippet

snippet mssql_user.absent "Ensure that the named user is absent"
mssql_user.absent:
  - name: ${1}
endsnippet

snippet zabbix_host.present "Ensures that the host exists, eventually creates new host."
zabbix_host.present:
  - host: ${1}
  - groups: ${2}
  - interfaces: ${3}
endsnippet

snippet zabbix_host.absent "Ensures that the host does not exists, eventually deletes host."
zabbix_host.absent:
  - name: ${1}
endsnippet

snippet zabbix_host.assign_templates "Ensures that templates are assigned to the host."
zabbix_host.assign_templates:
  - host: ${1}
  - templates: ${2}
endsnippet

snippet kernelpkg.latest_installed "Ensure that the latest version of the kernel available in the"
kernelpkg.latest_installed:
  - name: ${1}
endsnippet

snippet kernelpkg.latest_active "Initiate a reboot if the running kernel is not the latest one installed."
kernelpkg.latest_active:
  - name: ${1}
  - at_time: ${2:None}
endsnippet

snippet kernelpkg.latest_wait "Initiate a reboot if the running kernel is not the latest one installed. This is the"
kernelpkg.latest_wait:
  - name: ${1}
  - at_time: ${2:None}
endsnippet

snippet kernelpkg.mod_watch "The kernerpkg watcher, called to invoke the watch command."
kernelpkg.mod_watch:
  - name: ${1}
  - sfun: ${2}
endsnippet

snippet telemetry_alert.present "Ensure the telemetry alert exists."
telemetry_alert.present:
  - name: ${1}
  - deployment_id: ${2}
  - metric_name: ${3}
  - alert_config: ${4}
  - api_key: ${5:None}
  - profile: ${6:"telemetry"}
endsnippet

snippet telemetry_alert.absent "Ensure the telemetry alert config is deleted"
telemetry_alert.absent:
  - name: ${1}
  - deployment_id: ${2}
  - metric_name: ${3}
  - api_key: ${4:None}
  - profile: ${5:"telemetry"}
endsnippet

snippet mdadm.present "Verify that the raid is present"
mdadm.present:
  - name: ${1}
  - level: ${2}
  - devices: ${3}
endsnippet

snippet mdadm.absent "Verify that the raid is absent"
mdadm.absent:
  - name: ${1}
endsnippet

snippet consul.acl_present "Ensure the ACL is present"
consul.acl_present:
  - name: ${1}
  - id: ${2:None}
  - token: ${3:None}
  - type: ${4:"client"}
  - rules: ${5:""}
  - consul_url: ${6:"http://localhost:8500"}
endsnippet

snippet consul.acl_absent "Ensure the ACL is absent"
consul.acl_absent:
  - name: ${1}
  - id: ${2:None}
  - token: ${3:None}
  - consul_url: ${4:"http://localhost:8500"}
endsnippet

snippet pagerduty_user.present "Ensure pagerduty user exists."
pagerduty_user.present:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet pagerduty_user.absent "Ensure pagerduty user does not exist."
pagerduty_user.absent:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet hg.latest "Make sure the repository is cloned to the given directory and is up to date"
hg.latest:
  - name: ${1}
  - rev: ${2:None}
  - target: ${3:None}
  - clean: ${4:False}
  - user: ${5:None}
  - identity: ${6:None}
  - force: ${7:False}
  - opts: ${8:False}
  - update_head: ${9:True}
endsnippet

snippet azurearm_dns.zone_present "Ensure a DNS zone exists."
azurearm_dns.zone_present:
  - name: ${1}
  - resource_group: ${2}
  - etag: ${3:None}
  - if_match: ${4:None}
  - if_none_match: ${5:None}
  - registration_virtual_networks: ${6:None}
  - resolution_virtual_networks: ${7:None}
  - tags: ${8:None}
  - zone_type: ${9:"Public"}
  - connection_auth: ${10:None}
endsnippet

snippet azurearm_dns.zone_absent "Ensure a DNS zone does not exist in the resource group."
azurearm_dns.zone_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_dns.record_set_present "Ensure a record set exists in a DNS zone."
azurearm_dns.record_set_present:
  - name: ${1}
  - zone_name: ${2}
  - resource_group: ${3}
  - record_type: ${4}
  - if_match: ${5:None}
  - if_none_match: ${6:None}
  - etag: ${7:None}
  - metadata: ${8:None}
  - ttl: ${9:None}
  - arecords: ${10:None}
  - aaaa_records: ${11:None}
  - mx_records: ${12:None}
  - ns_records: ${13:None}
  - ptr_records: ${14:None}
  - srv_records: ${15:None}
  - txt_records: ${16:None}
  - cname_record: ${17:None}
  - soa_record: ${18:None}
  - caa_records: ${19:None}
  - connection_auth: ${20:None}
endsnippet

snippet azurearm_dns.record_set_absent "Ensure a record set does not exist in the DNS zone."
azurearm_dns.record_set_absent:
  - name: ${1}
  - zone_name: ${2}
  - resource_group: ${3}
  - connection_auth: ${4:None}
endsnippet

snippet service.running "Ensure that the service is running"
service.running:
  - name: ${1}
  - enable: ${2:None}
  - sig: ${3:None}
  - init_delay: ${4:None}
  - no_block: ${5:False}
  - unmask: ${6:False}
  - unmask_runtime: ${7:False}
endsnippet

snippet service.dead "Ensure that the named service is dead by stopping the service if it is running"
service.dead:
  - name: ${1}
  - enable: ${2:None}
  - sig: ${3:None}
  - init_delay: ${4:None}
endsnippet

snippet service.enabled "Ensure that the service is enabled on boot, only use this state if you"
service.enabled:
  - name: ${1}
  - skip_verify: ${2:False}
endsnippet

snippet service.disabled "Ensure that the service is disabled on boot, only use this state if you"
service.disabled:
  - name: ${1}
  - skip_verify: ${2:False}
endsnippet

snippet service.masked "    This state is only available on minions which use systemd_."
service.masked:
  - name: ${1}
  - runtime: ${2:False}
endsnippet

snippet service.unmasked "    This state is only available on minions which use systemd_."
service.unmasked:
  - name: ${1}
  - runtime: ${2:False}
endsnippet

snippet service.mod_watch "The service watcher, called to invoke the watch command."
service.mod_watch:
  - name: ${1}
  - sfun: ${2:None}
  - sig: ${3:None}
  - full_restart: ${4:False}
  - init_delay: ${5:None}
  - force: ${6:False}
endsnippet

snippet ssh_known_hosts.present "Verifies that the specified host is known by the specified user"
ssh_known_hosts.present:
  - name: ${1}
  - user: ${2:None}
  - fingerprint: ${3:None}
  - key: ${4:None}
  - port: ${5:None}
  - enc: ${6:None}
  - config: ${7:None}
  - hash_known_hosts: ${8:True}
  - timeout: ${9:5}
  - fingerprint_hash_type: ${10:None}
endsnippet

snippet ssh_known_hosts.absent "Verifies that the specified host is not known by the given user"
ssh_known_hosts.absent:
  - name: ${1}
  - user: ${2:None}
  - config: ${3:None}
endsnippet

snippet boto_cloudwatch_event.present "Ensure trail exists."
boto_cloudwatch_event.present:
  - name: ${1}
  - Name: ${2:None}
  - ScheduleExpression: ${3:None}
  - EventPattern: ${4:None}
  - Description: ${5:None}
  - RoleArn: ${6:None}
  - State: ${7:None}
  - Targets: ${8:None}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
endsnippet

snippet boto_cloudwatch_event.absent "Ensure CloudWatch event rule with passed properties is absent."
boto_cloudwatch_event.absent:
  - name: ${1}
  - Name: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet cmd.mod_run_check "Execute the onlyif and unless logic."
cmd.mod_run_check:
  - cmd_kwargs: ${1}
  - onlyif: ${2}
  - unless: ${3}
  - creates: ${4}
endsnippet

snippet cmd.wait "Run the given command only if the watch statement calls it."
cmd.wait:
  - name: ${1}
  - onlyif: ${2:None}
  - unless: ${3:None}
  - creates: ${4:None}
  - cwd: ${5:None}
  - root: ${6:None}
  - runas: ${7:None}
  - shell: ${8:None}
  - env: ${9:()
}
  - stateful: ${10:False}
  - umask: ${11:None}
  - output_loglevel: ${12:"debug"}
  - hide_output: ${13:False}
  - use_vt: ${14:False}
  - success_retcodes: ${15:None}
  - success_stdout: ${16:None}
  - success_stderr: ${17:None}
endsnippet

snippet cmd.wait_script "Download a script from a remote source and execute it only if a watch"
cmd.wait_script:
  - name: ${1}
  - source: ${2:None}
  - template: ${3:None}
  - onlyif: ${4:None}
  - unless: ${5:None}
  - cwd: ${6:None}
  - runas: ${7:None}
  - shell: ${8:None}
  - env: ${9:None}
  - stateful: ${10:False}
  - umask: ${11:None}
  - use_vt: ${12:False}
  - output_loglevel: ${13:"debug"}
  - hide_output: ${14:False}
  - success_retcodes: ${15:None}
  - success_stdout: ${16:None}
  - success_stderr: ${17:None}
endsnippet

snippet cmd.run "Run a command if certain circumstances are met.  Use ``cmd.wait`` if you"
cmd.run:
  - name: ${1}
  - onlyif: ${2:None}
  - unless: ${3:None}
  - creates: ${4:None}
  - cwd: ${5:None}
  - root: ${6:None}
  - runas: ${7:None}
  - shell: ${8:None}
  - env: ${9:None}
  - prepend_path: ${10:None}
  - stateful: ${11:False}
  - umask: ${12:None}
  - output_loglevel: ${13:"debug"}
  - hide_output: ${14:False}
  - timeout: ${15:None}
  - ignore_timeout: ${16:False}
  - use_vt: ${17:False}
  - success_retcodes: ${18:None}
  - success_stdout: ${19:None}
  - success_stderr: ${20:None}
endsnippet

snippet cmd.script "Download a script and execute it with specified arguments."
cmd.script:
  - name: ${1}
  - source: ${2:None}
  - template: ${3:None}
  - onlyif: ${4:None}
  - unless: ${5:None}
  - creates: ${6:None}
  - cwd: ${7:None}
  - runas: ${8:None}
  - shell: ${9:None}
  - env: ${10:None}
  - stateful: ${11:False}
  - umask: ${12:None}
  - timeout: ${13:None}
  - use_vt: ${14:False}
  - output_loglevel: ${15:"debug"}
  - hide_output: ${16:False}
  - defaults: ${17:None}
  - context: ${18:None}
  - success_retcodes: ${19:None}
  - success_stdout: ${20:None}
  - success_stderr: ${21:None}
endsnippet

snippet cmd.call "Invoke a pre-defined Python function with arguments specified in the state"
cmd.call:
  - name: ${1}
  - func: ${2}
  - args: ${3:()
}
  - kws: ${4:None}
  - onlyif: ${5:None}
  - unless: ${6:None}
  - creates: ${7:None}
  - output_loglevel: ${8:"debug"}
  - hide_output: ${9:False}
  - use_vt: ${10:False}
endsnippet

snippet cmd.wait_call ""
cmd.wait_call:
  - name: ${1}
  - func: ${2}
  - args: ${3:()
}
  - kws: ${4:None}
  - onlyif: ${5:None}
  - unless: ${6:None}
  - creates: ${7:None}
  - stateful: ${8:False}
  - use_vt: ${9:False}
  - output_loglevel: ${10:"debug"}
  - hide_output: ${11:False}
endsnippet

snippet cmd.mod_watch "Execute a cmd function based on a watch call"
cmd.mod_watch:
  - name: ${1}
endsnippet

snippet cabal.installed "Verify that the given package is installed and is at the correct version"
cabal.installed:
  - name: ${1}
  - pkgs: ${2:None}
  - user: ${3:None}
  - install_global: ${4:False}
  - env: ${5:None}
endsnippet

snippet cabal.removed "Verify that given package is not installed."
cabal.removed:
  - name: ${1}
  - user: ${2:None}
  - env: ${3:None}
endsnippet

snippet influxdb_retention_policy.convert_duration "Convert the a duration string into XXhYYmZZs format"
influxdb_retention_policy.convert_duration:
  - duration: ${1}
endsnippet

snippet influxdb_retention_policy.present "Ensure that given retention policy is present."
influxdb_retention_policy.present:
  - name: ${1}
  - database: ${2}
  - duration: ${3:"7d"}
  - replication: ${4:1}
  - default: ${5:False}
endsnippet

snippet influxdb_retention_policy.absent "Ensure that given retention policy is absent."
influxdb_retention_policy.absent:
  - name: ${1}
  - database: ${2}
endsnippet

snippet gpg.present "Ensure GPG public key is present in keychain"
gpg.present:
  - name: ${1}
  - keys: ${2:None}
  - user: ${3:None}
  - keyserver: ${4:None}
  - gnupghome: ${5:None}
  - trust: ${6:None}
endsnippet

snippet gpg.absent "Ensure GPG public key is absent in keychain"
gpg.absent:
  - name: ${1}
  - keys: ${2:None}
  - user: ${3:None}
  - gnupghome: ${4:None}
endsnippet

snippet schedule.present "Ensure a job is present in the schedule"
schedule.present:
  - name: ${1}
endsnippet

snippet schedule.absent "Ensure a job is absent from the schedule"
schedule.absent:
  - name: ${1}
endsnippet

snippet schedule.enabled "Ensure a job is enabled in the schedule"
schedule.enabled:
  - name: ${1}
endsnippet

snippet schedule.disabled "Ensure a job is disabled in the schedule"
schedule.disabled:
  - name: ${1}
endsnippet

snippet grafana4_org.present "Ensure that an organization is present."
grafana4_org.present:
  - name: ${1}
  - users: ${2:None}
  - theme: ${3:None}
  - home_dashboard_id: ${4:None}
  - timezone: ${5:None}
  - address1: ${6:None}
  - address2: ${7:None}
  - city: ${8:None}
  - zip_code: ${9:None}
  - address_state: ${10:None}
  - country: ${11:None}
  - profile: ${12:"grafana"}
endsnippet

snippet grafana4_org.absent "Ensure that a org is present."
grafana4_org.absent:
  - name: ${1}
  - profile: ${2:"grafana"}
endsnippet

snippet boto_elbv2.create_target_group "Create target group if not present."
boto_elbv2.create_target_group:
  - name: ${1}
  - protocol: ${2}
  - port: ${3}
  - vpc_id: ${4}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
  - health_check_protocol: ${9:"HTTP"}
  - health_check_port: ${10:"traffic-port"}
  - health_check_path: ${11:"/"}
  - health_check_interval_seconds: ${12:30}
  - health_check_timeout_seconds: ${13:5}
  - healthy_threshold_count: ${14:5}
  - unhealthy_threshold_count: ${15:2}
endsnippet

snippet boto_elbv2.delete_target_group "Delete target group."
boto_elbv2.delete_target_group:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_elbv2.targets_registered "Add targets to an Application Load Balancer target group. This state will not remove targets."
boto_elbv2.targets_registered:
  - name: ${1}
  - targets: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_elbv2.targets_deregistered "Remove targets to an Application Load Balancer target group."
boto_elbv2.targets_deregistered:
  - name: ${1}
  - targets: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_asg.present "Ensure the autoscale group exists."
boto_asg.present:
  - name: ${1}
  - launch_config_name: ${2}
  - availability_zones: ${3}
  - min_size: ${4}
  - max_size: ${5}
  - launch_config: ${6:None}
  - desired_capacity: ${7:None}
  - load_balancers: ${8:None}
  - default_cooldown: ${9:None}
  - health_check_type: ${10:None}
  - health_check_period: ${11:None}
  - placement_group: ${12:None}
  - vpc_zone_identifier: ${13:None}
  - subnet_names: ${14:None}
  - tags: ${15:None}
  - termination_policies: ${16:None}
  - termination_policies_from_pillar: ${17:"boto_asg_termination_policies"}
  - suspended_processes: ${18:None}
  - scaling_policies: ${19:None}
  - scaling_policies_from_pillar: ${20:"boto_asg_scaling_policies"}
  - scheduled_actions: ${21:None}
  - scheduled_actions_from_pillar: ${22:"boto_asg_scheduled_actions"}
  - alarms: ${23:None}
  - alarms_from_pillar: ${24:"boto_asg_alarms"}
  - region: ${25:None}
  - key: ${26:None}
  - keyid: ${27:None}
  - profile: ${28:None}
  - notification_arn: ${29:None}
  - notification_arn_from_pillar: ${30:"boto_asg_notification_arn"}
  - notification_types: ${31:None}
  - notification_types_from_pillar: ${32:"boto_asg_notification_types"}
endsnippet

snippet boto_asg.absent "Ensure the named autoscale group is deleted."
boto_asg.absent:
  - name: ${1}
  - force: ${2:False}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
  - remove_lc: ${7:False}
endsnippet

snippet firewalld.present "Ensure a zone has specific attributes."
firewalld.present:
  - name: ${1}
  - block_icmp: ${2:None}
  - prune_block_icmp: ${3:False}
  - default: ${4:None}
  - masquerade: ${5:False}
  - ports: ${6:None}
  - prune_ports: ${7:False}
  - port_fwd: ${8:None}
  - prune_port_fwd: ${9:False}
  - services: ${10:None}
  - prune_services: ${11:False}
  - interfaces: ${12:None}
  - prune_interfaces: ${13:False}
  - sources: ${14:None}
  - prune_sources: ${15:False}
  - rich_rules: ${16:None}
  - prune_rich_rules: ${17:False}
endsnippet

snippet firewalld.service "Ensure the service exists and encompasses the specified ports and"
firewalld.service:
  - name: ${1}
  - ports: ${2:None}
  - protocols: ${3:None}
endsnippet

snippet firewalld.todict "Returns a pretty dictionary meant for command line output."
firewalld.todict:
  - self: ${1}
endsnippet

snippet layman.present "Verify that the overlay is present"
layman.present:
  - name: ${1}
endsnippet

snippet layman.absent "Verify that the overlay is absent"
layman.absent:
  - name: ${1}
endsnippet

snippet lxc.present "    The :mod:`lxc.created <salt.states.lxc.created>` state has been renamed"
lxc.present:
  - name: ${1}
  - running: ${2:None}
  - clone_from: ${3:None}
  - snapshot: ${4:False}
  - profile: ${5:None}
  - network_profile: ${6:None}
  - template: ${7:None}
  - options: ${8:None}
  - image: ${9:None}
  - config: ${10:None}
  - fstype: ${11:None}
  - size: ${12:None}
  - backing: ${13:None}
  - vgname: ${14:None}
  - lvname: ${15:None}
  - thinpool: ${16:None}
  - path: ${17:None}
endsnippet

snippet lxc.absent "Ensure a container is not present, destroying it if present"
lxc.absent:
  - name: ${1}
  - stop: ${2:False}
  - path: ${3:None}
endsnippet

snippet lxc.running "    The :mod:`lxc.started <salt.states.lxc.started>` state has been renamed"
lxc.running:
  - name: ${1}
  - restart: ${2:False}
  - path: ${3:None}
endsnippet

snippet lxc.frozen "Ensure that a container is frozen"
lxc.frozen:
  - name: ${1}
  - start: ${2:True}
  - path: ${3:None}
endsnippet

snippet lxc.stopped "Ensure that a container is stopped"
lxc.stopped:
  - name: ${1}
  - kill: ${2:False}
  - path: ${3:None}
endsnippet

snippet lxc.set_pass "This state function has been disabled, as it did not conform to design"
lxc.set_pass:
  - name: ${1}
endsnippet

snippet lxc.edited_conf "    This state is unsuitable for setting parameters that appear more than"
lxc.edited_conf:
  - name: ${1}
  - lxc_conf: ${2:None}
  - lxc_conf_unset: ${3:None}
endsnippet

snippet zabbix_template.is_present "Check if Zabbix Template already exists."
zabbix_template.is_present:
  - name: ${1}
endsnippet

snippet zabbix_template.present "Creates Zabbix Template object or if differs update it according defined parameters. See Zabbix API documentation."
zabbix_template.present:
  - name: ${1}
  - params: ${2}
  - static_host_list: ${3:True}
endsnippet

snippet zabbix_template.absent "Makes the Zabbix Template to be absent (either does not exist or delete it)."
zabbix_template.absent:
  - name: ${1}
endsnippet

snippet proxy.managed "Manages proxy settings for this mininon"
proxy.managed:
  - name: ${1}
  - port: ${2}
  - services: ${3:None}
  - user: ${4:None}
  - password: ${5:None}
  - bypass_domains: ${6:None}
  - network_service: ${7:"Ethernet"}
endsnippet

snippet npm.installed "Verify that the given package is installed and is at the correct version"
npm.installed:
  - name: ${1}
  - pkgs: ${2:None}
  - dir: ${3:None}
  - user: ${4:None}
  - force_reinstall: ${5:False}
  - registry: ${6:None}
  - env: ${7:None}
endsnippet

snippet npm.removed "Verify that the given package is not installed."
npm.removed:
  - name: ${1}
  - dir: ${2:None}
  - user: ${3:None}
endsnippet

snippet npm.bootstrap "Bootstraps a node.js application."
npm.bootstrap:
  - name: ${1}
  - user: ${2:None}
  - silent: ${3:True}
endsnippet

snippet npm.cache_cleaned "Ensure that the given package is not cached."
npm.cache_cleaned:
  - name: ${1:None}
  - user: ${2:None}
  - force: ${3:False}
endsnippet

snippet cron.present "Verifies that the specified cron job is present for the specified user."
cron.present:
  - name: ${1}
  - user: ${2:"root"}
  - minute: ${3:"*"}
  - hour: ${4:"*"}
  - daymonth: ${5:"*"}
  - month: ${6:"*"}
  - dayweek: ${7:"*"}
  - comment: ${8:None}
  - commented: ${9:False}
  - identifier: ${10:False}
  - special: ${11:None}
endsnippet

snippet cron.absent "Verifies that the specified cron job is absent for the specified user; only"
cron.absent:
  - name: ${1}
  - user: ${2:"root"}
  - identifier: ${3:False}
  - special: ${4:None}
endsnippet

snippet cron.file "Provides file.managed-like functionality (templating, etc.) for a pre-made"
cron.file:
  - name: ${1}
  - source_hash: ${2:""}
  - source_hash_name: ${3:None}
  - user: ${4:"root"}
  - template: ${5:None}
  - context: ${6:None}
  - replace: ${7:True}
  - defaults: ${8:None}
  - backup: ${9:""}
endsnippet

snippet cron.env_present "Verifies that the specified environment variable is present in the crontab"
cron.env_present:
  - name: ${1}
  - value: ${2:None}
  - user: ${3:"root"}
endsnippet

snippet cron.env_absent "Verifies that the specified environment variable is absent from the crontab"
cron.env_absent:
  - name: ${1}
  - user: ${2:"root"}
endsnippet

snippet glance_image.present "Ensure image exists and is up-to-date"
glance_image.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet glance_image.absent "Ensure image does not exist"
glance_image.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet zone.property_present "Ensure property has a certain value"
zone.property_present:
  - name: ${1}
  - property: ${2}
  - value: ${3}
endsnippet

snippet zone.property_absent "Ensure property is absent"
zone.property_absent:
  - name: ${1}
  - property: ${2}
endsnippet

snippet zone.resource_present "Ensure resource exists with provided properties"
zone.resource_present:
  - name: ${1}
  - resource_type: ${2}
  - resource_selector_property: ${3}
  - resource_selector_value: ${4}
endsnippet

snippet zone.resource_absent "Ensure resource is absent"
zone.resource_absent:
  - name: ${1}
  - resource_type: ${2}
  - resource_selector_property: ${3}
  - resource_selector_value: ${4}
endsnippet

snippet zone.booted "Ensure zone is booted"
zone.booted:
  - name: ${1}
  - single: ${2:False}
endsnippet

snippet zone.halted "Ensure zone is halted"
zone.halted:
  - name: ${1}
  - graceful: ${2:True}
endsnippet

snippet zone.export "Export a zones configuration"
zone.export:
  - name: ${1}
  - path: ${2}
  - replace: ${3:False}
endsnippet

snippet zone.import_ "Import a zones configuration"
zone.import_:
  - name: ${1}
  - path: ${2}
  - mode: ${3:"import"}
  - nodataset: ${4:False}
  - brand_opts: ${5:None}
endsnippet

snippet zone.present "Ensure a zone with certain properties and resources"
zone.present:
  - name: ${1}
  - brand: ${2}
  - zonepath: ${3}
  - properties: ${4:None}
  - resources: ${5:None}
endsnippet

snippet zone.absent "Ensure a zone is absent"
zone.absent:
  - name: ${1}
  - uninstall: ${2:False}
endsnippet

snippet zone.attached "Ensure zone is attached"
zone.attached:
  - name: ${1}
  - force: ${2:False}
endsnippet

snippet zone.detached "Ensure zone is detached"
zone.detached:
  - name: ${1}
endsnippet

snippet zone.installed "Ensure zone is installed"
zone.installed:
  - name: ${1}
  - nodataset: ${2:False}
  - brand_opts: ${3:None}
endsnippet

snippet zone.uninstalled "Ensure zone is uninstalled"
zone.uninstalled:
  - name: ${1}
endsnippet

snippet netacl.term "Manage the configuration of a specific policy term."
netacl.term:
  - name: ${1}
  - filter_name: ${2}
  - term_name: ${3}
  - filter_options: ${4:None}
  - pillar_key: ${5:"acl"}
  - pillarenv: ${6:None}
  - saltenv: ${7:None}
  - merge_pillar: ${8:False}
  - revision_id: ${9:None}
  - revision_no: ${10:None}
  - revision_date: ${11:True}
  - revision_date_format: ${12:"%Y/%m/%d"}
  - test: ${13:False}
  - commit: ${14:True}
  - debug: ${15:False}
  - source_service: ${16:None}
  - destination_service: ${17:None}
endsnippet

snippet netacl.filter "Generate and load the configuration of a policy filter."
netacl.filter:
  - name: ${1}
  - filter_name: ${2}
  - filter_options: ${3:None}
  - terms: ${4:None}
  - prepend: ${5:True}
  - pillar_key: ${6:"acl"}
  - pillarenv: ${7:None}
  - saltenv: ${8:None}
  - merge_pillar: ${9:False}
  - only_lower_merge: ${10:False}
  - revision_id: ${11:None}
  - revision_no: ${12:None}
  - revision_date: ${13:True}
  - revision_date_format: ${14:"%Y/%m/%d"}
  - test: ${15:False}
  - commit: ${16:True}
  - debug: ${17:False}
endsnippet

snippet netacl.managed "Manage the whole firewall configuration."
netacl.managed:
  - name: ${1}
  - filters: ${2:None}
  - prepend: ${3:True}
  - pillar_key: ${4:"acl"}
  - pillarenv: ${5:None}
  - saltenv: ${6:None}
  - merge_pillar: ${7:False}
  - only_lower_merge: ${8:False}
  - revision_id: ${9:None}
  - revision_no: ${10:None}
  - revision_date: ${11:True}
  - revision_date_format: ${12:"%Y/%m/%d"}
  - test: ${13:False}
  - commit: ${14:True}
  - debug: ${15:False}
endsnippet

snippet win_dns_client.dns_exists "Configure the DNS server list in the specified interface"
win_dns_client.dns_exists:
  - name: ${1}
  - servers: ${2:None}
  - interface: ${3:"Local Area Connection"}
  - replace: ${4:False}
endsnippet

snippet win_dns_client.dns_dhcp "Configure the DNS server list from DHCP Server"
win_dns_client.dns_dhcp:
  - name: ${1}
  - interface: ${2:"Local Area Connection"}
endsnippet

snippet win_dns_client.primary_suffix "Configure the global primary DNS suffix of a DHCP client."
win_dns_client.primary_suffix:
  - name: ${1}
  - suffix: ${2:None}
  - updates: ${3:False}
endsnippet

snippet quota.mode "Set the quota for the system"
quota.mode:
  - name: ${1}
  - mode: ${2}
  - quotatype: ${3}
endsnippet

snippet saltsupport.taken ""
saltsupport.taken:
  - name: ${1}
  - profile: ${2:"default"}
  - pillar: ${3:None}
  - archive: ${4:None}
  - output: ${5:"nested"}
endsnippet

snippet saltsupport.collected ""
saltsupport.collected:
  - name: ${1}
  - group: ${2}
  - filename: ${3:None}
  - host: ${4:None}
  - location: ${5:None}
  - move: ${6:True}
  - all: ${7:True}
endsnippet

snippet saltsupport.get_kwargs ""
saltsupport.get_kwargs:
  - self: ${1}
  - data: ${2}
endsnippet

snippet saltsupport.check_destination "Check destination for the archives."
saltsupport.check_destination:
  - self: ${1}
  - location: ${2}
  - group: ${3}
endsnippet

snippet saltsupport.collected "Sync archives to a central place."
saltsupport.collected:
  - self: ${1}
  - group: ${2}
  - filename: ${3:None}
  - host: ${4:None}
  - location: ${5:None}
  - move: ${6:True}
  - all: ${7:True}
endsnippet

snippet saltsupport.taken "Takes minion support config data."
saltsupport.taken:
  - self: ${1}
  - profile: ${2:"default"}
  - pillar: ${3:None}
  - archive: ${4:None}
  - output: ${5:"nested"}
endsnippet

snippet cloud.present "Spin up a single instance on a cloud provider, using salt-cloud. This state"
cloud.present:
  - name: ${1}
  - cloud_provider: ${2}
  - onlyif: ${3:None}
  - unless: ${4:None}
  - opts: ${5:None}
endsnippet

snippet cloud.absent "Ensure that no instances with the specified names exist."
cloud.absent:
  - name: ${1}
  - onlyif: ${2:None}
  - unless: ${3:None}
endsnippet

snippet cloud.profile "Create a single instance on a cloud provider, using a salt-cloud profile."
cloud.profile:
  - name: ${1}
  - profile: ${2}
  - onlyif: ${3:None}
  - unless: ${4:None}
  - opts: ${5:None}
endsnippet

snippet cloud.volume_present "Check that a block volume exists."
cloud.volume_present:
  - name: ${1}
  - provider: ${2:None}
endsnippet

snippet cloud.volume_absent "Check that a block volume exists."
cloud.volume_absent:
  - name: ${1}
  - provider: ${2:None}
endsnippet

snippet cloud.volume_attached "Check if a block volume is attached."
cloud.volume_attached:
  - name: ${1}
  - server_name: ${2}
  - provider: ${3:None}
endsnippet

snippet cloud.volume_detached "Check if a block volume is attached."
cloud.volume_detached:
  - name: ${1}
  - server_name: ${2:None}
  - provider: ${3:None}
endsnippet

snippet github.present "Ensure a user is present"
github.present:
  - name: ${1}
  - profile: ${2:"github"}
endsnippet

snippet github.absent "Ensure a github user is absent"
github.absent:
  - name: ${1}
  - profile: ${2:"github"}
endsnippet

snippet github.team_present "Ensure a team is present"
github.team_present:
  - name: ${1}
  - description: ${2:None}
  - repo_names: ${3:None}
  - privacy: ${4:"secret"}
  - permission: ${5:"pull"}
  - members: ${6:None}
  - enforce_mfa: ${7:False}
  - no_mfa_grace_seconds: ${8:0}
  - profile: ${9:"github"}
endsnippet

snippet github.team_absent "Ensure a team is absent."
github.team_absent:
  - name: ${1}
  - profile: ${2:"github"}
endsnippet

snippet github.repo_present "Ensure a repository is present"
github.repo_present:
  - name: ${1}
  - description: ${2:None}
  - homepage: ${3:None}
  - private: ${4:None}
  - has_issues: ${5:None}
  - has_wiki: ${6:None}
  - has_downloads: ${7:None}
  - auto_init: ${8:False}
  - gitignore_template: ${9:None}
  - license_template: ${10:None}
  - teams: ${11:None}
  - profile: ${12:"github"}
endsnippet

snippet github.repo_absent "Ensure a repo is absent."
github.repo_absent:
  - name: ${1}
  - profile: ${2:"github"}
endsnippet

snippet locale.system "Set the locale for the system"
locale.system:
  - name: ${1}
endsnippet

snippet locale.present "Generate a locale if it is not present"
locale.present:
  - name: ${1}
endsnippet

snippet zfs.filesystem_absent "ensure filesystem is absent on the system"
zfs.filesystem_absent:
  - name: ${1}
  - force: ${2:False}
  - recursive: ${3:False}
endsnippet

snippet zfs.volume_absent "ensure volume is absent on the system"
zfs.volume_absent:
  - name: ${1}
  - force: ${2:False}
  - recursive: ${3:False}
endsnippet

snippet zfs.snapshot_absent "ensure snapshot is absent on the system"
zfs.snapshot_absent:
  - name: ${1}
  - force: ${2:False}
  - recursive: ${3:False}
  - recursive_all: ${4:False}
endsnippet

snippet zfs.bookmark_absent "ensure bookmark is absent on the system"
zfs.bookmark_absent:
  - name: ${1}
  - force: ${2:False}
  - recursive: ${3:False}
endsnippet

snippet zfs.hold_absent "ensure hold is absent on the system"
zfs.hold_absent:
  - name: ${1}
  - snapshot: ${2}
  - recursive: ${3:False}
endsnippet

snippet zfs.hold_present "ensure hold is present on the system"
zfs.hold_present:
  - name: ${1}
  - snapshot: ${2}
  - recursive: ${3:False}
endsnippet

snippet zfs.filesystem_present "ensure filesystem exists and has properties set"
zfs.filesystem_present:
  - name: ${1}
  - create_parent: ${2:False}
  - properties: ${3:None}
  - cloned_from: ${4:None}
endsnippet

snippet zfs.volume_present "ensure volume exists and has properties set"
zfs.volume_present:
  - name: ${1}
  - volume_size: ${2}
  - sparse: ${3:False}
  - create_parent: ${4:False}
  - properties: ${5:None}
  - cloned_from: ${6:None}
endsnippet

snippet zfs.bookmark_present "ensure bookmark exists"
zfs.bookmark_present:
  - name: ${1}
  - snapshot: ${2}
endsnippet

snippet zfs.snapshot_present "ensure snapshot exists and has properties set"
zfs.snapshot_present:
  - name: ${1}
  - recursive: ${2:False}
  - properties: ${3:None}
endsnippet

snippet zfs.promoted "ensure a dataset is not a clone"
zfs.promoted:
  - name: ${1}
endsnippet

snippet zfs.scheduled_snapshot "maintain a set of snapshots based on a schedule"
zfs.scheduled_snapshot:
  - name: ${1}
  - prefix: ${2}
  - recursive: ${3:True}
  - schedule: ${4:None}
endsnippet

snippet rabbitmq_vhost.present "Ensure the RabbitMQ VHost exists."
rabbitmq_vhost.present:
  - name: ${1}
endsnippet

snippet rabbitmq_vhost.absent "Ensure the RabbitMQ Virtual Host is absent"
rabbitmq_vhost.absent:
  - name: ${1}
endsnippet

snippet etcd_mod.set_ "Set a key in etcd"
etcd_mod.set_:
  - name: ${1}
  - value: ${2}
  - profile: ${3:None}
endsnippet

snippet etcd_mod.wait_set "Set a key in etcd only if the watch statement calls it. This function is"
etcd_mod.wait_set:
  - name: ${1}
  - value: ${2}
  - profile: ${3:None}
endsnippet

snippet etcd_mod.directory "Create a directory in etcd."
etcd_mod.directory:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet etcd_mod.rm "Deletes a key from etcd"
etcd_mod.rm:
  - name: ${1}
  - recurse: ${2:False}
  - profile: ${3:None}
endsnippet

snippet etcd_mod.wait_rm "Deletes a key from etcd only if the watch statement calls it."
etcd_mod.wait_rm:
  - name: ${1}
  - recurse: ${2:False}
  - profile: ${3:None}
endsnippet

snippet etcd_mod.mod_watch "The etcd watcher, called to invoke the watch command."
etcd_mod.mod_watch:
  - name: ${1}
endsnippet

snippet netntp.managed "Manages the configuration of NTP peers and servers on the device, as specified in the state SLS file."
netntp.managed:
  - name: ${1}
  - peers: ${2:None}
  - servers: ${3:None}
endsnippet

snippet bigip.list_node "A function to connect to a bigip device and list a specific node."
bigip.list_node:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
endsnippet

snippet bigip.create_node "Create a new node if it does not already exist."
bigip.create_node:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - address: ${5}
endsnippet

snippet bigip.manage_node "Manages a node of a given bigip device.  If the node does not exist it will be created, otherwise,"
bigip.manage_node:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - address: ${5}
  - connection_limit: ${6:None}
  - description: ${7:None}
  - dynamic_ratio: ${8:None}
  - logging: ${9:None}
  - monitor: ${10:None}
  - rate_limit: ${11:None}
  - ratio: ${12:None}
  - session: ${13:None}
  - node_state: ${14:None}
endsnippet

snippet bigip.modify_node "Modify an existing node. Only a node which already exists will be modified and"
bigip.modify_node:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - connection_limit: ${5:None}
  - description: ${6:None}
  - dynamic_ratio: ${7:None}
  - logging: ${8:None}
  - monitor: ${9:None}
  - rate_limit: ${10:None}
  - ratio: ${11:None}
  - session: ${12:None}
  - node_state: ${13:None}
endsnippet

snippet bigip.delete_node "Delete an existing node."
bigip.delete_node:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
endsnippet

snippet bigip.list_pool "A function to connect to a bigip device and list a specific pool."
bigip.list_pool:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
endsnippet

snippet bigip.create_pool "Create a new node if it does not already exist."
bigip.create_pool:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - members: ${5:None}
  - allow_nat: ${6:None}
  - allow_snat: ${7:None}
  - description: ${8:None}
  - gateway_failsafe_device: ${9:None}
  - ignore_persisted_weight: ${10:None}
  - ip_tos_to_client: ${11:None}
  - ip_tos_to_server: ${12:None}
  - link_qos_to_client: ${13:None}
  - link_qos_to_server: ${14:None}
  - load_balancing_mode: ${15:None}
  - min_active_members: ${16:None}
  - min_up_members: ${17:None}
  - min_up_members_action: ${18:None}
  - min_up_members_checking: ${19:None}
  - monitor: ${20:None}
  - profiles: ${21:None}
  - queue_depth_limit: ${22:None}
  - queue_on_connection_limit: ${23:None}
  - queue_time_limit: ${24:None}
  - reselect_tries: ${25:None}
  - service_down_action: ${26:None}
  - slow_ramp_time: ${27:None}
endsnippet

snippet bigip.manage_pool "Create a new pool if it does not already exist. Pool members are managed separately. Only the"
bigip.manage_pool:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - allow_nat: ${5:None}
  - allow_snat: ${6:None}
  - description: ${7:None}
  - gateway_failsafe_device: ${8:None}
  - ignore_persisted_weight: ${9:None}
  - ip_tos_to_client: ${10:None}
  - ip_tos_to_server: ${11:None}
  - link_qos_to_client: ${12:None}
  - link_qos_to_server: ${13:None}
  - load_balancing_mode: ${14:None}
  - min_active_members: ${15:None}
  - min_up_members: ${16:None}
  - min_up_members_action: ${17:None}
  - min_up_members_checking: ${18:None}
  - monitor: ${19:None}
  - profiles: ${20:None}
  - queue_depth_limit: ${21:None}
  - queue_on_connection_limit: ${22:None}
  - queue_time_limit: ${23:None}
  - reselect_tries: ${24:None}
  - service_down_action: ${25:None}
  - slow_ramp_time: ${26:None}
endsnippet

snippet bigip.modify_pool "Modify an existing pool. Pool members are managed separately. Only the"
bigip.modify_pool:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - allow_nat: ${5:None}
  - allow_snat: ${6:None}
  - description: ${7:None}
  - gateway_failsafe_device: ${8:None}
  - ignore_persisted_weight: ${9:None}
  - ip_tos_to_client: ${10:None}
  - ip_tos_to_server: ${11:None}
  - link_qos_to_client: ${12:None}
  - link_qos_to_server: ${13:None}
  - load_balancing_mode: ${14:None}
  - min_active_members: ${15:None}
  - min_up_members: ${16:None}
  - min_up_members_action: ${17:None}
  - min_up_members_checking: ${18:None}
  - monitor: ${19:None}
  - profiles: ${20:None}
  - queue_depth_limit: ${21:None}
  - queue_on_connection_limit: ${22:None}
  - queue_time_limit: ${23:None}
  - reselect_tries: ${24:None}
  - service_down_action: ${25:None}
  - slow_ramp_time: ${26:None}
endsnippet

snippet bigip.delete_pool "Delete an existing pool."
bigip.delete_pool:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
endsnippet

snippet bigip.manage_pool_members "Manage the members of an existing pool.  This function replaces all current pool members."
bigip.manage_pool_members:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - members: ${5}
endsnippet

snippet bigip.add_pool_member "A function to connect to a bigip device and add a new member to an existing pool."
bigip.add_pool_member:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - member: ${5}
endsnippet

snippet bigip.modify_pool_member "A function to connect to a bigip device and modify a member of an existing pool."
bigip.modify_pool_member:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - member: ${5}
  - connection_limit: ${6:None}
  - description: ${7:None}
  - dynamic_ratio: ${8:None}
  - inherit_profile: ${9:None}
  - logging: ${10:None}
  - monitor: ${11:None}
  - priority_group: ${12:None}
  - profiles: ${13:None}
  - rate_limit: ${14:None}
  - ratio: ${15:None}
  - session: ${16:None}
  - member_state: ${17:None}
endsnippet

snippet bigip.delete_pool_member "Delete an existing pool member."
bigip.delete_pool_member:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - member: ${5}
endsnippet

snippet bigip.list_virtual "A function to list a specific virtual."
bigip.list_virtual:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
endsnippet

snippet bigip.create_virtual "A function to connect to a bigip device and create a virtual server if it does not already exists."
bigip.create_virtual:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - destination: ${5}
  - pool: ${6:None}
  - address_status: ${7:None}
  - auto_lasthop: ${8:None}
  - bwc_policy: ${9:None}
  - cmp_enabled: ${10:None}
  - connection_limit: ${11:None}
  - dhcp_relay: ${12:None}
  - description: ${13:None}
  - fallback_persistence: ${14:None}
  - flow_eviction_policy: ${15:None}
  - gtm_score: ${16:None}
  - ip_forward: ${17:None}
  - ip_protocol: ${18:None}
  - internal: ${19:None}
  - twelve_forward: ${20:None}
  - last_hop_pool: ${21:None}
  - mask: ${22:None}
  - mirror: ${23:None}
  - nat64: ${24:None}
  - persist: ${25:None}
  - profiles: ${26:None}
  - policies: ${27:None}
  - rate_class: ${28:None}
  - rate_limit: ${29:None}
  - rate_limit_mode: ${30:None}
  - rate_limit_dst: ${31:None}
  - rate_limit_src: ${32:None}
  - rules: ${33:None}
  - related_rules: ${34:None}
  - reject: ${35:None}
  - source: ${36:None}
  - source_address_translation: ${37:None}
  - source_port: ${38:None}
  - virtual_state: ${39:None}
  - traffic_classes: ${40:None}
  - translate_address: ${41:None}
  - translate_port: ${42:None}
  - vlans: ${43:None}
endsnippet

snippet bigip.manage_virtual "Manage a virtual server.  If a virtual does not exists it will be created, otherwise only the"
bigip.manage_virtual:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - destination: ${5}
  - pool: ${6:None}
  - address_status: ${7:None}
  - auto_lasthop: ${8:None}
  - bwc_policy: ${9:None}
  - cmp_enabled: ${10:None}
  - connection_limit: ${11:None}
  - dhcp_relay: ${12:None}
  - description: ${13:None}
  - fallback_persistence: ${14:None}
  - flow_eviction_policy: ${15:None}
  - gtm_score: ${16:None}
  - ip_forward: ${17:None}
  - ip_protocol: ${18:None}
  - internal: ${19:None}
  - twelve_forward: ${20:None}
  - last_hop_pool: ${21:None}
  - mask: ${22:None}
  - mirror: ${23:None}
  - nat64: ${24:None}
  - persist: ${25:None}
  - profiles: ${26:None}
  - policies: ${27:None}
  - rate_class: ${28:None}
  - rate_limit: ${29:None}
  - rate_limit_mode: ${30:None}
  - rate_limit_dst: ${31:None}
  - rate_limit_src: ${32:None}
  - rules: ${33:None}
  - related_rules: ${34:None}
  - reject: ${35:None}
  - source: ${36:None}
  - source_address_translation: ${37:None}
  - source_port: ${38:None}
  - virtual_state: ${39:None}
  - traffic_classes: ${40:None}
  - translate_address: ${41:None}
  - translate_port: ${42:None}
  - vlans: ${43:None}
endsnippet

snippet bigip.modify_virtual "Modify an virtual server.  modify an existing virtual.  Only parameters specified will be enforced."
bigip.modify_virtual:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
  - destination: ${5}
  - pool: ${6:None}
  - address_status: ${7:None}
  - auto_lasthop: ${8:None}
  - bwc_policy: ${9:None}
  - cmp_enabled: ${10:None}
  - connection_limit: ${11:None}
  - dhcp_relay: ${12:None}
  - description: ${13:None}
  - fallback_persistence: ${14:None}
  - flow_eviction_policy: ${15:None}
  - gtm_score: ${16:None}
  - ip_forward: ${17:None}
  - ip_protocol: ${18:None}
  - internal: ${19:None}
  - twelve_forward: ${20:None}
  - last_hop_pool: ${21:None}
  - mask: ${22:None}
  - mirror: ${23:None}
  - nat64: ${24:None}
  - persist: ${25:None}
  - profiles: ${26:None}
  - policies: ${27:None}
  - rate_class: ${28:None}
  - rate_limit: ${29:None}
  - rate_limit_mode: ${30:None}
  - rate_limit_dst: ${31:None}
  - rate_limit_src: ${32:None}
  - rules: ${33:None}
  - related_rules: ${34:None}
  - reject: ${35:None}
  - source: ${36:None}
  - source_address_translation: ${37:None}
  - source_port: ${38:None}
  - virtual_state: ${39:None}
  - traffic_classes: ${40:None}
  - translate_address: ${41:None}
  - translate_port: ${42:None}
  - vlans: ${43:None}
endsnippet

snippet bigip.delete_virtual "Delete an existing virtual."
bigip.delete_virtual:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - name: ${4}
endsnippet

snippet bigip.list_monitor "A function to list an existing monitor."
bigip.list_monitor:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - monitor_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.create_monitor "A function to connect to a bigip device and create a monitor."
bigip.create_monitor:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - monitor_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.manage_monitor "Create a new monitor if a monitor of this type and name does not already exists.  If it does exists, only"
bigip.manage_monitor:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - monitor_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.modify_monitor "Modify an existing monitor.  If it does exists, only"
bigip.modify_monitor:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - monitor_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.delete_monitor "Modify an existing monitor.  If it does exists, only"
bigip.delete_monitor:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - monitor_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.list_profile "A function to list an existing profile."
bigip.list_profile:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - profile_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.create_profile "A function to connect to a bigip device and create a profile."
bigip.create_profile:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - profile_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.manage_profile "Create a new profile if a monitor of this type and name does not already exists.  If it does exists, only"
bigip.manage_profile:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - profile_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.modify_profile "Modify an existing profile.  If it does exists, only"
bigip.modify_profile:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - profile_type: ${4}
  - name: ${5}
endsnippet

snippet bigip.delete_profile "Modify an existing profile.  If it does exists, only"
bigip.delete_profile:
  - hostname: ${1}
  - username: ${2}
  - password: ${3}
  - profile_type: ${4}
  - name: ${5}
endsnippet

snippet ipset.set_present "Verify the set exists."
ipset.set_present:
  - name: ${1}
  - set_type: ${2}
  - family: ${3:"ipv4"}
endsnippet

snippet ipset.set_absent "Verify the set is absent."
ipset.set_absent:
  - name: ${1}
  - family: ${2:"ipv4"}
endsnippet

snippet ipset.present "Append a entry to a set"
ipset.present:
  - name: ${1}
  - entry: ${2:None}
  - family: ${3:"ipv4"}
endsnippet

snippet ipset.absent "Remove a entry or entries from a chain"
ipset.absent:
  - name: ${1}
  - entry: ${2:None}
  - entries: ${3:None}
  - family: ${4:"ipv4"}
endsnippet

snippet ipset.flush "Flush current ipset set"
ipset.flush:
  - name: ${1}
  - family: ${2:"ipv4"}
endsnippet

snippet nxos.user_present "Ensure a user is present with the specified groups"
nxos.user_present:
  - name: ${1}
  - password: ${2:None}
  - roles: ${3:None}
  - encrypted: ${4:False}
  - crypt_salt: ${5:None}
  - algorithm: ${6:"sha256"}
endsnippet

snippet nxos.user_absent "Ensure a user is not present"
nxos.user_absent:
  - name: ${1}
endsnippet

snippet nxos.config_present "Ensure a specific configuration line exists in the running config"
nxos.config_present:
  - name: ${1}
endsnippet

snippet nxos.config_absent "Ensure a specific configuration line does not exist in the running config"
nxos.config_absent:
  - name: ${1}
endsnippet

snippet nxos.replace "Replace all instances of a string or full line in the running config"
nxos.replace:
  - name: ${1}
  - repl: ${2}
  - full_match: ${3:False}
endsnippet

snippet postgres_initdb.present "Initialize the PostgreSQL data directory"
postgres_initdb.present:
  - name: ${1}
  - user: ${2:None}
  - password: ${3:None}
  - auth: ${4:"password"}
  - encoding: ${5:"UTF8"}
  - locale: ${6:None}
  - runas: ${7:None}
  - waldir: ${8:None}
  - checksums: ${9:False}
endsnippet

snippet sysctl.present "Ensure that the named sysctl value is set in memory and persisted to the"
sysctl.present:
  - name: ${1}
  - value: ${2}
  - config: ${3:None}
endsnippet

snippet openvswitch_db.managed "Ensures that the specified columns of the named record have the specified"
openvswitch_db.managed:
  - name: ${1}
  - table: ${2}
  - data: ${3}
  - record: ${4:None}
endsnippet

snippet win_powercfg.set_timeout "Set the sleep timeouts of specific items such as disk, monitor, etc."
win_powercfg.set_timeout:
  - name: ${1}
  - value: ${2}
  - power: ${3:"ac"}
  - scheme: ${4:None}
endsnippet

snippet mac_defaults.write "Write a default to the system"
mac_defaults.write:
  - name: ${1}
  - domain: ${2}
  - value: ${3}
  - vtype: ${4:"string"}
  - user: ${5:None}
endsnippet

snippet mac_defaults.absent "Make sure the defaults value is absent"
mac_defaults.absent:
  - name: ${1}
  - domain: ${2}
  - user: ${3:None}
endsnippet

snippet mac_defaults.safe_cast ""
mac_defaults.safe_cast:
  - val: ${1}
  - to_type: ${2}
  - default: ${3:None}
endsnippet

snippet alias.present "Ensures that the named alias is present with the given target or list of"
alias.present:
  - name: ${1}
  - target: ${2}
endsnippet

snippet alias.absent "Ensure that the named alias is absent"
alias.absent:
  - name: ${1}
endsnippet

snippet libcloud_loadbalancer.state_result ""
libcloud_loadbalancer.state_result:
  - result: ${1}
  - message: ${2}
  - name: ${3}
  - changes: ${4:None}
endsnippet

snippet libcloud_loadbalancer.balancer_present "Ensures a load balancer is present."
libcloud_loadbalancer.balancer_present:
  - name: ${1}
  - port: ${2}
  - protocol: ${3}
  - profile: ${4}
  - algorithm: ${5:None}
  - members: ${6:None}
endsnippet

snippet libcloud_loadbalancer.balancer_absent "Ensures a load balancer is absent."
libcloud_loadbalancer.balancer_absent:
  - name: ${1}
  - profile: ${2}
endsnippet

snippet libcloud_loadbalancer.member_present "Ensure a load balancer member is present"
libcloud_loadbalancer.member_present:
  - ip: ${1}
  - port: ${2}
  - balancer_id: ${3}
  - profile: ${4}
endsnippet

snippet libcloud_loadbalancer.member_absent "Ensure a load balancer member is absent, based on IP and Port"
libcloud_loadbalancer.member_absent:
  - ip: ${1}
  - port: ${2}
  - balancer_id: ${3}
  - profile: ${4}
endsnippet

snippet boto3_route53.hosted_zone_present "Ensure a hosted zone exists with the given attributes."
boto3_route53.hosted_zone_present:
  - name: ${1}
  - Name: ${2:None}
  - PrivateZone: ${3:False}
  - CallerReference: ${4:None}
  - Comment: ${5:None}
  - VPCs: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto3_route53.hosted_zone_absent "Ensure the Route53 Hostes Zone described is absent"
boto3_route53.hosted_zone_absent:
  - name: ${1}
  - Name: ${2:None}
  - PrivateZone: ${3:False}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto3_route53.rr_present "Ensure the Route53 record is present."
boto3_route53.rr_present:
  - name: ${1}
  - HostedZoneId: ${2:None}
  - DomainName: ${3:None}
  - PrivateZone: ${4:False}
  - Name: ${5:None}
  - Type: ${6:None}
  - SetIdentifier: ${7:None}
  - Weight: ${8:None}
  - Region: ${9:None}
  - GeoLocation: ${10:None}
  - Failover: ${11:None}
  - TTL: ${12:None}
  - ResourceRecords: ${13:None}
  - AliasTarget: ${14:None}
  - HealthCheckId: ${15:None}
  - TrafficPolicyInstanceId: ${16:None}
  - region: ${17:None}
  - key: ${18:None}
  - keyid: ${19:None}
  - profile: ${20:None}
endsnippet

snippet boto3_route53.rr_absent "Ensure the Route53 record is deleted."
boto3_route53.rr_absent:
  - name: ${1}
  - HostedZoneId: ${2:None}
  - DomainName: ${3:None}
  - PrivateZone: ${4:False}
  - Name: ${5:None}
  - Type: ${6:None}
  - SetIdentifier: ${7:None}
  - region: ${8:None}
  - key: ${9:None}
  - keyid: ${10:None}
  - profile: ${11:None}
endsnippet

snippet module.wait "Run a single module function only if the watch statement calls it"
module.wait:
  - name: ${1}
endsnippet

snippet module.run "Run a single module function or a range of module functions in a batch."
module.run:
endsnippet

snippet hipchat.send_message "Send a message to a Hipchat room."
hipchat.send_message:
  - name: ${1}
  - room_id: ${2}
  - from_name: ${3}
  - message: ${4}
  - api_url: ${5:None}
  - api_key: ${6:None}
  - api_version: ${7:None}
  - message_color: ${8:"yellow"}
  - notify: ${9:False}
endsnippet

snippet neutron_network.present "Ensure a network exists and is up-to-date"
neutron_network.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet neutron_network.absent "Ensure a network does not exists"
neutron_network.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet docker_volume.present "Ensure that a volume is present."
docker_volume.present:
  - name: ${1}
  - driver: ${2:None}
  - driver_opts: ${3:None}
  - force: ${4:False}
endsnippet

snippet docker_volume.absent "Ensure that a volume is absent."
docker_volume.absent:
  - name: ${1}
  - driver: ${2:None}
endsnippet

snippet esxvm.vm_configured "Selects the correct operation to be executed on a virtual machine, non"
esxvm.vm_configured:
  - name: ${1}
  - vm_name: ${2}
  - cpu: ${3}
  - memory: ${4}
  - image: ${5}
  - version: ${6}
  - interfaces: ${7}
  - disks: ${8}
  - scsi_devices: ${9}
  - serial_ports: ${10}
  - datacenter: ${11}
  - datastore: ${12}
  - placement: ${13}
  - cd_dvd_drives: ${14:None}
  - sata_controllers: ${15:None}
  - advanced_configs: ${16:None}
  - template: ${17:None}
  - tools: ${18:True}
  - power_on: ${19:False}
  - deploy: ${20:False}
endsnippet

snippet esxvm.vm_cloned "Clones a virtual machine from a template virtual machine if it doesn't"
esxvm.vm_cloned:
  - name: ${1}
endsnippet

snippet esxvm.vm_updated "Updates a virtual machine configuration if there is a difference between"
esxvm.vm_updated:
  - name: ${1}
  - vm_name: ${2}
  - cpu: ${3}
  - memory: ${4}
  - image: ${5}
  - version: ${6}
  - interfaces: ${7}
  - disks: ${8}
  - scsi_devices: ${9}
  - serial_ports: ${10}
  - datacenter: ${11}
  - datastore: ${12}
  - cd_dvd_drives: ${13:None}
  - sata_controllers: ${14:None}
  - advanced_configs: ${15:None}
  - power_on: ${16:False}
endsnippet

snippet esxvm.vm_created "Creates a virtual machine with the given properties if it doesn't exist."
esxvm.vm_created:
  - name: ${1}
  - vm_name: ${2}
  - cpu: ${3}
  - memory: ${4}
  - image: ${5}
  - version: ${6}
  - interfaces: ${7}
  - disks: ${8}
  - scsi_devices: ${9}
  - serial_ports: ${10}
  - datacenter: ${11}
  - datastore: ${12}
  - placement: ${13}
  - ide_controllers: ${14:None}
  - sata_controllers: ${15:None}
  - cd_dvd_drives: ${16:None}
  - advanced_configs: ${17:None}
  - power_on: ${18:False}
endsnippet

snippet esxvm.vm_registered "Registers a virtual machine if the machine files are available on"
esxvm.vm_registered:
  - vm_name: ${1}
  - datacenter: ${2}
  - placement: ${3}
  - vm_file: ${4}
  - power_on: ${5:False}
endsnippet

snippet snapper.baseline_snapshot "Enforces that no file is modified comparing against a previously"
snapper.baseline_snapshot:
  - name: ${1}
  - number: ${2:None}
  - tag: ${3:None}
  - include_diff: ${4:True}
  - config: ${5:"root"}
  - ignore: ${6:None}
endsnippet

snippet win_smtp_server.server_setting "Ensure the value is set for the specified setting."
win_smtp_server.server_setting:
  - name: ${1}
  - settings: ${2:None}
  - server: ${3:_DEFAULT_SERVER}
endsnippet

snippet win_smtp_server.active_log_format "Manage the active log format for the SMTP server."
win_smtp_server.active_log_format:
  - name: ${1}
  - log_format: ${2}
  - server: ${3:_DEFAULT_SERVER}
endsnippet

snippet win_smtp_server.connection_ip_list "Manage IP list for SMTP connections."
win_smtp_server.connection_ip_list:
  - name: ${1}
  - addresses: ${2:None}
  - grant_by_default: ${3:False}
  - server: ${4:_DEFAULT_SERVER}
endsnippet

snippet win_smtp_server.relay_ip_list "Manage IP list for SMTP relay connections."
win_smtp_server.relay_ip_list:
  - name: ${1}
  - addresses: ${2:None}
  - server: ${3:_DEFAULT_SERVER}
endsnippet

snippet linux_acl.present "Ensure a Linux ACL is present"
linux_acl.present:
  - name: ${1}
  - acl_type: ${2}
  - acl_name: ${3:""}
  - perms: ${4:""}
  - recurse: ${5:False}
  - force: ${6:False}
endsnippet

snippet linux_acl.absent "Ensure a Linux ACL does not exist"
linux_acl.absent:
  - name: ${1}
  - acl_type: ${2}
  - acl_name: ${3:""}
  - perms: ${4:""}
  - recurse: ${5:False}
endsnippet

snippet linux_acl.list_present "Ensure a Linux ACL list is present"
linux_acl.list_present:
  - name: ${1}
  - acl_type: ${2}
  - acl_names: ${3:None}
  - perms: ${4:""}
  - recurse: ${5:False}
  - force: ${6:False}
endsnippet

snippet linux_acl.list_absent "Ensure a Linux ACL list does not exist"
linux_acl.list_absent:
  - name: ${1}
  - acl_type: ${2}
  - acl_names: ${3:None}
  - recurse: ${4:False}
endsnippet

snippet test.nop "A no-op state that does nothing. Useful in conjunction with the `use`"
test.nop:
  - name: ${1}
endsnippet

snippet test.succeed_without_changes "Returns successful."
test.succeed_without_changes:
  - name: ${1}
endsnippet

snippet test.fail_without_changes "Returns failure."
test.fail_without_changes:
  - name: ${1}
endsnippet

snippet test.succeed_with_changes "Returns successful and changes is not empty"
test.succeed_with_changes:
  - name: ${1}
endsnippet

snippet test.fail_with_changes "Returns failure and changes is not empty."
test.fail_with_changes:
  - name: ${1}
endsnippet

snippet test.configurable_test_state "A configurable test state which determines its output based on the inputs."
test.configurable_test_state:
  - name: ${1}
  - changes: ${2:True}
  - result: ${3:True}
  - comment: ${4:""}
endsnippet

snippet test.show_notification "Simple notification using text argument."
test.show_notification:
  - name: ${1}
  - text: ${2:None}
endsnippet

snippet test.mod_watch "Call this function via a watch statement"
test.mod_watch:
  - name: ${1}
  - sfun: ${2:None}
endsnippet

snippet test.check_pillar "Checks the presence and, optionally, the type of"
test.check_pillar:
  - name: ${1}
  - present: ${2:None}
  - boolean: ${3:None}
  - integer: ${4:None}
  - string: ${5:None}
  - listing: ${6:None}
  - dictionary: ${7:None}
  - verbose: ${8:False}
endsnippet

snippet supervisord.running "Ensure the named service is running."
supervisord.running:
  - name: ${1}
  - restart: ${2:False}
  - update: ${3:False}
  - user: ${4:None}
  - conf_file: ${5:None}
  - bin_env: ${6:None}
endsnippet

snippet supervisord.dead "Ensure the named service is dead (not running)."
supervisord.dead:
  - name: ${1}
  - user: ${2:None}
  - conf_file: ${3:None}
  - bin_env: ${4:None}
endsnippet

snippet supervisord.mod_watch "The supervisord watcher, called to invoke the watch command."
supervisord.mod_watch:
  - name: ${1}
  - restart: ${2:True}
  - update: ${3:False}
  - user: ${4:None}
  - conf_file: ${5:None}
  - bin_env: ${6:None}
endsnippet

snippet nxos_upgrade.image_running "Ensure the NX-OS system image is running on the device."
nxos_upgrade.image_running:
  - name: ${1}
  - system_image: ${2}
  - kickstart_image: ${3:None}
  - issu: ${4:True}
endsnippet

snippet boto_sqs.present "Ensure the SQS queue exists."
boto_sqs.present:
  - name: ${1}
  - attributes: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_sqs.absent "Ensure the named sqs queue is deleted."
boto_sqs.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet grafana_datasource.present "Ensure that a data source is present."
grafana_datasource.present:
  - name: ${1}
  - type: ${2}
  - url: ${3}
  - access: ${4:"proxy"}
  - user: ${5:""}
  - password: ${6:""}
  - database: ${7:""}
  - basic_auth: ${8:False}
  - basic_auth_user: ${9:""}
  - basic_auth_password: ${10:""}
  - is_default: ${11:False}
  - json_data: ${12:None}
  - profile: ${13:"grafana"}
endsnippet

snippet grafana_datasource.absent "Ensure that a data source is present."
grafana_datasource.absent:
  - name: ${1}
  - profile: ${2:"grafana"}
endsnippet

snippet highstate_doc.note "Add content to a document generated using `highstate_doc.render`."
highstate_doc.note:
  - name: ${1}
  - source: ${2:None}
  - contents: ${3:None}
endsnippet

snippet victorops.create_event "Create an event on the VictorOps service"
victorops.create_event:
  - name: ${1}
  - message_type: ${2}
  - routing_key: ${3:"everyone"}
endsnippet

snippet pyenv.installed "Verify that the specified python is installed with pyenv. pyenv is"
pyenv.installed:
  - name: ${1}
  - default: ${2:False}
  - user: ${3:None}
endsnippet

snippet pyenv.absent "Verify that the specified python is not installed with pyenv. pyenv"
pyenv.absent:
  - name: ${1}
  - user: ${2:None}
endsnippet

snippet pyenv.install_pyenv "Install pyenv if not installed. Allows you to require pyenv be installed"
pyenv.install_pyenv:
  - name: ${1}
  - user: ${2:None}
endsnippet

snippet statuspage.create "Insert a new entry under a specific endpoint."
statuspage.create:
  - name: ${1}
  - endpoint: ${2:"incidents"}
  - api_url: ${3:None}
  - page_id: ${4:None}
  - api_key: ${5:None}
  - api_version: ${6:None}
endsnippet

snippet statuspage.update "Update attribute(s) of a specific endpoint."
statuspage.update:
  - name: ${1}
  - endpoint: ${2:"incidents"}
  - id: ${3:None}
  - api_url: ${4:None}
  - page_id: ${5:None}
  - api_key: ${6:None}
  - api_version: ${7:None}
endsnippet

snippet statuspage.delete "Remove an entry from an endpoint."
statuspage.delete:
  - name: ${1}
  - endpoint: ${2:"incidents"}
  - id: ${3:None}
  - api_url: ${4:None}
  - page_id: ${5:None}
  - api_key: ${6:None}
  - api_version: ${7:None}
endsnippet

snippet statuspage.managed "Manage the StatusPage configuration."
statuspage.managed:
  - name: ${1}
  - config: ${2}
  - api_url: ${3:None}
  - page_id: ${4:None}
  - api_key: ${5:None}
  - api_version: ${6:None}
  - pace: ${7:_PACE}
  - allow_empty: ${8:False}
endsnippet

snippet splunk.present "Ensure a user is present"
splunk.present:
  - email: ${1}
  - profile: ${2:"splunk"}
endsnippet

snippet splunk.absent "Ensure a splunk user is absent"
splunk.absent:
  - email: ${1}
  - profile: ${2:"splunk"}
endsnippet

snippet mssql_role.present "Ensure that the named database is present with the specified options"
mssql_role.present:
  - name: ${1}
  - owner: ${2:None}
  - grants: ${3:None}
endsnippet

snippet mssql_role.absent "Ensure that the named database is absent"
mssql_role.absent:
  - name: ${1}
endsnippet

snippet dellchassis.blade_idrac "Set parameters for iDRAC in a blade."
dellchassis.blade_idrac:
  - name: ${1}
  - idrac_password: ${2:None}
  - idrac_ipmi: ${3:None}
  - idrac_ip: ${4:None}
  - idrac_netmask: ${5:None}
  - idrac_gateway: ${6:None}
  - idrac_dnsname: ${7:None}
  - idrac_dhcp: ${8:None}
endsnippet

snippet dellchassis.chassis "Manage a Dell Chassis."
dellchassis.chassis:
  - name: ${1}
  - chassis_name: ${2:None}
  - password: ${3:None}
  - datacenter: ${4:None}
  - location: ${5:None}
  - mode: ${6:None}
  - idrac_launch: ${7:None}
  - slot_names: ${8:None}
  - blade_power_states: ${9:None}
endsnippet

snippet dellchassis.switch "Manage switches in a Dell Chassis."
dellchassis.switch:
  - name: ${1}
  - ip: ${2:None}
  - netmask: ${3:None}
  - gateway: ${4:None}
  - dhcp: ${5:None}
  - password: ${6:None}
  - snmp: ${7:None}
endsnippet

snippet dellchassis.firmware_update "    State to update the firmware on host"
dellchassis.firmware_update:
  - hosts: ${1:None}
  - directory: ${2:""}
endsnippet

snippet pagerduty_service.present "Ensure pagerduty service exists."
pagerduty_service.present:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet pagerduty_service.absent "Ensure a pagerduty service does not exist."
pagerduty_service.absent:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet kubernetes.deployment_absent "Ensures that the named deployment is absent from the given namespace."
kubernetes.deployment_absent:
  - name: ${1}
  - namespace: ${2:"default"}
endsnippet

snippet kubernetes.deployment_present "Ensures that the named deployment is present inside of the specified"
kubernetes.deployment_present:
  - name: ${1}
  - namespace: ${2:"default"}
  - metadata: ${3:None}
  - spec: ${4:None}
  - source: ${5:""}
  - template: ${6:""}
endsnippet

snippet kubernetes.service_present "Ensures that the named service is present inside of the specified namespace"
kubernetes.service_present:
  - name: ${1}
  - namespace: ${2:"default"}
  - metadata: ${3:None}
  - spec: ${4:None}
  - source: ${5:""}
  - template: ${6:""}
endsnippet

snippet kubernetes.service_absent "Ensures that the named service is absent from the given namespace."
kubernetes.service_absent:
  - name: ${1}
  - namespace: ${2:"default"}
endsnippet

snippet kubernetes.namespace_absent "Ensures that the named namespace is absent."
kubernetes.namespace_absent:
  - name: ${1}
endsnippet

snippet kubernetes.namespace_present "Ensures that the named namespace is present."
kubernetes.namespace_present:
  - name: ${1}
endsnippet

snippet kubernetes.secret_absent "Ensures that the named secret is absent from the given namespace."
kubernetes.secret_absent:
  - name: ${1}
  - namespace: ${2:"default"}
endsnippet

snippet kubernetes.secret_present "Ensures that the named secret is present inside of the specified namespace"
kubernetes.secret_present:
  - name: ${1}
  - namespace: ${2:"default"}
  - data: ${3:None}
  - source: ${4:None}
  - template: ${5:None}
endsnippet

snippet kubernetes.configmap_absent "Ensures that the named configmap is absent from the given namespace."
kubernetes.configmap_absent:
  - name: ${1}
  - namespace: ${2:"default"}
endsnippet

snippet kubernetes.configmap_present "Ensures that the named configmap is present inside of the specified namespace"
kubernetes.configmap_present:
  - name: ${1}
  - namespace: ${2:"default"}
  - data: ${3:None}
  - source: ${4:None}
  - template: ${5:None}
endsnippet

snippet kubernetes.pod_absent "Ensures that the named pod is absent from the given namespace."
kubernetes.pod_absent:
  - name: ${1}
  - namespace: ${2:"default"}
endsnippet

snippet kubernetes.pod_present "Ensures that the named pod is present inside of the specified"
kubernetes.pod_present:
  - name: ${1}
  - namespace: ${2:"default"}
  - metadata: ${3:None}
  - spec: ${4:None}
  - source: ${5:""}
  - template: ${6:""}
endsnippet

snippet kubernetes.node_label_absent "Ensures that the named label is absent from the node."
kubernetes.node_label_absent:
  - name: ${1}
  - node: ${2}
endsnippet

snippet kubernetes.node_label_folder_absent "Ensures the label folder doesn't exist on the specified node."
kubernetes.node_label_folder_absent:
  - name: ${1}
  - node: ${2}
endsnippet

snippet kubernetes.node_label_present "Ensures that the named label is set on the named node"
kubernetes.node_label_present:
  - name: ${1}
  - node: ${2}
  - value: ${3}
endsnippet

snippet rsync.synchronized "Guarantees that the source directory is always copied to the target."
rsync.synchronized:
  - name: ${1}
  - source: ${2}
  - delete: ${3:False}
  - force: ${4:False}
  - update: ${5:False}
  - passwordfile: ${6:None}
  - exclude: ${7:None}
  - excludefrom: ${8:None}
  - prepare: ${9:False}
  - dryrun: ${10:False}
  - additional_opts: ${11:None}
endsnippet

snippet postgres_schema.present "Ensure that the named schema is present in the database."
postgres_schema.present:
  - dbname: ${1}
  - name: ${2}
  - owner: ${3:None}
  - user: ${4:None}
  - db_user: ${5:None}
  - db_password: ${6:None}
  - db_host: ${7:None}
  - db_port: ${8:None}
endsnippet

snippet postgres_schema.absent "Ensure that the named schema is absent."
postgres_schema.absent:
  - dbname: ${1}
  - name: ${2}
  - user: ${3:None}
  - db_user: ${4:None}
  - db_password: ${5:None}
  - db_host: ${6:None}
  - db_port: ${7:None}
endsnippet

snippet openstack_config.present "Ensure a value is set in an OpenStack configuration file."
openstack_config.present:
  - name: ${1}
  - filename: ${2}
  - section: ${3}
  - value: ${4}
  - parameter: ${5:None}
endsnippet

snippet openstack_config.absent "Ensure a value is not set in an OpenStack configuration file."
openstack_config.absent:
  - name: ${1}
  - filename: ${2}
  - section: ${3}
  - parameter: ${4:None}
endsnippet

snippet drac.present "Ensure the user exists on the Dell DRAC"
drac.present:
  - name: ${1}
  - password: ${2}
  - permission: ${3}
endsnippet

snippet drac.absent "Ensure a user does not exist on the Dell DRAC"
drac.absent:
  - name: ${1}
endsnippet

snippet drac.network "Ensure the DRAC network settings are consistent"
drac.network:
  - ip: ${1}
  - netmask: ${2}
  - gateway: ${3}
endsnippet

snippet nova.flavor_present "Creates Nova flavor if it does not exist"
nova.flavor_present:
  - name: ${1}
  - params: ${2:None}
endsnippet

snippet nova.flavor_access_list "Grants access of the flavor to a project. Flavor must be private."
nova.flavor_access_list:
  - name: ${1}
  - projects: ${2}
endsnippet

snippet nova.flavor_absent "Makes flavor to be absent"
nova.flavor_absent:
  - name: ${1}
endsnippet

snippet infoblox_range.present "Ensure range record is present."
infoblox_range.present:
  - name: ${1:None}
  - start_addr: ${2:None}
  - end_addr: ${3:None}
  - data: ${4:None}
endsnippet

snippet infoblox_range.absent "Ensure the range is removed"
infoblox_range.absent:
  - name: ${1:None}
  - start_addr: ${2:None}
  - end_addr: ${3:None}
  - data: ${4:None}
endsnippet

snippet portage_config.mod_init "Enforce a nice structure on the configuration files."
portage_config.mod_init:
  - low: ${1}
endsnippet

snippet portage_config.flags "Enforce the given flags on the given package or ``DEPEND`` atom."
portage_config.flags:
  - name: ${1}
  - use: ${2:None}
  - accept_keywords: ${3:None}
  - env: ${4:None}
  - license: ${5:None}
  - properties: ${6:None}
  - unmask: ${7:False}
  - mask: ${8:False}
endsnippet

snippet tls.valid_certificate "Verify that a TLS certificate is valid now and (optionally) will be valid"
tls.valid_certificate:
  - name: ${1}
  - weeks: ${2:0}
  - days: ${3:0}
  - hours: ${4:0}
  - minutes: ${5:0}
  - seconds: ${6:0}
endsnippet

snippet mount.mounted "Verify that a device is mounted"
mount.mounted:
  - name: ${1}
  - device: ${2}
  - fstype: ${3}
  - mkmnt: ${4:False}
  - opts: ${5:"defaults"}
  - dump: ${6:0}
  - pass_num: ${7:0}
  - config: ${8:"/etc/fstab"}
  - persist: ${9:True}
  - mount: ${10:True}
  - user: ${11:None}
  - match_on: ${12:"auto"}
  - device_name_regex: ${13:None}
  - extra_mount_invisible_options: ${14:None}
  - extra_mount_invisible_keys: ${15:None}
  - extra_mount_ignore_fs_keys: ${16:None}
  - extra_mount_translate_options: ${17:None}
  - hidden_opts: ${18:None}
endsnippet

snippet mount.swap "Activates a swap device"
mount.swap:
  - name: ${1}
  - persist: ${2:True}
  - config: ${3:"/etc/fstab"}
endsnippet

snippet mount.unmounted "Verify that a device is not mounted"
mount.unmounted:
  - name: ${1}
  - device: ${2:None}
  - config: ${3:"/etc/fstab"}
  - persist: ${4:False}
  - user: ${5:None}
endsnippet

snippet mount.mod_watch "The mounted watcher, called to invoke the watch command."
mount.mod_watch:
  - name: ${1}
  - user: ${2:None}
endsnippet

snippet mount.fstab_present "Makes sure that a fstab mount point is pressent."
mount.fstab_present:
  - name: ${1}
  - fs_file: ${2}
  - fs_vfstype: ${3}
  - fs_mntops: ${4:"defaults"}
  - fs_freq: ${5:0}
  - fs_passno: ${6:0}
  - mount_by: ${7:None}
  - config: ${8:"/etc/fstab"}
  - mount: ${9:True}
  - match_on: ${10:"auto"}
endsnippet

snippet mount.fstab_absent "Makes sure that a fstab mount point is absent."
mount.fstab_absent:
  - name: ${1}
  - fs_file: ${2}
  - mount_by: ${3:None}
  - config: ${4:"/etc/fstab"}
endsnippet

snippet loop.until "Loop over an execution module until a condition is met."
loop.until:
  - name: ${1}
  - m_args: ${2:None}
  - m_kwargs: ${3:None}
  - condition: ${4:None}
  - period: ${5:0}
  - timeout: ${6:604800}
endsnippet

snippet loop.timed_out ""
loop.timed_out:
endsnippet

snippet postgres_extension.present "Ensure that the named extension is present."
postgres_extension.present:
  - name: ${1}
  - if_not_exists: ${2:None}
  - schema: ${3:None}
  - ext_version: ${4:None}
  - from_version: ${5:None}
  - user: ${6:None}
  - maintenance_db: ${7:None}
  - db_user: ${8:None}
  - db_password: ${9:None}
  - db_host: ${10:None}
  - db_port: ${11:None}
endsnippet

snippet postgres_extension.absent "Ensure that the named extension is absent."
postgres_extension.absent:
  - name: ${1}
  - if_exists: ${2:None}
  - restrict: ${3:None}
  - cascade: ${4:None}
  - user: ${5:None}
  - maintenance_db: ${6:None}
  - db_user: ${7:None}
  - db_password: ${8:None}
  - db_host: ${9:None}
  - db_port: ${10:None}
endsnippet

snippet pecl.installed "Make sure that a pecl extension is installed."
pecl.installed:
  - name: ${1}
  - version: ${2:None}
  - defaults: ${3:False}
  - force: ${4:False}
  - preferred_state: ${5:"stable"}
endsnippet

snippet pecl.removed "Make sure that a pecl extension is not installed."
pecl.removed:
  - name: ${1}
endsnippet

snippet win_wua.installed "Ensure Microsoft Updates are installed. Updates will be downloaded if"
win_wua.installed:
  - name: ${1}
  - updates: ${2:None}
endsnippet

snippet win_wua.removed "Ensure Microsoft Updates are uninstalled."
win_wua.removed:
  - name: ${1}
  - updates: ${2:None}
endsnippet

snippet win_wua.uptodate "Ensure Microsoft Updates that match the passed criteria are installed."
win_wua.uptodate:
  - name: ${1}
  - software: ${2:True}
  - drivers: ${3:False}
  - skip_hidden: ${4:False}
  - skip_mandatory: ${5:False}
  - skip_reboot: ${6:True}
  - categories: ${7:None}
  - severities: ${8:None}
endsnippet

snippet sysrc.managed "Ensure a sysrc variable is set to a specific value."
sysrc.managed:
  - name: ${1}
  - value: ${2}
endsnippet

snippet sysrc.absent "Ensure a sysrc variable is absent."
sysrc.absent:
  - name: ${1}
endsnippet

snippet jboss7.datasource_exists "Ensures that a datasource with given properties exist on the jboss instance."
jboss7.datasource_exists:
  - name: ${1}
  - jboss_config: ${2}
  - datasource_properties: ${3}
  - recreate: ${4:False}
  - profile: ${5:None}
endsnippet

snippet jboss7.bindings_exist "Ensures that given JNDI binding are present on the server."
jboss7.bindings_exist:
  - name: ${1}
  - jboss_config: ${2}
  - bindings: ${3}
  - profile: ${4:None}
endsnippet

snippet jboss7.deployed "Ensures that the given application is deployed on server."
jboss7.deployed:
  - name: ${1}
  - jboss_config: ${2}
  - salt_source: ${3:None}
endsnippet

snippet jboss7.reloaded "Reloads configuration of jboss server."
jboss7.reloaded:
  - name: ${1}
  - jboss_config: ${2}
  - timeout: ${3:60}
  - interval: ${4:5}
endsnippet

snippet modjk.worker_stopped "Stop all the workers in the modjk load balancer"
modjk.worker_stopped:
  - name: ${1}
  - workers: ${2:None}
  - profile: ${3:"default"}
endsnippet

snippet modjk.worker_activated "Activate all the workers in the modjk load balancer"
modjk.worker_activated:
  - name: ${1}
  - workers: ${2:None}
  - profile: ${3:"default"}
endsnippet

snippet modjk.worker_disabled "Disable all the workers in the modjk load balancer"
modjk.worker_disabled:
  - name: ${1}
  - workers: ${2:None}
  - profile: ${3:"default"}
endsnippet

snippet modjk.worker_recover "Recover all the workers in the modjk load balancer"
modjk.worker_recover:
  - name: ${1}
  - workers: ${2:None}
  - profile: ${3:"default"}
endsnippet

snippet pagerduty.create_event "Create an event on the PagerDuty service"
pagerduty.create_event:
  - name: ${1}
  - details: ${2}
  - service_key: ${3}
  - profile: ${4}
endsnippet

snippet boto_iam.user_absent "Ensure the IAM user is absent. User cannot be deleted if it has keys."
boto_iam.user_absent:
  - name: ${1}
  - delete_keys: ${2:True}
  - delete_mfa_devices: ${3:True}
  - delete_profile: ${4:True}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_iam.keys_present "Ensure the IAM access keys are present."
boto_iam.keys_present:
  - name: ${1}
  - number: ${2}
  - save_dir: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
  - save_format: ${8:"{2}
{0}
{3}
{1}
"}
endsnippet

snippet boto_iam.keys_absent "Ensure the IAM user access_key_id is absent."
boto_iam.keys_absent:
  - access_keys: ${1}
  - user_name: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_iam.user_present "Ensure the IAM user is present"
boto_iam.user_present:
  - name: ${1}
  - policies: ${2:None}
  - policies_from_pillars: ${3:None}
  - managed_policies: ${4:None}
  - password: ${5:None}
  - path: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_iam.group_absent "Ensure the IAM group is absent."
boto_iam.group_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_iam.group_present "Ensure the IAM group is present"
boto_iam.group_present:
  - name: ${1}
  - policies: ${2:None}
  - policies_from_pillars: ${3:None}
  - managed_policies: ${4:None}
  - users: ${5:None}
  - path: ${6:"/"}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
  - delete_policies: ${11:True}
endsnippet

snippet boto_iam.account_policy "Change account policy."
boto_iam.account_policy:
  - name: ${1:None}
  - allow_users_to_change_password: ${2:None}
  - hard_expiry: ${3:None}
  - max_password_age: ${4:None}
  - minimum_password_length: ${5:None}
  - password_reuse_prevention: ${6:None}
  - require_lowercase_characters: ${7:None}
  - require_numbers: ${8:None}
  - require_symbols: ${9:None}
  - require_uppercase_characters: ${10:None}
  - region: ${11:None}
  - key: ${12:None}
  - keyid: ${13:None}
  - profile: ${14:None}
endsnippet

snippet boto_iam.server_cert_absent "Deletes a server certificate."
boto_iam.server_cert_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_iam.server_cert_present "Crete server certificate."
boto_iam.server_cert_present:
  - name: ${1}
  - public_key: ${2}
  - private_key: ${3}
  - cert_chain: ${4:None}
  - path: ${5:None}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_iam.policy_present "Ensure the IAM managed policy is present"
boto_iam.policy_present:
  - name: ${1}
  - policy_document: ${2}
  - path: ${3:None}
  - description: ${4:None}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_iam.policy_absent "Ensure the IAM managed policy with the specified name is absent"
boto_iam.policy_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_iam.saml_provider_present "Ensure the SAML provider with the specified name is present."
boto_iam.saml_provider_present:
  - name: ${1}
  - saml_metadata_document: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_iam.saml_provider_absent "Ensure the SAML provider with the specified name is absent."
boto_iam.saml_provider_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet zk_concurrency.lock "Block state execution until you are able to get the lock (or hit the timeout)"
zk_concurrency.lock:
  - name: ${1}
  - zk_hosts: ${2:None}
  - identifier: ${3:None}
  - max_concurrency: ${4:1}
  - timeout: ${5:None}
  - ephemeral_lease: ${6:False}
  - profile: ${7:None}
  - scheme: ${8:None}
  - username: ${9:None}
  - password: ${10:None}
  - default_acl: ${11:None}
endsnippet

snippet zk_concurrency.unlock "Remove lease from semaphore."
zk_concurrency.unlock:
  - name: ${1}
  - zk_hosts: ${2:None}
  - identifier: ${3:None}
  - max_concurrency: ${4:1}
  - ephemeral_lease: ${5:False}
  - profile: ${6:None}
  - scheme: ${7:None}
  - username: ${8:None}
  - password: ${9:None}
  - default_acl: ${10:None}
endsnippet

snippet zk_concurrency.min_party "Ensure that there are `min_nodes` in the party at `name`, optionally blocking if not available."
zk_concurrency.min_party:
  - name: ${1}
  - zk_hosts: ${2}
  - min_nodes: ${3}
  - blocking: ${4:False}
  - profile: ${5:None}
  - scheme: ${6:None}
  - username: ${7:None}
  - password: ${8:None}
  - default_acl: ${9:None}
endsnippet

snippet beacon.present "Ensure beacon is configured with the included beacon data."
beacon.present:
  - name: ${1}
  - save: ${2:False}
endsnippet

snippet beacon.absent "Ensure beacon is absent."
beacon.absent:
  - name: ${1}
  - save: ${2:False}
endsnippet

snippet beacon.enabled "Enable a beacon."
beacon.enabled:
  - name: ${1}
endsnippet

snippet beacon.disabled "Disable a beacon."
beacon.disabled:
  - name: ${1}
endsnippet

snippet pbm.mod_init "Init function"
pbm.mod_init:
  - low: ${1}
endsnippet

snippet pbm.default_vsan_policy_configured "Configures the default VSAN policy on a vCenter."
pbm.default_vsan_policy_configured:
  - name: ${1}
  - policy: ${2}
endsnippet

snippet pbm.storage_policies_configured "Configures storage policies on a vCenter."
pbm.storage_policies_configured:
  - name: ${1}
  - policies: ${2}
endsnippet

snippet pbm.default_storage_policy_assigned "Assigns a default storage policy to a datastore"
pbm.default_storage_policy_assigned:
  - name: ${1}
  - policy: ${2}
  - datastore: ${3}
endsnippet

snippet xml.value_present "Manages a given XML file"
xml.value_present:
  - name: ${1}
  - xpath: ${2}
  - value: ${3}
endsnippet

snippet virtualenv_mod.managed "Create a virtualenv and optionally manage it with pip"
virtualenv_mod.managed:
  - name: ${1}
  - venv_bin: ${2:None}
  - requirements: ${3:None}
  - system_site_packages: ${4:False}
  - distribute: ${5:False}
  - use_wheel: ${6:False}
  - clear: ${7:False}
  - python: ${8:None}
  - extra_search_dir: ${9:None}
  - never_download: ${10:None}
  - prompt: ${11:None}
  - user: ${12:None}
  - cwd: ${13:None}
  - index_url: ${14:None}
  - extra_index_url: ${15:None}
  - pre_releases: ${16:False}
  - no_deps: ${17:False}
  - pip_download: ${18:None}
  - pip_download_cache: ${19:None}
  - pip_exists_action: ${20:None}
  - pip_ignore_installed: ${21:False}
  - proxy: ${22:None}
  - use_vt: ${23:False}
  - env_vars: ${24:None}
  - no_use_wheel: ${25:False}
  - pip_upgrade: ${26:False}
  - pip_pkgs: ${27:None}
  - pip_no_cache_dir: ${28:False}
  - pip_cache_dir: ${29:None}
  - process_dependency_links: ${30:False}
  - no_binary: ${31:None}
endsnippet

snippet sqlite3.row_absent "Makes sure the specified row is absent in db.  If multiple rows"
sqlite3.row_absent:
  - name: ${1}
  - db: ${2}
  - table: ${3}
  - where_sql: ${4}
  - where_args: ${5:None}
endsnippet

snippet sqlite3.row_present "Checks to make sure the given row exists. If row exists and update is True"
sqlite3.row_present:
  - name: ${1}
  - db: ${2}
  - table: ${3}
  - data: ${4}
  - where_sql: ${5}
  - where_args: ${6:None}
  - update: ${7:False}
endsnippet

snippet sqlite3.table_absent "Make sure the specified table does not exist"
sqlite3.table_absent:
  - name: ${1}
  - db: ${2}
endsnippet

snippet sqlite3.table_present "Make sure the specified table exists with the specified schema"
sqlite3.table_present:
  - name: ${1}
  - db: ${2}
  - schema: ${3}
  - force: ${4:False}
endsnippet

snippet postgres_privileges.present "Grant the requested privilege(s) on the specified object to a role"
postgres_privileges.present:
  - name: ${1}
  - object_name: ${2}
  - object_type: ${3}
  - privileges: ${4:None}
  - grant_option: ${5:None}
  - prepend: ${6:"public"}
  - maintenance_db: ${7:None}
  - user: ${8:None}
  - db_password: ${9:None}
  - db_host: ${10:None}
  - db_port: ${11:None}
  - db_user: ${12:None}
endsnippet

snippet postgres_privileges.absent "Revoke the requested privilege(s) on the specificed object(s)"
postgres_privileges.absent:
  - name: ${1}
  - object_name: ${2}
  - object_type: ${3}
  - privileges: ${4:None}
  - prepend: ${5:"public"}
  - maintenance_db: ${6:None}
  - user: ${7:None}
  - db_password: ${8:None}
  - db_host: ${9:None}
  - db_port: ${10:None}
  - db_user: ${11:None}
endsnippet

snippet slack.post_message "Send a message to a Slack channel."
slack.post_message:
  - name: ${1}
  - channel: ${2}
  - from_name: ${3}
  - message: ${4}
  - api_key: ${5:None}
  - icon: ${6:None}
endsnippet

snippet ethtool.coalesce "Manage coalescing settings of network device"
ethtool.coalesce:
  - name: ${1}
endsnippet

snippet ethtool.ring "Manage rx/tx ring parameters of network device"
ethtool.ring:
  - name: ${1}
endsnippet

snippet ethtool.offload "Manage protocol offload and other features of network device"
ethtool.offload:
  - name: ${1}
endsnippet

snippet glance.image_present "Checks if given image is present with properties"
glance.image_present:
  - name: ${1}
  - visibility: ${2:"public"}
  - protected: ${3:None}
  - checksum: ${4:None}
  - location: ${5:None}
  - disk_format: ${6:"raw"}
  - wait_for: ${7:None}
  - timeout: ${8:30}
endsnippet

snippet pyrax_queues.present "Ensure the RackSpace queue exists."
pyrax_queues.present:
  - name: ${1}
  - provider: ${2}
endsnippet

snippet pyrax_queues.absent "Ensure the named Rackspace queue is deleted."
pyrax_queues.absent:
  - name: ${1}
  - provider: ${2}
endsnippet

snippet onyx.user_present "Ensure a user is present with the specified groups"
onyx.user_present:
  - name: ${1}
  - password: ${2:None}
  - roles: ${3:None}
  - encrypted: ${4:False}
  - crypt_salt: ${5:None}
  - algorithm: ${6:"sha256"}
endsnippet

snippet onyx.user_absent "Ensure a user is not present"
onyx.user_absent:
  - name: ${1}
endsnippet

snippet onyx.config_present "Ensure a specific configuration line exists in the running config"
onyx.config_present:
  - name: ${1}
endsnippet

snippet onyx.config_absent "Ensure a specific configuration line does not exist in the running config"
onyx.config_absent:
  - name: ${1}
endsnippet

snippet onyx.replace "Replace all instances of a string or full line in the running config"
onyx.replace:
  - name: ${1}
  - repl: ${2}
  - full_match: ${3:False}
endsnippet

snippet influxdb08_database.present "Ensure that the named database is present"
influxdb08_database.present:
  - name: ${1}
  - user: ${2:None}
  - password: ${3:None}
  - host: ${4:None}
  - port: ${5:None}
endsnippet

snippet influxdb08_database.absent "Ensure that the named database is absent"
influxdb08_database.absent:
  - name: ${1}
  - user: ${2:None}
  - password: ${3:None}
  - host: ${4:None}
  - port: ${5:None}
endsnippet

snippet uptime.monitored "Makes sure an URL is monitored by uptime. Checks if URL is already"
uptime.monitored:
  - name: ${1}
endsnippet

snippet keystone.user_present "Ensure that the keystone user is present with the specified properties."
keystone.user_present:
  - name: ${1}
  - password: ${2}
  - email: ${3}
  - tenant: ${4:None}
  - enabled: ${5:True}
  - roles: ${6:None}
  - profile: ${7:None}
  - password_reset: ${8:True}
  - project: ${9:None}
endsnippet

snippet keystone.user_absent "Ensure that the keystone user is absent."
keystone.user_absent:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet keystone.tenant_present "Ensures that the keystone tenant exists"
keystone.tenant_present:
  - name: ${1}
  - description: ${2:None}
  - enabled: ${3:True}
  - profile: ${4:None}
endsnippet

snippet keystone.tenant_absent "Ensure that the keystone tenant is absent."
keystone.tenant_absent:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet keystone.project_present "Ensures that the keystone project exists"
keystone.project_present:
  - name: ${1}
  - description: ${2:None}
  - enabled: ${3:True}
  - profile: ${4:None}
endsnippet

snippet keystone.project_absent "Ensure that the keystone project is absent."
keystone.project_absent:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet keystone.role_present "'"
keystone.role_present:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet keystone.role_absent "Ensure that the keystone role is absent."
keystone.role_absent:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet keystone.service_present "Ensure service present in Keystone catalog"
keystone.service_present:
  - name: ${1}
  - service_type: ${2}
  - description: ${3:None}
  - profile: ${4:None}
endsnippet

snippet keystone.service_absent "Ensure that the service doesn't exist in Keystone catalog"
keystone.service_absent:
  - name: ${1}
  - profile: ${2:None}
endsnippet

snippet keystone.endpoint_present "Ensure the specified endpoints exists for service"
keystone.endpoint_present:
  - name: ${1}
  - publicurl: ${2:None}
  - internalurl: ${3:None}
  - adminurl: ${4:None}
  - region: ${5:None}
  - profile: ${6:None}
  - url: ${7:None}
  - interface: ${8:None}
endsnippet

snippet keystone.endpoint_absent "Ensure that the endpoint for a service doesn't exist in Keystone catalog"
keystone.endpoint_absent:
  - name: ${1}
  - region: ${2:None}
  - profile: ${3:None}
  - interface: ${4:None}
endsnippet

snippet mac_xattr.exists "Make sure the given attributes exist on the file/directory"
mac_xattr.exists:
  - name: ${1}
  - attributes: ${2}
endsnippet

snippet mac_xattr.delete "Make sure the given attributes are deleted from the file/directory"
mac_xattr.delete:
  - name: ${1}
  - attributes: ${2}
endsnippet

snippet postgres_database.present "Ensure that the named database is present with the specified properties."
postgres_database.present:
  - name: ${1}
  - tablespace: ${2:None}
  - encoding: ${3:None}
  - lc_collate: ${4:None}
  - lc_ctype: ${5:None}
  - owner: ${6:None}
  - owner_recurse: ${7:False}
  - template: ${8:None}
  - user: ${9:None}
  - maintenance_db: ${10:None}
  - db_password: ${11:None}
  - db_host: ${12:None}
  - db_port: ${13:None}
  - db_user: ${14:None}
endsnippet

snippet postgres_database.absent "Ensure that the named database is absent"
postgres_database.absent:
  - name: ${1}
  - user: ${2:None}
  - maintenance_db: ${3:None}
  - db_password: ${4:None}
  - db_host: ${5:None}
  - db_port: ${6:None}
  - db_user: ${7:None}
endsnippet

snippet rabbitmq_cluster.joined "Ensure the current node joined to a cluster with node user@host"
rabbitmq_cluster.joined:
  - name: ${1}
  - host: ${2}
  - user: ${3:"rabbit"}
  - ram_node: ${4:None}
  - runas: ${5:"root"}
endsnippet

snippet event.send "Send an event to the Salt Master"
event.send:
  - name: ${1}
  - data: ${2:None}
  - preload: ${3:None}
  - with_env: ${4:False}
  - with_grains: ${5:False}
  - with_pillar: ${6:False}
  - show_changed: ${7:True}
endsnippet

snippet event.wait "Fire an event on the Salt master event bus if called from a watch statement"
event.wait:
  - name: ${1}
  - sfun: ${2:None}
endsnippet

snippet docker_image.present "    The ``tag`` argument has been added. It is now required unless pulling"
docker_image.present:
  - name: ${1}
  - tag: ${2:None}
  - build: ${3:None}
  - load: ${4:None}
  - force: ${5:False}
  - insecure_registry: ${6:False}
  - client_timeout: ${7:salt.utils.docker.CLIENT_TIMEOUT
}
  - dockerfile: ${8:None}
  - sls: ${9:None}
  - base: ${10:"opensuse/python"}
  - saltenv: ${11:"base"}
  - pillarenv: ${12:None}
  - pillar: ${13:None}
endsnippet

snippet docker_image.absent "Ensure that an image is absent from the Minion. Image names can be"
docker_image.absent:
  - name: ${1:None}
  - images: ${2:None}
  - force: ${3:False}
endsnippet

snippet docker_image.mod_watch "The docker_image  watcher, called to invoke the watch command."
docker_image.mod_watch:
  - name: ${1}
  - sfun: ${2:None}
endsnippet

snippet zcbuildout.installed "Install buildout in a specific directory"
zcbuildout.installed:
  - name: ${1}
  - config: ${2:"buildout.cfg"}
  - quiet: ${3:False}
  - parts: ${4:None}
  - user: ${5:None}
  - env: ${6:()
}
  - buildout_ver: ${7:None}
  - test_release: ${8:False}
  - distribute: ${9:None}
  - new_st: ${10:None}
  - offline: ${11:False}
  - newest: ${12:False}
  - python: ${13:sys.executable
}
  - debug: ${14:False}
  - verbose: ${15:False}
  - unless: ${16:None}
  - onlyif: ${17:None}
  - use_vt: ${18:False}
  - loglevel: ${19:"debug"}
endsnippet

snippet influxdb_continuous_query.present "Ensure that given continuous query is present."
influxdb_continuous_query.present:
  - name: ${1}
  - database: ${2}
  - query: ${3}
  - resample_time: ${4:None}
  - coverage_period: ${5:None}
endsnippet

snippet influxdb_continuous_query.absent "Ensure that given continuous query is absent."
influxdb_continuous_query.absent:
  - name: ${1}
  - database: ${2}
endsnippet

snippet keystone_role_grant.present ""
keystone_role_grant.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_role_grant.absent ""
keystone_role_grant.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet nexus.downloaded "Ensures that the artifact from nexus exists at given location. If it doesn't exist, then"
nexus.downloaded:
  - name: ${1}
  - artifact: ${2}
  - target_dir: ${3:"/tmp"}
  - target_file: ${4:None}
endsnippet

snippet grafana.dashboard_present "Ensure the grafana dashboard exists and is managed."
grafana.dashboard_present:
  - name: ${1}
  - dashboard: ${2:None}
  - dashboard_from_pillar: ${3:None}
  - rows: ${4:None}
  - rows_from_pillar: ${5:None}
  - profile: ${6:"grafana"}
endsnippet

snippet grafana.dashboard_absent "Ensure the named grafana dashboard is deleted."
grafana.dashboard_absent:
  - name: ${1}
  - hosts: ${2:None}
  - profile: ${3:"grafana"}
endsnippet

snippet rabbitmq_plugin.enabled "Ensure the RabbitMQ plugin is enabled."
rabbitmq_plugin.enabled:
  - name: ${1}
  - runas: ${2:None}
endsnippet

snippet rabbitmq_plugin.disabled "Ensure the RabbitMQ plugin is disabled."
rabbitmq_plugin.disabled:
  - name: ${1}
  - runas: ${2:None}
endsnippet

snippet boto_vpc.present "Ensure VPC exists."
boto_vpc.present:
  - name: ${1}
  - cidr_block: ${2}
  - instance_tenancy: ${3:None}
  - dns_support: ${4:None}
  - dns_hostnames: ${5:None}
  - tags: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_vpc.absent "Ensure VPC with passed properties is absent."
boto_vpc.absent:
  - name: ${1}
  - tags: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_vpc.dhcp_options_present "Ensure a set of DHCP options with the given settings exist."
boto_vpc.dhcp_options_present:
  - name: ${1}
  - dhcp_options_id: ${2:None}
  - vpc_name: ${3:None}
  - vpc_id: ${4:None}
  - domain_name: ${5:None}
  - domain_name_servers: ${6:None}
  - ntp_servers: ${7:None}
  - netbios_name_servers: ${8:None}
  - netbios_node_type: ${9:None}
  - tags: ${10:None}
  - region: ${11:None}
  - key: ${12:None}
  - keyid: ${13:None}
  - profile: ${14:None}
endsnippet

snippet boto_vpc.dhcp_options_absent "Ensure a set of DHCP options with the given settings exist."
boto_vpc.dhcp_options_absent:
  - name: ${1:None}
  - dhcp_options_id: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_vpc.subnet_present "Ensure a subnet exists."
boto_vpc.subnet_present:
  - name: ${1}
  - cidr_block: ${2}
  - vpc_name: ${3:None}
  - vpc_id: ${4:None}
  - availability_zone: ${5:None}
  - tags: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
  - route_table_id: ${11:None}
  - route_table_name: ${12:None}
  - auto_assign_public_ipv4: ${13:False}
endsnippet

snippet boto_vpc.subnet_absent "Ensure subnet with passed properties is absent."
boto_vpc.subnet_absent:
  - name: ${1:None}
  - subnet_id: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_vpc.internet_gateway_present "Ensure an internet gateway exists."
boto_vpc.internet_gateway_present:
  - name: ${1}
  - vpc_name: ${2:None}
  - vpc_id: ${3:None}
  - tags: ${4:None}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_vpc.internet_gateway_absent "Ensure the named internet gateway is absent."
boto_vpc.internet_gateway_absent:
  - name: ${1}
  - detach: ${2:False}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_vpc.route_table_present "Ensure route table with routes exists and is associated to a VPC."
boto_vpc.route_table_present:
  - name: ${1}
  - vpc_name: ${2:None}
  - vpc_id: ${3:None}
  - routes: ${4:None}
  - subnet_ids: ${5:None}
  - subnet_names: ${6:None}
  - tags: ${7:None}
  - region: ${8:None}
  - key: ${9:None}
  - keyid: ${10:None}
  - profile: ${11:None}
endsnippet

snippet boto_vpc.route_table_absent "Ensure the named route table is absent."
boto_vpc.route_table_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_vpc.nat_gateway_present "Ensure a nat gateway exists within the specified subnet"
boto_vpc.nat_gateway_present:
  - name: ${1}
  - subnet_name: ${2:None}
  - subnet_id: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
  - allocation_id: ${8:None}
endsnippet

snippet boto_vpc.nat_gateway_absent "Ensure the nat gateway in the named subnet is absent."
boto_vpc.nat_gateway_absent:
  - name: ${1:None}
  - subnet_name: ${2:None}
  - subnet_id: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
  - wait_for_delete_retries: ${8:0}
endsnippet

snippet boto_vpc.accept_vpc_peering_connection "Accept a VPC pending requested peering connection between two VPCs."
boto_vpc.accept_vpc_peering_connection:
  - name: ${1:None}
  - conn_id: ${2:None}
  - conn_name: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_vpc.request_vpc_peering_connection "name"
boto_vpc.request_vpc_peering_connection:
  - name: ${1}
  - requester_vpc_id: ${2:None}
  - requester_vpc_name: ${3:None}
  - peer_vpc_id: ${4:None}
  - peer_vpc_name: ${5:None}
  - conn_name: ${6:None}
  - peer_owner_id: ${7:None}
  - region: ${8:None}
  - key: ${9:None}
  - keyid: ${10:None}
  - profile: ${11:None}
endsnippet

snippet boto_vpc.vpc_peering_connection_present "name"
boto_vpc.vpc_peering_connection_present:
  - name: ${1}
  - requester_vpc_id: ${2:None}
  - requester_vpc_name: ${3:None}
  - peer_vpc_id: ${4:None}
  - peer_vpc_name: ${5:None}
  - conn_name: ${6:None}
  - peer_owner_id: ${7:None}
  - region: ${8:None}
  - key: ${9:None}
  - keyid: ${10:None}
  - profile: ${11:None}
endsnippet

snippet boto_vpc.vpc_peering_connection_absent ""
boto_vpc.vpc_peering_connection_absent:
  - name: ${1}
  - conn_id: ${2:None}
  - conn_name: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_vpc.delete_vpc_peering_connection "name"
boto_vpc.delete_vpc_peering_connection:
  - name: ${1}
  - conn_id: ${2:None}
  - conn_name: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_sns.present "Ensure the SNS topic exists."
boto_sns.present:
  - name: ${1}
  - subscriptions: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_sns.absent "Ensure the named sns topic is deleted."
boto_sns.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
  - unsubscribe: ${6:False}
endsnippet

snippet glassfish.connection_factory_present "Ensures that the Connection Factory is present"
glassfish.connection_factory_present:
  - name: ${1}
  - restype: ${2:"connection_factory"}
  - description: ${3:""}
  - enabled: ${4:True}
  - min_size: ${5:1}
  - max_size: ${6:250}
  - resize_quantity: ${7:2}
  - idle_timeout: ${8:300}
  - wait_timeout: ${9:60}
  - reconnect_on_failure: ${10:False}
  - transaction_support: ${11:""}
  - connection_validation: ${12:False}
  - server: ${13:None}
endsnippet

snippet glassfish.connection_factory_absent "Ensures the transaction factory is absent."
glassfish.connection_factory_absent:
  - name: ${1}
  - both: ${2:True}
  - server: ${3:None}
endsnippet

snippet glassfish.destination_present "Ensures that the JMS Destination Resource (queue or topic) is present"
glassfish.destination_present:
  - name: ${1}
  - physical: ${2}
  - restype: ${3:"queue"}
  - description: ${4:""}
  - enabled: ${5:True}
  - server: ${6:None}
endsnippet

snippet glassfish.destination_absent "Ensures that the JMS Destination doesn't exists"
glassfish.destination_absent:
  - name: ${1}
  - server: ${2:None}
endsnippet

snippet glassfish.jdbc_datasource_present "Ensures that the JDBC Datasource exists"
glassfish.jdbc_datasource_present:
  - name: ${1}
  - description: ${2:""}
  - enabled: ${3:True}
  - restype: ${4:"datasource"}
  - vendor: ${5:"mysql"}
  - sql_url: ${6:""}
  - sql_user: ${7:""}
  - sql_password: ${8:""}
  - min_size: ${9:8}
  - max_size: ${10:32}
  - resize_quantity: ${11:2}
  - idle_timeout: ${12:300}
  - wait_timeout: ${13:60}
  - non_transactional: ${14:False}
  - transaction_isolation: ${15:""}
  - isolation_guaranteed: ${16:True}
  - server: ${17:None}
endsnippet

snippet glassfish.jdbc_datasource_absent "Ensures the JDBC Datasource doesn't exists"
glassfish.jdbc_datasource_absent:
  - name: ${1}
  - both: ${2:True}
  - server: ${3:None}
endsnippet

snippet glassfish.system_properties_present "Ensures that the system properties are present"
glassfish.system_properties_present:
  - server: ${1:None}
endsnippet

snippet glassfish.system_properties_absent "Ensures that the system property doesn't exists"
glassfish.system_properties_absent:
  - name: ${1}
  - server: ${2:None}
endsnippet

snippet htpasswd.user_exists "Make sure the user is inside the specified htpasswd file"
htpasswd.user_exists:
  - name: ${1}
  - password: ${2:None}
  - htpasswd_file: ${3:None}
  - options: ${4:""}
  - force: ${5:False}
  - runas: ${6:None}
  - update: ${7:False}
endsnippet

snippet htpasswd.user_absent "Make sure the user is not in the specified htpasswd file"
htpasswd.user_absent:
  - name: ${1}
  - htpasswd_file: ${2:None}
  - runas: ${3:None}
endsnippet

snippet mac_assistive.installed "Make sure that we have the given bundle ID or path to command"
mac_assistive.installed:
  - name: ${1}
  - enabled: ${2:True}
endsnippet

snippet group.present "Ensure that a group is present"
group.present:
  - name: ${1}
  - gid: ${2:None}
  - system: ${3:False}
  - addusers: ${4:None}
  - delusers: ${5:None}
  - members: ${6:None}
endsnippet

snippet group.absent "Ensure that the named group is absent"
group.absent:
  - name: ${1}
endsnippet

snippet rdp.enabled "Enable the RDP service and make sure access to the RDP"
rdp.enabled:
  - name: ${1}
endsnippet

snippet rdp.disabled "Disable the RDP service"
rdp.disabled:
  - name: ${1}
endsnippet

snippet lxd_container.present "Create the named container if it does not exist"
lxd_container.present:
  - name: ${1}
  - running: ${2:None}
  - source: ${3:None}
  - profiles: ${4:None}
  - config: ${5:None}
  - devices: ${6:None}
  - architecture: ${7:"x86_64"}
  - ephemeral: ${8:False}
  - restart_on_change: ${9:False}
  - remote_addr: ${10:None}
  - cert: ${11:None}
  - key: ${12:None}
  - verify_cert: ${13:True}
endsnippet

snippet lxd_container.absent "Ensure a LXD container is not present, destroying it if present"
lxd_container.absent:
  - name: ${1}
  - stop: ${2:False}
  - remote_addr: ${3:None}
  - cert: ${4:None}
  - key: ${5:None}
  - verify_cert: ${6:True}
endsnippet

snippet lxd_container.running "Ensure a LXD container is running and restart it if restart is True"
lxd_container.running:
  - name: ${1}
  - restart: ${2:False}
  - remote_addr: ${3:None}
  - cert: ${4:None}
  - key: ${5:None}
  - verify_cert: ${6:True}
endsnippet

snippet lxd_container.frozen "Ensure a LXD container is frozen, start and freeze it if start is true"
lxd_container.frozen:
  - name: ${1}
  - start: ${2:True}
  - remote_addr: ${3:None}
  - cert: ${4:None}
  - key: ${5:None}
  - verify_cert: ${6:True}
endsnippet

snippet lxd_container.stopped "Ensure a LXD container is stopped, kill it if kill is true else stop it"
lxd_container.stopped:
  - name: ${1}
  - kill: ${2:False}
  - remote_addr: ${3:None}
  - cert: ${4:None}
  - key: ${5:None}
  - verify_cert: ${6:True}
endsnippet

snippet lxd_container.migrated "Ensure a container is migrated to another host"
lxd_container.migrated:
  - name: ${1}
  - remote_addr: ${2}
  - cert: ${3}
  - key: ${4}
  - verify_cert: ${5}
  - src_remote_addr: ${6}
  - stop_and_start: ${7:False}
  - src_cert: ${8:None}
  - src_key: ${9:None}
  - src_verify_cert: ${10:None}
endsnippet

snippet elasticsearch_index.absent "Ensure that the named index is absent."
elasticsearch_index.absent:
  - name: ${1}
endsnippet

snippet elasticsearch_index.present "    Marked ``definition`` as optional."
elasticsearch_index.present:
  - name: ${1}
  - definition: ${2:None}
endsnippet

snippet chocolatey.installed "Installs a package if not already installed"
chocolatey.installed:
  - name: ${1}
  - version: ${2:None}
  - source: ${3:None}
  - force: ${4:False}
  - pre_versions: ${5:False}
  - install_args: ${6:None}
  - override_args: ${7:False}
  - force_x86: ${8:False}
  - package_args: ${9:None}
  - allow_multiple: ${10:False}
  - execution_timeout: ${11:None}
endsnippet

snippet chocolatey.uninstalled "Uninstalls a package"
chocolatey.uninstalled:
  - name: ${1}
  - version: ${2:None}
  - uninstall_args: ${3:None}
  - override_args: ${4:False}
endsnippet

snippet chocolatey.upgraded "Upgrades a package. Will install the package if not installed."
chocolatey.upgraded:
  - name: ${1}
  - version: ${2:None}
  - source: ${3:None}
  - force: ${4:False}
  - pre_versions: ${5:False}
  - install_args: ${6:None}
  - override_args: ${7:False}
  - force_x86: ${8:False}
  - package_args: ${9:None}
endsnippet

snippet redismod.string "Ensure that the key exists in redis with the value specified"
redismod.string:
  - name: ${1}
  - value: ${2}
  - expire: ${3:None}
  - expireat: ${4:None}
endsnippet

snippet redismod.absent "Ensure key absent from redis"
redismod.absent:
  - name: ${1}
  - keys: ${2:None}
endsnippet

snippet redismod.slaveof "Set this redis instance as a slave."
redismod.slaveof:
  - name: ${1}
  - sentinel_host: ${2:None}
  - sentinel_port: ${3:None}
  - sentinel_password: ${4:None}
endsnippet

snippet keystone_group.present "Ensure an group exists and is up-to-date"
keystone_group.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_group.absent "Ensure group does not exist"
keystone_group.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet lxd_profile.present "Creates or updates LXD profiles"
lxd_profile.present:
  - name: ${1}
  - description: ${2:None}
  - config: ${3:None}
  - devices: ${4:None}
  - remote_addr: ${5:None}
  - cert: ${6:None}
  - key: ${7:None}
  - verify_cert: ${8:True}
endsnippet

snippet lxd_profile.absent "Ensure a LXD profile is not present, removing it if present."
lxd_profile.absent:
  - name: ${1}
  - remote_addr: ${2:None}
  - cert: ${3:None}
  - key: ${4:None}
  - verify_cert: ${5:True}
endsnippet

snippet win_pki.import_cert "Import the certificate file into the given certificate store."
win_pki.import_cert:
  - name: ${1}
  - cert_format: ${2:_DEFAULT_FORMAT}
  - context: ${3:_DEFAULT_CONTEXT}
  - store: ${4:_DEFAULT_STORE}
  - exportable: ${5:True}
  - password: ${6:""}
  - saltenv: ${7:"base"}
endsnippet

snippet win_pki.remove_cert "Remove the certificate from the given certificate store."
win_pki.remove_cert:
  - name: ${1}
  - thumbprint: ${2}
  - context: ${3:_DEFAULT_CONTEXT}
  - store: ${4:_DEFAULT_STORE}
endsnippet

snippet serverdensity_device.monitored "Device is monitored with Server Density."
serverdensity_device.monitored:
  - name: ${1}
  - group: ${2:None}
  - salt_name: ${3:True}
  - salt_params: ${4:True}
  - agent_version: ${5:1}
endsnippet

snippet esxcluster.mod_init "Retrieves and adapt the login credentials from the proxy connection module"
esxcluster.mod_init:
  - low: ${1}
endsnippet

snippet esxcluster.cluster_configured "Configures a cluster. Creates a new cluster, if it doesn't exist on the"
esxcluster.cluster_configured:
  - name: ${1}
  - cluster_config: ${2}
endsnippet

snippet esxcluster.vsan_datastore_configured "Configures the cluster's VSAN datastore"
esxcluster.vsan_datastore_configured:
  - name: ${1}
  - datastore_name: ${2}
endsnippet

snippet esxcluster.licenses_configured "Configures licenses on the cluster entity"
esxcluster.licenses_configured:
  - name: ${1}
  - licenses: ${2:None}
endsnippet

snippet mysql_database.present "Ensure that the named database is present with the specified properties"
mysql_database.present:
  - name: ${1}
  - character_set: ${2:None}
  - collate: ${3:None}
endsnippet

snippet mysql_database.absent "Ensure that the named database is absent"
mysql_database.absent:
  - name: ${1}
endsnippet

snippet zabbix_user.admin_password_present "Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):"
zabbix_user.admin_password_present:
  - name: ${1}
  - password: ${2:None}
endsnippet

snippet zabbix_user.present "Ensures that the user exists, eventually creates new user."
zabbix_user.present:
  - alias: ${1}
  - passwd: ${2}
  - usrgrps: ${3}
  - medias: ${4:None}
  - password_reset: ${5:False}
endsnippet

snippet zabbix_user.absent "Ensures that the user does not exist, eventually delete user."
zabbix_user.absent:
  - name: ${1}
endsnippet

snippet btrfs.subvolume_created "Makes sure that a btrfs subvolume is present."
btrfs.subvolume_created:
  - name: ${1}
  - device: ${2}
  - qgroupids: ${3:None}
  - set_default: ${4:False}
  - copy_on_write: ${5:True}
  - force_set_default: ${6:True}
  - __dest: ${7:None}
endsnippet

snippet btrfs.subvolume_deleted "Makes sure that a btrfs subvolume is removed."
btrfs.subvolume_deleted:
  - name: ${1}
  - device: ${2}
  - commit: ${3:False}
  - __dest: ${4:None}
endsnippet

snippet btrfs.wrapper ""
btrfs.wrapper:
endsnippet

snippet pcs.auth "Ensure all nodes are authorized to the cluster"
pcs.auth:
  - name: ${1}
  - nodes: ${2}
  - pcsuser: ${3:"hacluster"}
  - pcspasswd: ${4:"hacluster"}
  - extra_args: ${5:None}
endsnippet

snippet pcs.cluster_setup "Setup Pacemaker cluster on nodes."
pcs.cluster_setup:
  - name: ${1}
  - nodes: ${2}
  - pcsclustername: ${3:"pcscluster"}
  - extra_args: ${4:None}
endsnippet

snippet pcs.cluster_node_present "Add a node to the Pacemaker cluster via PCS"
pcs.cluster_node_present:
  - name: ${1}
  - node: ${2}
  - extra_args: ${3:None}
endsnippet

snippet pcs.cib_present "Ensure that a CIB-file with the content of the current live CIB is created"
pcs.cib_present:
  - name: ${1}
  - cibname: ${2}
  - scope: ${3:None}
  - extra_args: ${4:None}
endsnippet

snippet pcs.cib_pushed "Ensure that a CIB-file is pushed if it is changed since the creation of it with pcs.cib_present"
pcs.cib_pushed:
  - name: ${1}
  - cibname: ${2}
  - scope: ${3:None}
  - extra_args: ${4:None}
endsnippet

snippet pcs.prop_has_value "Ensure that a property in the cluster is set to a given value"
pcs.prop_has_value:
  - name: ${1}
  - prop: ${2}
  - value: ${3}
  - extra_args: ${4:None}
  - cibname: ${5:None}
endsnippet

snippet pcs.resource_defaults_to "Ensure a resource default in the cluster is set to a given value"
pcs.resource_defaults_to:
  - name: ${1}
  - default: ${2}
  - value: ${3}
  - extra_args: ${4:None}
  - cibname: ${5:None}
endsnippet

snippet pcs.resource_op_defaults_to "Ensure a resource operation default in the cluster is set to a given value"
pcs.resource_op_defaults_to:
  - name: ${1}
  - op_default: ${2}
  - value: ${3}
  - extra_args: ${4:None}
  - cibname: ${5:None}
endsnippet

snippet pcs.stonith_present "Ensure that a fencing resource is created"
pcs.stonith_present:
  - name: ${1}
  - stonith_id: ${2}
  - stonith_device_type: ${3}
  - stonith_device_options: ${4:None}
  - cibname: ${5:None}
endsnippet

snippet pcs.resource_present "Ensure that a resource is created"
pcs.resource_present:
  - name: ${1}
  - resource_id: ${2}
  - resource_type: ${3}
  - resource_options: ${4:None}
  - cibname: ${5:None}
endsnippet

snippet pcs.constraint_present "Ensure that a constraint is created"
pcs.constraint_present:
  - name: ${1}
  - constraint_id: ${2}
  - constraint_type: ${3}
  - constraint_options: ${4:None}
  - cibname: ${5:None}
endsnippet

snippet lxd_image.present "Ensure an image exists, copy it else from source"
lxd_image.present:
  - name: ${1}
  - source: ${2}
  - aliases: ${3:None}
  - public: ${4:None}
  - auto_update: ${5:None}
  - remote_addr: ${6:None}
  - cert: ${7:None}
  - key: ${8:None}
  - verify_cert: ${9:True}
endsnippet

snippet lxd_image.absent "name :"
lxd_image.absent:
  - name: ${1}
  - remote_addr: ${2:None}
  - cert: ${3:None}
  - key: ${4:None}
  - verify_cert: ${5:True}
endsnippet

snippet azurearm_network.virtual_network_present "Ensure a virtual network exists."
azurearm_network.virtual_network_present:
  - name: ${1}
  - address_prefixes: ${2}
  - resource_group: ${3}
  - dns_servers: ${4:None}
  - tags: ${5:None}
  - connection_auth: ${6:None}
endsnippet

snippet azurearm_network.virtual_network_absent "Ensure a virtual network does not exist in the resource group."
azurearm_network.virtual_network_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_network.subnet_present "Ensure a subnet exists."
azurearm_network.subnet_present:
  - name: ${1}
  - address_prefix: ${2}
  - virtual_network: ${3}
  - resource_group: ${4}
  - security_group: ${5:None}
  - route_table: ${6:None}
  - connection_auth: ${7:None}
endsnippet

snippet azurearm_network.subnet_absent "Ensure a virtual network does not exist in the virtual network."
azurearm_network.subnet_absent:
  - name: ${1}
  - virtual_network: ${2}
  - resource_group: ${3}
  - connection_auth: ${4:None}
endsnippet

snippet azurearm_network.network_security_group_present "Ensure a network security group exists."
azurearm_network.network_security_group_present:
  - name: ${1}
  - resource_group: ${2}
  - tags: ${3:None}
  - security_rules: ${4:None}
  - connection_auth: ${5:None}
endsnippet

snippet azurearm_network.network_security_group_absent "Ensure a network security group does not exist in the resource group."
azurearm_network.network_security_group_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_network.security_rule_present "Ensure a security rule exists."
azurearm_network.security_rule_present:
  - name: ${1}
  - access: ${2}
  - direction: ${3}
  - priority: ${4}
  - protocol: ${5}
  - security_group: ${6}
  - resource_group: ${7}
  - destination_address_prefix: ${8:None}
  - destination_port_range: ${9:None}
  - source_address_prefix: ${10:None}
  - source_port_range: ${11:None}
  - description: ${12:None}
  - destination_address_prefixes: ${13:None}
  - destination_port_ranges: ${14:None}
  - source_address_prefixes: ${15:None}
  - source_port_ranges: ${16:None}
  - connection_auth: ${17:None}
endsnippet

snippet azurearm_network.security_rule_absent "Ensure a security rule does not exist in the network security group."
azurearm_network.security_rule_absent:
  - name: ${1}
  - security_group: ${2}
  - resource_group: ${3}
  - connection_auth: ${4:None}
endsnippet

snippet azurearm_network.load_balancer_present "Ensure a load balancer exists."
azurearm_network.load_balancer_present:
  - name: ${1}
  - resource_group: ${2}
  - sku: ${3:None}
  - frontend_ip_configurations: ${4:None}
  - backend_address_pools: ${5:None}
  - load_balancing_rules: ${6:None}
  - probes: ${7:None}
  - inbound_nat_rules: ${8:None}
  - inbound_nat_pools: ${9:None}
  - outbound_nat_rules: ${10:None}
  - tags: ${11:None}
  - connection_auth: ${12:None}
endsnippet

snippet azurearm_network.load_balancer_absent "Ensure a load balancer does not exist in the resource group."
azurearm_network.load_balancer_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_network.public_ip_address_present "Ensure a public IP address exists."
azurearm_network.public_ip_address_present:
  - name: ${1}
  - resource_group: ${2}
  - tags: ${3:None}
  - sku: ${4:None}
  - public_ip_allocation_method: ${5:None}
  - public_ip_address_version: ${6:None}
  - dns_settings: ${7:None}
  - idle_timeout_in_minutes: ${8:None}
  - connection_auth: ${9:None}
endsnippet

snippet azurearm_network.public_ip_address_absent "Ensure a public IP address does not exist in the resource group."
azurearm_network.public_ip_address_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_network.network_interface_present "Ensure a network interface exists."
azurearm_network.network_interface_present:
  - name: ${1}
  - ip_configurations: ${2}
  - subnet: ${3}
  - virtual_network: ${4}
  - resource_group: ${5}
  - tags: ${6:None}
  - virtual_machine: ${7:None}
  - network_security_group: ${8:None}
  - dns_settings: ${9:None}
  - mac_address: ${10:None}
  - primary: ${11:None}
  - enable_accelerated_networking: ${12:None}
  - enable_ip_forwarding: ${13:None}
  - connection_auth: ${14:None}
endsnippet

snippet azurearm_network.network_interface_absent "Ensure a network interface does not exist in the resource group."
azurearm_network.network_interface_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_network.route_table_present "Ensure a route table exists."
azurearm_network.route_table_present:
  - name: ${1}
  - resource_group: ${2}
  - tags: ${3:None}
  - routes: ${4:None}
  - disable_bgp_route_propagation: ${5:None}
  - connection_auth: ${6:None}
endsnippet

snippet azurearm_network.route_table_absent "Ensure a route table does not exist in the resource group."
azurearm_network.route_table_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet azurearm_network.route_present "Ensure a route exists within a route table."
azurearm_network.route_present:
  - name: ${1}
  - address_prefix: ${2}
  - next_hop_type: ${3}
  - route_table: ${4}
  - resource_group: ${5}
  - next_hop_ip_address: ${6:None}
  - connection_auth: ${7:None}
endsnippet

snippet azurearm_network.route_absent "Ensure a route table does not exist in the resource group."
azurearm_network.route_absent:
  - name: ${1}
  - route_table: ${2}
  - resource_group: ${3}
  - connection_auth: ${4:None}
endsnippet

snippet neutron_subnet.present "Ensure a subnet exists and is up-to-date"
neutron_subnet.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet neutron_subnet.absent "Ensure a subnet does not exists"
neutron_subnet.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet makeconf.present "Verify that the variable is in the ``make.conf`` and has the provided"
makeconf.present:
  - name: ${1}
  - value: ${2:None}
  - contains: ${3:None}
  - excludes: ${4:None}
endsnippet

snippet makeconf.absent "Verify that the variable is not in the ``make.conf``."
makeconf.absent:
  - name: ${1}
endsnippet

snippet win_certutil.add_store "Store a certificate to the given store"
win_certutil.add_store:
  - name: ${1}
  - store: ${2}
  - saltenv: ${3:"base"}
endsnippet

snippet win_certutil.del_store "Remove a certificate in the given store"
win_certutil.del_store:
  - name: ${1}
  - store: ${2}
  - saltenv: ${3:"base"}
endsnippet

snippet ldap.managed "Ensure the existence (or not) of LDAP entries and their attributes"
ldap.managed:
  - name: ${1}
  - entries: ${2}
  - connect_spec: ${3:None}
endsnippet

snippet user.present "Ensure that the named user is present with the specified properties"
user.present:
  - name: ${1}
  - uid: ${2:None}
  - gid: ${3:None}
  - usergroup: ${4:None}
  - groups: ${5:None}
  - optional_groups: ${6:None}
  - remove_groups: ${7:True}
  - home: ${8:None}
  - createhome: ${9:True}
  - password: ${10:None}
  - hash_password: ${11:False}
  - enforce_password: ${12:True}
  - empty_password: ${13:False}
  - shell: ${14:None}
  - unique: ${15:True}
  - system: ${16:False}
  - fullname: ${17:None}
  - roomnumber: ${18:None}
  - workphone: ${19:None}
  - homephone: ${20:None}
  - other: ${21:None}
  - loginclass: ${22:None}
  - date: ${23:None}
  - mindays: ${24:None}
  - maxdays: ${25:None}
  - inactdays: ${26:None}
  - warndays: ${27:None}
  - expire: ${28:None}
  - win_homedrive: ${29:None}
  - win_profile: ${30:None}
  - win_logonscript: ${31:None}
  - win_description: ${32:None}
  - nologinit: ${33:False}
  - allow_uid_change: ${34:False}
  - allow_gid_change: ${35:False}
endsnippet

snippet user.absent "Ensure that the named user is absent"
user.absent:
  - name: ${1}
  - purge: ${2:False}
  - force: ${3:False}
endsnippet

snippet environ.setenv "Set the salt process environment variables."
environ.setenv:
  - name: ${1}
  - value: ${2}
  - false_unsets: ${3:False}
  - clear_all: ${4:False}
  - update_minion: ${5:False}
  - permanent: ${6:False}
endsnippet

snippet environ.key_exists ""
environ.key_exists:
endsnippet

snippet grafana4_dashboard.present "Ensure the grafana dashboard exists and is managed."
grafana4_dashboard.present:
  - name: ${1}
  - base_dashboards_from_pillar: ${2:None}
  - base_panels_from_pillar: ${3:None}
  - base_rows_from_pillar: ${4:None}
  - dashboard: ${5:None}
  - orgname: ${6:None}
  - profile: ${7:"grafana"}
endsnippet

snippet grafana4_dashboard.absent "Ensure the named grafana dashboard is absent."
grafana4_dashboard.absent:
  - name: ${1}
  - orgname: ${2:None}
  - profile: ${3:"grafana"}
endsnippet

snippet composer.installed "Verify that the correct versions of composer dependencies are present."
composer.installed:
  - name: ${1}
  - composer: ${2:None}
  - php: ${3:None}
  - user: ${4:None}
  - prefer_source: ${5:None}
  - prefer_dist: ${6:None}
  - no_scripts: ${7:None}
  - no_plugins: ${8:None}
  - optimize: ${9:None}
  - no_dev: ${10:None}
  - quiet: ${11:False}
  - composer_home: ${12:"/root"}
  - always_check: ${13:True}
  - env: ${14:None}
endsnippet

snippet composer.update "Composer update the directory to ensure we have the latest versions"
composer.update:
  - name: ${1}
  - composer: ${2:None}
  - php: ${3:None}
  - user: ${4:None}
  - prefer_source: ${5:None}
  - prefer_dist: ${6:None}
  - no_scripts: ${7:None}
  - no_plugins: ${8:None}
  - optimize: ${9:None}
  - no_dev: ${10:None}
  - quiet: ${11:False}
  - composer_home: ${12:"/root"}
  - env: ${13:None}
endsnippet

snippet blockdev.tuned "Manage options of block device"
blockdev.tuned:
  - name: ${1}
endsnippet

snippet blockdev.formatted "Manage filesystems of partitions."
blockdev.formatted:
  - name: ${1}
  - fs_type: ${2:"ext4"}
  - force: ${3:False}
endsnippet

snippet azurearm_compute.availability_set_present "Ensure an availability set exists."
azurearm_compute.availability_set_present:
  - name: ${1}
  - resource_group: ${2}
  - tags: ${3:None}
  - platform_update_domain_count: ${4:None}
  - platform_fault_domain_count: ${5:None}
  - virtual_machines: ${6:None}
  - sku: ${7:None}
  - connection_auth: ${8:None}
endsnippet

snippet azurearm_compute.availability_set_absent "Ensure an availability set does not exist in a resource group."
azurearm_compute.availability_set_absent:
  - name: ${1}
  - resource_group: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet dvs.mod_init "Init function"
dvs.mod_init:
  - low: ${1}
endsnippet

snippet dvs.dvs_configured "Configures a DVS."
dvs.dvs_configured:
  - name: ${1}
  - dvs: ${2}
endsnippet

snippet dvs.portgroups_configured "Configures portgroups on a DVS."
dvs.portgroups_configured:
  - name: ${1}
  - dvs: ${2}
  - portgroups: ${3}
endsnippet

snippet dvs.uplink_portgroup_configured "Configures the uplink portgroup on a DVS. The state assumes there is only"
dvs.uplink_portgroup_configured:
  - name: ${1}
  - dvs: ${2}
  - uplink_portgroup: ${3}
endsnippet

snippet win_firewall.disabled "Disable all the firewall profiles (Windows only)"
win_firewall.disabled:
  - name: ${1:"allprofiles"}
endsnippet

snippet win_firewall.add_rule "Add a new inbound or outbound rule to the firewall policy"
win_firewall.add_rule:
  - name: ${1}
  - localport: ${2}
  - protocol: ${3:"tcp"}
  - action: ${4:"allow"}
  - dir: ${5:"in"}
  - remoteip: ${6:"any"}
endsnippet

snippet win_firewall.delete_rule "Delete an existing firewall rule identified by name and optionally by ports,"
win_firewall.delete_rule:
  - name: ${1}
  - localport: ${2:None}
  - protocol: ${3:None}
  - dir: ${4:None}
  - remoteip: ${5:None}
endsnippet

snippet win_firewall.enabled "Enable all the firewall profiles (Windows only)"
win_firewall.enabled:
  - name: ${1:"allprofiles"}
endsnippet

snippet winrepo.genrepo "Refresh the winrepo.p file of the repository (salt-run winrepo.genrepo)"
winrepo.genrepo:
  - name: ${1}
  - force: ${2:False}
  - allow_empty: ${3:False}
endsnippet

snippet lvm.pv_present "Set a Physical Device to be used as an LVM Physical Volume"
lvm.pv_present:
  - name: ${1}
endsnippet

snippet lvm.pv_absent "Ensure that a Physical Device is not being used by lvm"
lvm.pv_absent:
  - name: ${1}
endsnippet

snippet lvm.vg_present "Create an LVM Volume Group"
lvm.vg_present:
  - name: ${1}
  - devices: ${2:None}
endsnippet

snippet lvm.vg_absent "Remove an LVM volume group"
lvm.vg_absent:
  - name: ${1}
endsnippet

snippet lvm.lv_present "Create a new Logical Volume"
lvm.lv_present:
  - name: ${1}
  - vgname: ${2:None}
  - size: ${3:None}
  - extents: ${4:None}
  - snapshot: ${5:None}
  - pv: ${6:""}
  - thinvolume: ${7:False}
  - thinpool: ${8:False}
  - force: ${9:False}
endsnippet

snippet lvm.lv_absent "Remove a given existing Logical Volume from a named existing volume group"
lvm.lv_absent:
  - name: ${1}
  - vgname: ${2:None}
endsnippet

snippet win_path.absent "Remove the directory from the SYSTEM path"
win_path.absent:
  - name: ${1}
endsnippet

snippet win_path.exists "Add the directory to the system PATH at index location"
win_path.exists:
  - name: ${1}
  - index: ${2:None}
endsnippet

snippet saltmod.state "Invoke a state run on a given target"
saltmod.state:
  - name: ${1}
  - tgt: ${2}
  - ssh: ${3:False}
  - tgt_type: ${4:"glob"}
  - ret: ${5:""}
  - ret_config: ${6:None}
  - ret_kwargs: ${7:None}
  - highstate: ${8:None}
  - sls: ${9:None}
  - top: ${10:None}
  - saltenv: ${11:None}
  - test: ${12:None}
  - pillar: ${13:None}
  - pillarenv: ${14:None}
  - expect_minions: ${15:True}
  - fail_minions: ${16:None}
  - allow_fail: ${17:0}
  - exclude: ${18:None}
  - concurrent: ${19:False}
  - timeout: ${20:None}
  - batch: ${21:None}
  - queue: ${22:False}
  - subset: ${23:None}
  - orchestration_jid: ${24:None}
endsnippet

snippet saltmod.function "Execute a single module function on a remote minion via salt or salt-ssh"
saltmod.function:
  - name: ${1}
  - tgt: ${2}
  - ssh: ${3:False}
  - tgt_type: ${4:"glob"}
  - ret: ${5:""}
  - ret_config: ${6:None}
  - ret_kwargs: ${7:None}
  - expect_minions: ${8:False}
  - fail_minions: ${9:None}
  - fail_function: ${10:None}
  - arg: ${11:None}
  - kwarg: ${12:None}
  - timeout: ${13:None}
  - batch: ${14:None}
  - subset: ${15:None}
endsnippet

snippet saltmod.wait_for_event "Watch Salt's event bus and block until a condition is met"
saltmod.wait_for_event:
  - name: ${1}
  - id_list: ${2}
  - event_id: ${3:"id"}
  - timeout: ${4:300}
  - node: ${5:"master"}
endsnippet

snippet saltmod.runner "Execute a runner module on the master"
saltmod.runner:
  - name: ${1}
endsnippet

snippet saltmod.parallel_runners "Executes multiple runner modules on the master in parallel."
saltmod.parallel_runners:
  - name: ${1}
  - runners: ${2}
endsnippet

snippet saltmod.wheel "Execute a wheel module on the master"
saltmod.wheel:
  - name: ${1}
endsnippet

snippet saltmod.create_thread ""
saltmod.create_thread:
  - index: ${1}
endsnippet

snippet saltmod.call_runner ""
saltmod.call_runner:
  - runner_config: ${1}
endsnippet

snippet saltmod.extract_changes ""
saltmod.extract_changes:
  - obj: ${1}
endsnippet

snippet saltmod.run_thread ""
saltmod.run_thread:
endsnippet

snippet pkgbuild.built "Ensure that the named package is built and exists in the named directory"
pkgbuild.built:
  - name: ${1}
  - runas: ${2}
  - dest_dir: ${3}
  - spec: ${4}
  - sources: ${5}
  - tgt: ${6}
  - template: ${7:None}
  - deps: ${8:None}
  - env: ${9:None}
  - results: ${10:None}
  - force: ${11:False}
  - saltenv: ${12:"base"}
  - log_dir: ${13:"/var/log/salt/pkgbuild"}
endsnippet

snippet pkgbuild.repo "Make a package repository and optionally sign it and packages present"
pkgbuild.repo:
  - name: ${1}
  - keyid: ${2:None}
  - env: ${3:None}
  - use_passphrase: ${4:False}
  - gnupghome: ${5:"/etc/salt/gpgkeys"}
  - runas: ${6:"builder"}
  - timeout: ${7:15.0}
endsnippet

snippet keystone_service.present "Ensure an service exists and is up-to-date"
keystone_service.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_service.absent "Ensure service does not exist"
keystone_service.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet process.absent "Ensures that the named command is not running."
process.absent:
  - name: ${1}
  - user: ${2:None}
  - signal: ${3:None}
endsnippet

snippet nftables.chain_present "Verify the chain is exist."
nftables.chain_present:
  - name: ${1}
  - table: ${2:"filter"}
  - table_type: ${3:None}
  - hook: ${4:None}
  - priority: ${5:None}
  - family: ${6:"ipv4"}
endsnippet

snippet nftables.chain_absent "Verify the chain is absent."
nftables.chain_absent:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet nftables.append "Append a rule to a chain"
nftables.append:
  - name: ${1}
  - family: ${2:"ipv4"}
endsnippet

snippet nftables.insert "Insert a rule into a chain"
nftables.insert:
  - name: ${1}
  - family: ${2:"ipv4"}
endsnippet

snippet nftables.delete "Delete a rule to a chain"
nftables.delete:
  - name: ${1}
  - family: ${2:"ipv4"}
endsnippet

snippet nftables.flush "Flush current nftables state"
nftables.flush:
  - name: ${1}
  - family: ${2:"ipv4"}
endsnippet

snippet zookeeper.present "Make sure znode is present in the correct state with the correct acls"
zookeeper.present:
  - name: ${1}
  - value: ${2}
  - acls: ${3:None}
  - ephemeral: ${4:False}
  - sequence: ${5:False}
  - makepath: ${6:False}
  - version: ${7:UNARY: (- 1)
}
  - profile: ${8:None}
  - hosts: ${9:None}
  - scheme: ${10:None}
  - username: ${11:None}
  - password: ${12:None}
  - default_acl: ${13:None}
endsnippet

snippet zookeeper.absent "Make sure znode is absent"
zookeeper.absent:
  - name: ${1}
  - version: ${2:UNARY: (- 1)
}
  - recursive: ${3:False}
  - profile: ${4:None}
  - hosts: ${5:None}
  - scheme: ${6:None}
  - username: ${7:None}
  - password: ${8:None}
  - default_acl: ${9:None}
endsnippet

snippet zookeeper.acls "Update acls on a znode"
zookeeper.acls:
  - name: ${1}
  - acls: ${2}
  - version: ${3:UNARY: (- 1)
}
  - profile: ${4:None}
  - hosts: ${5:None}
  - scheme: ${6:None}
  - username: ${7:None}
  - password: ${8:None}
  - default_acl: ${9:None}
endsnippet

snippet libcloud_storage.state_result ""
libcloud_storage.state_result:
  - result: ${1}
  - message: ${2}
  - name: ${3}
  - changes: ${4}
endsnippet

snippet libcloud_storage.container_present "Ensures a container is present."
libcloud_storage.container_present:
  - name: ${1}
  - profile: ${2}
endsnippet

snippet libcloud_storage.container_absent "Ensures a container is absent."
libcloud_storage.container_absent:
  - name: ${1}
  - profile: ${2}
endsnippet

snippet libcloud_storage.object_present "Ensures a object is presnt."
libcloud_storage.object_present:
  - container: ${1}
  - name: ${2}
  - path: ${3}
  - profile: ${4}
endsnippet

snippet libcloud_storage.object_absent "Ensures a object is absent."
libcloud_storage.object_absent:
  - container: ${1}
  - name: ${2}
  - profile: ${3}
endsnippet

snippet libcloud_storage.file_present "Ensures a object is downloaded locally."
libcloud_storage.file_present:
  - container: ${1}
  - name: ${2}
  - path: ${3}
  - profile: ${4}
  - overwrite_existing: ${5:False}
endsnippet

snippet status.loadavg "Return the current load average for the specified minion. Available values"
status.loadavg:
  - name: ${1}
  - maximum: ${2:None}
  - minimum: ${3:None}
endsnippet

snippet status.process "Return whether the specified signature is found in the process tree. This"
status.process:
  - name: ${1}
endsnippet

snippet http.query "Perform an HTTP query and statefully return the result"
http.query:
  - name: ${1}
  - match: ${2:None}
  - match_type: ${3:"string"}
  - status: ${4:None}
  - status_type: ${5:"string"}
  - wait_for: ${6:None}
endsnippet

snippet http.wait_for_successful_query "Like query but, repeat and wait until match/match_type or status is fulfilled. State returns result from last"
http.wait_for_successful_query:
  - name: ${1}
  - wait_for: ${2:300}
endsnippet

snippet probes.managed "Ensure the networks device is configured as specified in the state SLS file."
probes.managed:
  - name: ${1}
  - probes: ${2}
  - defaults: ${3:None}
endsnippet

snippet timezone.system "Set the timezone for the system."
timezone.system:
  - name: ${1}
  - utc: ${2:True}
endsnippet

snippet apache_conf.enabled "Ensure an Apache conf is enabled."
apache_conf.enabled:
  - name: ${1}
endsnippet

snippet apache_conf.disabled "Ensure an Apache conf is disabled."
apache_conf.disabled:
  - name: ${1}
endsnippet

snippet influxdb_database.present "Ensure that given database is present."
influxdb_database.present:
  - name: ${1}
endsnippet

snippet influxdb_database.absent "Ensure that given database is absent."
influxdb_database.absent:
  - name: ${1}
endsnippet

snippet panos.add_config_lock "Prevent other users from changing configuration until the lock is released."
panos.add_config_lock:
  - name: ${1}
endsnippet

snippet panos.address_exists "Ensures that an address object exists in the configured state. If it does not exist or is not configured with the"
panos.address_exists:
  - name: ${1}
  - addressname: ${2:None}
  - vsys: ${3:1}
  - ipnetmask: ${4:None}
  - iprange: ${5:None}
  - fqdn: ${6:None}
  - description: ${7:None}
  - commit: ${8:False}
endsnippet

snippet panos.address_group_exists "Ensures that an address group object exists in the configured state. If it does not exist or is not configured with"
panos.address_group_exists:
  - name: ${1}
  - groupname: ${2:None}
  - vsys: ${3:1}
  - members: ${4:None}
  - description: ${5:None}
  - commit: ${6:False}
endsnippet

snippet panos.clone_config "Clone a specific XPATH and set it to a new name."
panos.clone_config:
  - name: ${1}
  - xpath: ${2:None}
  - newname: ${3:None}
  - commit: ${4:False}
endsnippet

snippet panos.commit_config "Commits the candidate configuration to the running configuration."
panos.commit_config:
  - name: ${1}
endsnippet

snippet panos.delete_config "Deletes a Palo Alto XPATH to a specific value."
panos.delete_config:
  - name: ${1}
  - xpath: ${2:None}
  - commit: ${3:False}
endsnippet

snippet panos.download_software "Ensures that a software version is downloaded."
panos.download_software:
  - name: ${1}
  - version: ${2:None}
  - synch: ${3:False}
  - check: ${4:False}
endsnippet

snippet panos.edit_config "Edits a Palo Alto XPATH to a specific value. This will always overwrite the existing value, even if it is not"
panos.edit_config:
  - name: ${1}
  - xpath: ${2:None}
  - value: ${3:None}
  - commit: ${4:False}
endsnippet

snippet panos.move_config "Moves a XPATH value to a new location."
panos.move_config:
  - name: ${1}
  - xpath: ${2:None}
  - where: ${3:None}
  - dst: ${4:None}
  - commit: ${5:False}
endsnippet

snippet panos.remove_config_lock "Release config lock previously held."
panos.remove_config_lock:
  - name: ${1}
endsnippet

snippet panos.rename_config "Rename a Palo Alto XPATH to a specific value. This will always rename the value even if a change is not needed."
panos.rename_config:
  - name: ${1}
  - xpath: ${2:None}
  - newname: ${3:None}
  - commit: ${4:False}
endsnippet

snippet panos.security_rule_exists "Ensures that a security rule exists on the device. Also, ensure that all configurations are set appropriately."
panos.security_rule_exists:
  - name: ${1}
  - rulename: ${2:None}
  - vsys: ${3:"1"}
  - action: ${4:None}
  - disabled: ${5:None}
  - sourcezone: ${6:None}
  - destinationzone: ${7:None}
  - source: ${8:None}
  - destination: ${9:None}
  - application: ${10:None}
  - service: ${11:None}
  - description: ${12:None}
  - logsetting: ${13:None}
  - logstart: ${14:None}
  - logend: ${15:None}
  - negatesource: ${16:None}
  - negatedestination: ${17:None}
  - profilegroup: ${18:None}
  - datafilter: ${19:None}
  - fileblock: ${20:None}
  - spyware: ${21:None}
  - urlfilter: ${22:None}
  - virus: ${23:None}
  - vulnerability: ${24:None}
  - wildfire: ${25:None}
  - move: ${26:None}
  - movetarget: ${27:None}
  - commit: ${28:False}
endsnippet

snippet panos.service_exists "Ensures that a service object exists in the configured state. If it does not exist or is not configured with the"
panos.service_exists:
  - name: ${1}
  - servicename: ${2:None}
  - vsys: ${3:1}
  - protocol: ${4:None}
  - port: ${5:None}
  - description: ${6:None}
  - commit: ${7:False}
endsnippet

snippet panos.service_group_exists "Ensures that a service group object exists in the configured state. If it does not exist or is not configured with"
panos.service_group_exists:
  - name: ${1}
  - groupname: ${2:None}
  - vsys: ${3:1}
  - members: ${4:None}
  - description: ${5:None}
  - commit: ${6:False}
endsnippet

snippet panos.set_config "Sets a Palo Alto XPATH to a specific value. This will always overwrite the existing value, even if it is not"
panos.set_config:
  - name: ${1}
  - xpath: ${2:None}
  - value: ${3:None}
  - commit: ${4:False}
endsnippet

snippet bower.installed "Verify that the given package is installed and is at the correct version"
bower.installed:
  - name: ${1}
  - dir: ${2}
  - pkgs: ${3:None}
  - user: ${4:None}
  - env: ${5:None}
endsnippet

snippet bower.removed "Verify that the given package is not installed."
bower.removed:
  - name: ${1}
  - dir: ${2}
  - user: ${3:None}
endsnippet

snippet bower.bootstrap "Bootstraps a frontend distribution."
bower.bootstrap:
  - name: ${1}
  - user: ${2:None}
endsnippet

snippet bower.pruned "Cleans up local bower_components directory."
bower.pruned:
  - name: ${1}
  - user: ${2:None}
  - env: ${3:None}
endsnippet

snippet boto3_sns.topic_present "Ensure the SNS topic exists."
boto3_sns.topic_present:
  - name: ${1}
  - subscriptions: ${2:None}
  - attributes: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto3_sns.topic_absent "Ensure the named sns topic is deleted."
boto3_sns.topic_absent:
  - name: ${1}
  - unsubscribe: ${2:False}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet augeas.change "This state replaces :py:func:`~salt.states.augeas.setvalue`."
augeas.change:
  - name: ${1}
  - context: ${2:None}
  - changes: ${3:None}
  - lens: ${4:None}
  - load_path: ${5:None}
endsnippet

snippet ceph.quorum "Quorum state"
ceph.quorum:
  - name: ${1}
endsnippet

snippet mssql_login.present "Checks existance of the named login."
mssql_login.present:
  - name: ${1}
  - password: ${2:None}
  - domain: ${3:None}
  - server_roles: ${4:None}
  - options: ${5:None}
endsnippet

snippet mssql_login.absent "Ensure that the named login is absent"
mssql_login.absent:
  - name: ${1}
endsnippet

snippet chef.client "name"
chef.client:
  - name: ${1}
endsnippet

snippet chef.solo "name"
chef.solo:
  - name: ${1}
endsnippet

snippet kmod.present "Ensure that the specified kernel module is loaded"
kmod.present:
  - name: ${1}
  - persist: ${2:False}
  - mods: ${3:None}
endsnippet

snippet kmod.absent "Verify that the named kernel module is not loaded"
kmod.absent:
  - name: ${1}
  - persist: ${2:False}
  - comment: ${3:True}
  - mods: ${4:None}
endsnippet

snippet cimc.hostname "Ensures that the hostname is set to the specified value."
cimc.hostname:
  - name: ${1}
  - hostname: ${2:None}
endsnippet

snippet cimc.logging_levels "Ensures that the logging levels are set on the device. The logging levels"
cimc.logging_levels:
  - name: ${1}
  - remote: ${2:None}
  - local: ${3:None}
endsnippet

snippet cimc.ntp "Ensures that the NTP servers are configured. Servers are provided as an individual string or list format. Only four"
cimc.ntp:
  - name: ${1}
  - servers: ${2}
endsnippet

snippet cimc.power_configuration "Ensures that the power configuration is configured on the system. This is"
cimc.power_configuration:
  - name: ${1}
  - policy: ${2:None}
  - delayType: ${3:None}
  - delayValue: ${4:None}
endsnippet

snippet cimc.syslog "Ensures that the syslog servers are set to the specified values. A value of None will be ignored."
cimc.syslog:
  - name: ${1}
  - primary: ${2:None}
  - secondary: ${3:None}
endsnippet

snippet cimc.user "Ensures that a user is configured on the device. Due to being unable to"
cimc.user:
  - name: ${1}
  - id: ${2:""}
  - user: ${3:""}
  - priv: ${4:""}
  - password: ${5:""}
  - status: ${6:"active"}
endsnippet

snippet msteams.post_card "Send a message to a Microsft Teams channel"
msteams.post_card:
  - name: ${1}
  - message: ${2}
  - hook_url: ${3:None}
  - title: ${4:None}
  - theme_color: ${5:None}
endsnippet

snippet rbenv.installed "Verify that the specified ruby is installed with rbenv. Rbenv is"
rbenv.installed:
  - name: ${1}
  - default: ${2:False}
  - user: ${3:None}
endsnippet

snippet rbenv.absent "Verify that the specified ruby is not installed with rbenv. Rbenv"
rbenv.absent:
  - name: ${1}
  - user: ${2:None}
endsnippet

snippet rbenv.install_rbenv "Install rbenv if not installed. Allows you to require rbenv be installed"
rbenv.install_rbenv:
  - name: ${1}
  - user: ${2:None}
endsnippet

snippet syslog_ng.config "Builds syslog-ng configuration."
syslog_ng.config:
  - name: ${1}
  - config: ${2}
  - write: ${3:True}
endsnippet

snippet syslog_ng.stopped "Kills syslog-ng."
syslog_ng.stopped:
  - name: ${1:None}
endsnippet

snippet syslog_ng.started "Ensures, that syslog-ng is started via the given parameters."
syslog_ng.started:
  - name: ${1:None}
  - user: ${2:None}
  - group: ${3:None}
  - chroot: ${4:None}
  - caps: ${5:None}
  - no_caps: ${6:False}
  - pidfile: ${7:None}
  - enable_core: ${8:False}
  - fd_limit: ${9:None}
  - verbose: ${10:False}
  - debug: ${11:False}
  - trace: ${12:False}
  - yydebug: ${13:False}
  - persist_file: ${14:None}
  - control: ${15:None}
  - worker_threads: ${16:None}
endsnippet

snippet syslog_ng.reloaded "Reloads syslog-ng."
syslog_ng.reloaded:
  - name: ${1}
endsnippet

snippet win_system.computer_desc "Manage the computer's description field"
win_system.computer_desc:
  - name: ${1}
endsnippet

snippet win_system.computer_name "Manage the computer's name"
win_system.computer_name:
  - name: ${1}
endsnippet

snippet win_system.hostname "Manage the hostname of the computer"
win_system.hostname:
  - name: ${1}
endsnippet

snippet win_system.join_domain "Checks if a computer is joined to the Domain. If the computer is not in the"
win_system.join_domain:
  - name: ${1}
  - username: ${2:None}
  - password: ${3:None}
  - account_ou: ${4:None}
  - account_exists: ${5:False}
  - restart: ${6:False}
endsnippet

snippet win_system.reboot "Reboot the computer"
win_system.reboot:
  - name: ${1}
  - message: ${2:None}
  - timeout: ${3:5}
  - force_close: ${4:True}
  - in_seconds: ${5:False}
  - only_on_pending_reboot: ${6:True}
endsnippet

snippet win_system.shutdown "Shutdown the computer"
win_system.shutdown:
  - name: ${1}
  - message: ${2:None}
  - timeout: ${3:5}
  - force_close: ${4:True}
  - reboot: ${5:False}
  - in_seconds: ${6:False}
  - only_on_pending_reboot: ${7:False}
endsnippet

snippet rvm.installed "Verify that the specified ruby is installed with RVM. RVM is"
rvm.installed:
  - name: ${1}
  - default: ${2:False}
  - user: ${3:None}
  - opts: ${4:None}
  - env: ${5:None}
endsnippet

snippet rvm.gemset_present "Verify that the gemset is present."
rvm.gemset_present:
  - name: ${1}
  - ruby: ${2:"default"}
  - user: ${3:None}
endsnippet

snippet file.symlink "Create a symbolic link (symlink, soft link)"
file.symlink:
  - name: ${1}
  - target: ${2}
  - force: ${3:False}
  - backupname: ${4:None}
  - makedirs: ${5:False}
  - user: ${6:None}
  - group: ${7:None}
  - mode: ${8:None}
  - win_owner: ${9:None}
  - win_perms: ${10:None}
  - win_deny_perms: ${11:None}
  - win_inheritance: ${12:None}
endsnippet

snippet file.absent "Make sure that the named file or directory is absent. If it exists, it will"
file.absent:
  - name: ${1}
endsnippet

snippet file.tidied "Remove unwanted files based on specific criteria. Multiple criteria"
file.tidied:
  - name: ${1}
  - age: ${2:0}
  - matches: ${3:None}
  - rmdirs: ${4:False}
  - size: ${5:0}
endsnippet

snippet file.exists "Verify that the named file or directory is present or exists."
file.exists:
  - name: ${1}
endsnippet

snippet file.missing "Verify that the named file or directory is missing, this returns True only"
file.missing:
  - name: ${1}
endsnippet

snippet file.managed "Manage a given file, this function allows for a file to be downloaded from"
file.managed:
  - name: ${1}
  - source: ${2:None}
  - source_hash: ${3:""}
  - source_hash_name: ${4:None}
  - keep_source: ${5:True}
  - user: ${6:None}
  - group: ${7:None}
  - mode: ${8:None}
  - attrs: ${9:None}
  - template: ${10:None}
  - makedirs: ${11:False}
  - dir_mode: ${12:None}
  - context: ${13:None}
  - replace: ${14:True}
  - defaults: ${15:None}
  - backup: ${16:""}
  - show_changes: ${17:True}
  - create: ${18:True}
  - contents: ${19:None}
  - tmp_dir: ${20:""}
  - tmp_ext: ${21:""}
  - contents_pillar: ${22:None}
  - contents_grains: ${23:None}
  - contents_newline: ${24:True}
  - contents_delimiter: ${25:":"}
  - encoding: ${26:None}
  - encoding_errors: ${27:"strict"}
  - allow_empty: ${28:True}
  - follow_symlinks: ${29:True}
  - check_cmd: ${30:None}
  - skip_verify: ${31:False}
  - selinux: ${32:None}
  - win_owner: ${33:None}
  - win_perms: ${34:None}
  - win_deny_perms: ${35:None}
  - win_inheritance: ${36:True}
  - win_perms_reset: ${37:False}
endsnippet

snippet file.directory "Ensure that a named directory is present and has the right perms"
file.directory:
  - name: ${1}
  - user: ${2:None}
  - group: ${3:None}
  - recurse: ${4:None}
  - max_depth: ${5:None}
  - dir_mode: ${6:None}
  - file_mode: ${7:None}
  - makedirs: ${8:False}
  - clean: ${9:False}
  - require: ${10:None}
  - exclude_pat: ${11:None}
  - follow_symlinks: ${12:False}
  - force: ${13:False}
  - backupname: ${14:None}
  - allow_symlink: ${15:True}
  - children_only: ${16:False}
  - win_owner: ${17:None}
  - win_perms: ${18:None}
  - win_deny_perms: ${19:None}
  - win_inheritance: ${20:True}
  - win_perms_reset: ${21:False}
endsnippet

snippet file.recurse "Recurse through a subdirectory on the master and copy said subdirectory"
file.recurse:
  - name: ${1}
  - source: ${2}
  - keep_source: ${3:True}
  - clean: ${4:False}
  - require: ${5:None}
  - user: ${6:None}
  - group: ${7:None}
  - dir_mode: ${8:None}
  - file_mode: ${9:None}
  - sym_mode: ${10:None}
  - template: ${11:None}
  - context: ${12:None}
  - replace: ${13:True}
  - defaults: ${14:None}
  - include_empty: ${15:False}
  - backup: ${16:""}
  - include_pat: ${17:None}
  - exclude_pat: ${18:None}
  - maxdepth: ${19:None}
  - keep_symlinks: ${20:False}
  - force_symlinks: ${21:False}
  - win_owner: ${22:None}
  - win_perms: ${23:None}
  - win_deny_perms: ${24:None}
  - win_inheritance: ${25:True}
endsnippet

snippet file.retention_schedule "Apply retention scheduling to backup storage directory."
file.retention_schedule:
  - name: ${1}
  - retain: ${2}
  - strptime_format: ${3:None}
  - timezone: ${4:None}
endsnippet

snippet file.line "Line-based editing of a file."
file.line:
  - name: ${1}
  - content: ${2:None}
  - match: ${3:None}
  - mode: ${4:None}
  - location: ${5:None}
  - before: ${6:None}
  - after: ${7:None}
  - show_changes: ${8:True}
  - backup: ${9:False}
  - quiet: ${10:False}
  - indent: ${11:True}
  - create: ${12:False}
  - user: ${13:None}
  - group: ${14:None}
  - file_mode: ${15:None}
endsnippet

snippet file.replace "Maintain an edit in a file."
file.replace:
  - name: ${1}
  - pattern: ${2}
  - repl: ${3}
  - count: ${4:0}
  - flags: ${5:8}
  - bufsize: ${6:1}
  - append_if_not_found: ${7:False}
  - prepend_if_not_found: ${8:False}
  - not_found_content: ${9:None}
  - backup: ${10:".bak"}
  - show_changes: ${11:True}
  - ignore_if_missing: ${12:False}
  - backslash_literal: ${13:False}
endsnippet

snippet file.keyvalue "Key/Value based editing of a file."
file.keyvalue:
  - name: ${1}
  - key: ${2:None}
  - value: ${3:None}
  - key_values: ${4:None}
  - separator: ${5:"="}
  - append_if_not_found: ${6:False}
  - prepend_if_not_found: ${7:False}
  - search_only: ${8:False}
  - show_changes: ${9:True}
  - ignore_if_missing: ${10:False}
  - count: ${11:1}
  - uncomment: ${12:None}
  - key_ignore_case: ${13:False}
  - value_ignore_case: ${14:False}
endsnippet

snippet file.blockreplace "Maintain an edit in a file in a zone delimited by two line markers"
file.blockreplace:
  - name: ${1}
  - marker_start: ${2:"#-- start managed zone --"}
  - marker_end: ${3:"#-- end managed zone --"}
  - source: ${4:None}
  - source_hash: ${5:None}
  - template: ${6:"jinja"}
  - sources: ${7:None}
  - source_hashes: ${8:None}
  - defaults: ${9:None}
  - context: ${10:None}
  - content: ${11:""}
  - append_if_not_found: ${12:False}
  - prepend_if_not_found: ${13:False}
  - backup: ${14:".bak"}
  - show_changes: ${15:True}
  - append_newline: ${16:None}
  - insert_before_match: ${17:None}
  - insert_after_match: ${18:None}
endsnippet

snippet file.comment "Comment out specified lines in a file."
file.comment:
  - name: ${1}
  - regex: ${2}
  - char: ${3:"#"}
  - backup: ${4:".bak"}
endsnippet

snippet file.uncomment "Uncomment specified commented lines in a file"
file.uncomment:
  - name: ${1}
  - regex: ${2}
  - char: ${3:"#"}
  - backup: ${4:".bak"}
endsnippet

snippet file.append "Ensure that some text appears at the end of a file."
file.append:
  - name: ${1}
  - text: ${2:None}
  - makedirs: ${3:False}
  - source: ${4:None}
  - source_hash: ${5:None}
  - template: ${6:"jinja"}
  - sources: ${7:None}
  - source_hashes: ${8:None}
  - defaults: ${9:None}
  - context: ${10:None}
  - ignore_whitespace: ${11:True}
endsnippet

snippet file.prepend "Ensure that some text appears at the beginning of a file"
file.prepend:
  - name: ${1}
  - text: ${2:None}
  - makedirs: ${3:False}
  - source: ${4:None}
  - source_hash: ${5:None}
  - template: ${6:"jinja"}
  - sources: ${7:None}
  - source_hashes: ${8:None}
  - defaults: ${9:None}
  - context: ${10:None}
  - header: ${11:None}
endsnippet

snippet file.patch "Ensure that a patch has been applied to the specified file or directory"
file.patch:
  - name: ${1}
  - source: ${2:None}
  - source_hash: ${3:None}
  - source_hash_name: ${4:None}
  - skip_verify: ${5:False}
  - template: ${6:None}
  - context: ${7:None}
  - defaults: ${8:None}
  - options: ${9:""}
  - reject_file: ${10:None}
  - strip: ${11:None}
  - saltenv: ${12:None}
endsnippet

snippet file.touch "Replicate the 'nix 'touch' command to create a new empty"
file.touch:
  - name: ${1}
  - atime: ${2:None}
  - mtime: ${3:None}
  - makedirs: ${4:False}
endsnippet

snippet file.copy_ "If the file defined by the ``source`` option exists on the minion, copy it"
file.copy_:
  - name: ${1}
  - source: ${2}
  - force: ${3:False}
  - makedirs: ${4:False}
  - preserve: ${5:False}
  - user: ${6:None}
  - group: ${7:None}
  - mode: ${8:None}
  - subdir: ${9:False}
endsnippet

snippet file.rename "If the source file exists on the system, rename it to the named file. The"
file.rename:
  - name: ${1}
  - source: ${2}
  - force: ${3:False}
  - makedirs: ${4:False}
endsnippet

snippet file.accumulated "Prepare accumulator which can be used in template in file.managed state."
file.accumulated:
  - name: ${1}
  - filename: ${2}
  - text: ${3}
endsnippet

snippet file.serialize "Serializes dataset and store it into managed file. Useful for sharing"
file.serialize:
  - name: ${1}
  - dataset: ${2:None}
  - dataset_pillar: ${3:None}
  - user: ${4:None}
  - group: ${5:None}
  - mode: ${6:None}
  - backup: ${7:""}
  - makedirs: ${8:False}
  - show_changes: ${9:True}
  - create: ${10:True}
  - merge_if_exists: ${11:False}
  - encoding: ${12:None}
  - encoding_errors: ${13:"strict"}
  - serializer_opts: ${14:None}
  - deserializer_opts: ${15:None}
endsnippet

snippet file.mknod "Create a special file similar to the 'nix mknod command. The supported"
file.mknod:
  - name: ${1}
  - ntype: ${2}
  - major: ${3:0}
  - minor: ${4:0}
  - user: ${5:None}
  - group: ${6:None}
  - mode: ${7:"0600"}
endsnippet

snippet file.mod_run_check_cmd "Execute the check_cmd logic."
file.mod_run_check_cmd:
  - cmd: ${1}
  - filename: ${2}
endsnippet

snippet file.decode "Decode an encoded file and write it to disk"
file.decode:
  - name: ${1}
  - encoded_data: ${2:None}
  - contents_pillar: ${3:None}
  - encoding_type: ${4:"base64"}
  - checksum: ${5:"md5"}
endsnippet

snippet file.shortcut "Create a Windows shortcut"
file.shortcut:
  - name: ${1}
  - target: ${2}
  - arguments: ${3:None}
  - working_dir: ${4:None}
  - description: ${5:None}
  - icon_location: ${6:None}
  - force: ${7:False}
  - backupname: ${8:None}
  - makedirs: ${9:False}
  - user: ${10:None}
endsnippet

snippet file.cached "Ensures that a file is saved to the minion's cache. This state is primarily"
file.cached:
  - name: ${1}
  - source_hash: ${2:""}
  - source_hash_name: ${3:None}
  - skip_verify: ${4:False}
  - saltenv: ${5:"base"}
endsnippet

snippet file.not_cached "Ensures that a file is not present in the minion's cache, deleting it"
file.not_cached:
  - name: ${1}
  - saltenv: ${2:"base"}
endsnippet

snippet file.full_path ""
file.full_path:
  - master_relpath: ${1}
endsnippet

snippet file.process_symlinks ""
file.process_symlinks:
  - filenames: ${1}
  - symlinks: ${2}
endsnippet

snippet file.add_comment ""
file.add_comment:
  - path: ${1}
  - comment: ${2}
endsnippet

snippet file.merge_ret ""
file.merge_ret:
  - path: ${1}
  - _ret: ${2}
endsnippet

snippet file.manage_file ""
file.manage_file:
  - path: ${1}
  - source: ${2}
  - replace: ${3}
endsnippet

snippet file.manage_directory ""
file.manage_directory:
  - path: ${1}
endsnippet

snippet file.get_file_time_from_strptime ""
file.get_file_time_from_strptime:
  - f: ${1}
endsnippet

snippet file.get_file_time_from_mtime ""
file.get_file_time_from_mtime:
  - f: ${1}
endsnippet

snippet file.dict_maker ""
file.dict_maker:
endsnippet

snippet file.get_first ""
file.get_first:
  - fwt: ${1}
endsnippet

snippet file.get_first_n_at_depth ""
file.get_first_n_at_depth:
  - fwt: ${1}
  - depth: ${2}
  - n: ${3}
endsnippet

snippet docker_network.present "    Support added for network configuration options other than ``driver``"
docker_network.present:
  - name: ${1}
  - skip_translate: ${2:None}
  - ignore_collisions: ${3:False}
  - validate_ip_addrs: ${4:True}
  - containers: ${5:None}
  - reconnect: ${6:True}
endsnippet

snippet docker_network.absent "Ensure that a network is absent."
docker_network.absent:
  - name: ${1}
endsnippet

snippet archive.extracted "    This state has been rewritten. Some arguments are new to this release"
archive.extracted:
  - name: ${1}
  - source: ${2}
  - source_hash: ${3:None}
  - source_hash_name: ${4:None}
  - source_hash_update: ${5:False}
  - skip_verify: ${6:False}
  - password: ${7:None}
  - options: ${8:None}
  - list_options: ${9:None}
  - force: ${10:False}
  - overwrite: ${11:False}
  - clean: ${12:False}
  - user: ${13:None}
  - group: ${14:None}
  - if_missing: ${15:None}
  - trim_output: ${16:False}
  - use_cmd_unzip: ${17:None}
  - extract_perms: ${18:True}
  - enforce_toplevel: ${19:True}
  - enforce_ownership_on: ${20:None}
  - archive_format: ${21:None}
endsnippet

snippet boto_kinesis.present "Ensure the kinesis stream is properly configured and scaled."
boto_kinesis.present:
  - name: ${1}
  - retention_hours: ${2:None}
  - enhanced_monitoring: ${3:None}
  - num_shards: ${4:None}
  - do_reshard: ${5:True}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_kinesis.absent "Delete the kinesis stream, if it exists."
boto_kinesis.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet elasticsearch_index_template.absent "Ensure that the named index template is absent."
elasticsearch_index_template.absent:
  - name: ${1}
endsnippet

snippet elasticsearch_index_template.present "    Marked ``definition`` as required."
elasticsearch_index_template.present:
  - name: ${1}
  - definition: ${2}
endsnippet

snippet boto_ec2.key_present "Ensure key pair is present."
boto_ec2.key_present:
  - name: ${1}
  - save_private: ${2:None}
  - upload_public: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_ec2.key_absent "Deletes a key pair"
boto_ec2.key_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_ec2.eni_present "Ensure the EC2 ENI exists."
boto_ec2.eni_present:
  - name: ${1}
  - subnet_id: ${2:None}
  - subnet_name: ${3:None}
  - private_ip_address: ${4:None}
  - description: ${5:None}
  - groups: ${6:None}
  - source_dest_check: ${7:True}
  - allocate_eip: ${8:None}
  - arecords: ${9:None}
  - region: ${10:None}
  - key: ${11:None}
  - keyid: ${12:None}
  - profile: ${13:None}
endsnippet

snippet boto_ec2.eni_absent "Ensure the EC2 ENI is absent."
boto_ec2.eni_absent:
  - name: ${1}
  - release_eip: ${2:False}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_ec2.snapshot_created "Create a snapshot from the given instance"
boto_ec2.snapshot_created:
  - name: ${1}
  - ami_name: ${2}
  - instance_name: ${3}
  - wait_until_available: ${4:True}
  - wait_timeout_seconds: ${5:300}
endsnippet

snippet boto_ec2.instance_present "Ensure an EC2 instance is running with the given attributes and state."
boto_ec2.instance_present:
  - name: ${1}
  - instance_name: ${2:None}
  - instance_id: ${3:None}
  - image_id: ${4:None}
  - image_name: ${5:None}
  - tags: ${6:None}
  - key_name: ${7:None}
  - security_groups: ${8:None}
  - user_data: ${9:None}
  - instance_type: ${10:None}
  - placement: ${11:None}
  - kernel_id: ${12:None}
  - ramdisk_id: ${13:None}
  - vpc_id: ${14:None}
  - vpc_name: ${15:None}
  - monitoring_enabled: ${16:None}
  - subnet_id: ${17:None}
  - subnet_name: ${18:None}
  - private_ip_address: ${19:None}
  - block_device_map: ${20:None}
  - disable_api_termination: ${21:None}
  - instance_initiated_shutdown_behavior: ${22:None}
  - placement_group: ${23:None}
  - client_token: ${24:None}
  - security_group_ids: ${25:None}
  - security_group_names: ${26:None}
  - additional_info: ${27:None}
  - tenancy: ${28:None}
  - instance_profile_arn: ${29:None}
  - instance_profile_name: ${30:None}
  - ebs_optimized: ${31:None}
  - network_interfaces: ${32:None}
  - network_interface_name: ${33:None}
  - network_interface_id: ${34:None}
  - attributes: ${35:None}
  - target_state: ${36:None}
  - public_ip: ${37:None}
  - allocation_id: ${38:None}
  - allocate_eip: ${39:False}
  - region: ${40:None}
  - key: ${41:None}
  - keyid: ${42:None}
  - profile: ${43:None}
endsnippet

snippet boto_ec2.instance_absent "Ensure an EC2 instance does not exist (is stopped and removed)."
boto_ec2.instance_absent:
  - name: ${1}
  - instance_name: ${2:None}
  - instance_id: ${3:None}
  - release_eip: ${4:False}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
  - filters: ${9:None}
endsnippet

snippet boto_ec2.volume_absent "Ensure the EC2 volume is detached and absent."
boto_ec2.volume_absent:
  - name: ${1}
  - volume_name: ${2:None}
  - volume_id: ${3:None}
  - instance_name: ${4:None}
  - instance_id: ${5:None}
  - device: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_ec2.volumes_tagged "Ensure EC2 volume(s) matching the given filters have the defined tags."
boto_ec2.volumes_tagged:
  - name: ${1}
  - tag_maps: ${2}
  - authoritative: ${3:False}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_ec2.volume_present "Ensure the EC2 volume is present and attached."
boto_ec2.volume_present:
  - name: ${1}
  - volume_name: ${2:None}
  - volume_id: ${3:None}
  - instance_name: ${4:None}
  - instance_id: ${5:None}
  - device: ${6:None}
  - size: ${7:None}
  - snapshot_id: ${8:None}
  - volume_type: ${9:None}
  - iops: ${10:None}
  - encrypted: ${11:False}
  - kms_key_id: ${12:None}
  - region: ${13:None}
  - key: ${14:None}
  - keyid: ${15:None}
  - profile: ${16:None}
endsnippet

snippet boto_ec2.private_ips_present "Ensure an ENI has secondary private ip addresses associated with it"
boto_ec2.private_ips_present:
  - name: ${1}
  - network_interface_name: ${2:None}
  - network_interface_id: ${3:None}
  - private_ip_addresses: ${4:None}
  - allow_reassignment: ${5:False}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_ec2.private_ips_absent "Ensure an ENI does not have secondary private ip addresses associated with it"
boto_ec2.private_ips_absent:
  - name: ${1}
  - network_interface_name: ${2:None}
  - network_interface_id: ${3:None}
  - private_ip_addresses: ${4:None}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet glusterfs.peered "Check if node is peered."
glusterfs.peered:
  - name: ${1}
endsnippet

snippet glusterfs.volume_present "Ensure that the volume exists"
glusterfs.volume_present:
  - name: ${1}
  - bricks: ${2}
  - stripe: ${3:False}
  - replica: ${4:False}
  - device_vg: ${5:False}
  - transport: ${6:"tcp"}
  - start: ${7:False}
  - force: ${8:False}
  - arbiter: ${9:False}
endsnippet

snippet glusterfs.started "Check if volume has been started"
glusterfs.started:
  - name: ${1}
endsnippet

snippet glusterfs.add_volume_bricks "Add brick(s) to an existing volume"
glusterfs.add_volume_bricks:
  - name: ${1}
  - bricks: ${2}
endsnippet

snippet glusterfs.op_version "Add brick(s) to an existing volume"
glusterfs.op_version:
  - name: ${1}
  - version: ${2}
endsnippet

snippet glusterfs.max_op_version "Add brick(s) to an existing volume"
glusterfs.max_op_version:
  - name: ${1}
endsnippet

snippet boto_elasticsearch_domain.present "Ensure domain exists."
boto_elasticsearch_domain.present:
  - name: ${1}
  - DomainName: ${2}
  - ElasticsearchClusterConfig: ${3:None}
  - EBSOptions: ${4:None}
  - AccessPolicies: ${5:None}
  - SnapshotOptions: ${6:None}
  - AdvancedOptions: ${7:None}
  - Tags: ${8:None}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
  - ElasticsearchVersion: ${13:"1.5"}
endsnippet

snippet boto_elasticsearch_domain.absent "Ensure domain with passed properties is absent."
boto_elasticsearch_domain.absent:
  - name: ${1}
  - DomainName: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet pushover.post_message "Send a message to a PushOver channel."
pushover.post_message:
  - name: ${1}
  - user: ${2:None}
  - device: ${3:None}
  - message: ${4:None}
  - title: ${5:None}
  - priority: ${6:None}
  - expire: ${7:None}
  - retry: ${8:None}
  - sound: ${9:None}
  - api_version: ${10:1}
  - token: ${11:None}
endsnippet

snippet pkg.installed "Ensure that the package is installed, and that it is the correct version"
pkg.installed:
  - name: ${1}
  - version: ${2:None}
  - refresh: ${3:None}
  - fromrepo: ${4:None}
  - skip_verify: ${5:False}
  - skip_suggestions: ${6:False}
  - pkgs: ${7:None}
  - sources: ${8:None}
  - allow_updates: ${9:False}
  - pkg_verify: ${10:False}
  - normalize: ${11:True}
  - ignore_epoch: ${12:False}
  - reinstall: ${13:False}
  - update_holds: ${14:False}
endsnippet

snippet pkg.downloaded "Ensure that the package is downloaded, and that it is the correct version"
pkg.downloaded:
  - name: ${1}
  - version: ${2:None}
  - pkgs: ${3:None}
  - fromrepo: ${4:None}
  - ignore_epoch: ${5:None}
endsnippet

snippet pkg.patch_installed "Ensure that packages related to certain advisory ids are installed."
pkg.patch_installed:
  - name: ${1}
  - advisory_ids: ${2:None}
  - downloadonly: ${3:None}
endsnippet

snippet pkg.patch_downloaded "Ensure that packages related to certain advisory ids are downloaded."
pkg.patch_downloaded:
  - name: ${1}
  - advisory_ids: ${2:None}
endsnippet

snippet pkg.latest " Ensure that the named package is installed and the latest available"
pkg.latest:
  - name: ${1}
  - refresh: ${2:None}
  - fromrepo: ${3:None}
  - skip_verify: ${4:False}
  - pkgs: ${5:None}
  - watch_flags: ${6:True}
endsnippet

snippet pkg.removed "Verify that a package is not installed, calling ``pkg.remove`` if necessary"
pkg.removed:
  - name: ${1}
  - version: ${2:None}
  - pkgs: ${3:None}
  - normalize: ${4:True}
  - ignore_epoch: ${5:False}
endsnippet

snippet pkg.purged "Verify that a package is not installed, calling ``pkg.purge`` if necessary"
pkg.purged:
  - name: ${1}
  - version: ${2:None}
  - pkgs: ${3:None}
  - normalize: ${4:True}
  - ignore_epoch: ${5:False}
endsnippet

snippet pkg.uptodate "    Added support for the ``pkgin`` provider."
pkg.uptodate:
  - name: ${1}
  - refresh: ${2:False}
  - pkgs: ${3:None}
endsnippet

snippet pkg.group_installed "    Added support in :mod:`pacman <salt.modules.pacman>`"
pkg.group_installed:
  - name: ${1}
  - skip: ${2:None}
  - include: ${3:None}
endsnippet

snippet pkg.mod_init "Set a flag to tell the install functions to refresh the package database."
pkg.mod_init:
  - low: ${1}
endsnippet

snippet pkg.mod_aggregate "The mod_aggregate function which looks up all packages in the available"
pkg.mod_aggregate:
  - low: ${1}
  - chunks: ${2}
  - running: ${3}
endsnippet

snippet pkg.mod_watch "Install/reinstall a package based on a watch requisite"
pkg.mod_watch:
  - name: ${1}
endsnippet

snippet keystone_endpoint.present "Ensure an endpoint exists and is up-to-date"
keystone_endpoint.present:
  - name: ${1}
  - service_name: ${2}
  - auth: ${3:None}
endsnippet

snippet keystone_endpoint.absent "Ensure an endpoint does not exists"
keystone_endpoint.absent:
  - name: ${1}
  - service_name: ${2}
  - auth: ${3:None}
endsnippet

snippet rabbitmq_policy.present "Ensure the RabbitMQ policy exists."
rabbitmq_policy.present:
  - name: ${1}
  - pattern: ${2}
  - definition: ${3}
  - priority: ${4:0}
  - vhost: ${5:"/"}
  - runas: ${6:None}
  - apply_to: ${7:None}
endsnippet

snippet rabbitmq_policy.absent "Ensure the named policy is absent"
rabbitmq_policy.absent:
  - name: ${1}
  - vhost: ${2:"/"}
  - runas: ${3:None}
endsnippet

snippet mysql_query.run_file "Execute an arbitrary query on the specified database"
mysql_query.run_file:
  - name: ${1}
  - database: ${2}
  - query_file: ${3:None}
  - output: ${4:None}
  - grain: ${5:None}
  - key: ${6:None}
  - overwrite: ${7:True}
  - saltenv: ${8:None}
  - check_db_exists: ${9:True}
endsnippet

snippet mysql_query.run "Execute an arbitrary query on the specified database"
mysql_query.run:
  - name: ${1}
  - database: ${2}
  - query: ${3}
  - output: ${4:None}
  - grain: ${5:None}
  - key: ${6:None}
  - overwrite: ${7:True}
  - check_db_exists: ${8:True}
endsnippet

snippet pkgng.update_packaging_site ""
pkgng.update_packaging_site:
  - name: ${1}
endsnippet

snippet win_network.managed "Ensure that the named interface is configured properly."
win_network.managed:
  - name: ${1}
  - dns_proto: ${2:None}
  - dns_servers: ${3:None}
  - ip_proto: ${4:None}
  - ip_addrs: ${5:None}
  - gateway: ${6:None}
  - enabled: ${7:True}
endsnippet

snippet win_lgpo.set_ "Ensure the specified policy is set"
win_lgpo.set_:
  - name: ${1}
  - setting: ${2:None}
  - policy_class: ${3:None}
  - computer_policy: ${4:None}
  - user_policy: ${5:None}
  - cumulative_rights_assignments: ${6:True}
  - adml_language: ${7:"en-US"}
endsnippet

snippet zabbix_valuemap.present "Creates Zabbix Value map object or if differs update it according defined parameters"
zabbix_valuemap.present:
  - name: ${1}
  - params: ${2}
endsnippet

snippet zabbix_valuemap.absent "Makes the Zabbix Value map to be absent (either does not exist or delete it)."
zabbix_valuemap.absent:
  - name: ${1}
endsnippet

snippet pagerduty_escalation_policy.present "Ensure that a pagerduty escalation policy exists.  Will create or update as needed."
pagerduty_escalation_policy.present:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet pagerduty_escalation_policy.absent "Ensure that a PagerDuty escalation policy does not exist."
pagerduty_escalation_policy.absent:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet monit.monitor "Get the summary from module monit and try to see if service is"
monit.monitor:
  - name: ${1}
endsnippet

snippet monit.unmonitor "Get the summary from module monit and try to see if service is"
monit.unmonitor:
  - name: ${1}
endsnippet

snippet boto_cloudtrail.present "Ensure trail exists."
boto_cloudtrail.present:
  - name: ${1}
  - Name: ${2}
  - S3BucketName: ${3}
  - S3KeyPrefix: ${4:None}
  - SnsTopicName: ${5:None}
  - IncludeGlobalServiceEvents: ${6:True}
  - IsMultiRegionTrail: ${7:None}
  - EnableLogFileValidation: ${8:False}
  - CloudWatchLogsLogGroupArn: ${9:None}
  - CloudWatchLogsRoleArn: ${10:None}
  - KmsKeyId: ${11:None}
  - LoggingEnabled: ${12:True}
  - Tags: ${13:None}
  - region: ${14:None}
  - key: ${15:None}
  - keyid: ${16:None}
  - profile: ${17:None}
endsnippet

snippet boto_cloudtrail.absent "Ensure trail with passed properties is absent."
boto_cloudtrail.absent:
  - name: ${1}
  - Name: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet mac_keychain.installed "Install a p12 certificate file into the macOS keychain"
mac_keychain.installed:
  - name: ${1}
  - password: ${2}
  - keychain: ${3:"/Library/Keychains/System.keychain"}
endsnippet

snippet mac_keychain.uninstalled "Uninstall a p12 certificate file from the macOS keychain"
mac_keychain.uninstalled:
  - name: ${1}
  - password: ${2}
  - keychain: ${3:"/Library/Keychains/System.keychain"}
  - keychain_password: ${4:None}
endsnippet

snippet mac_keychain.default_keychain "Set the default keychain to use"
mac_keychain.default_keychain:
  - name: ${1}
  - domain: ${2:"user"}
  - user: ${3:None}
endsnippet

snippet zabbix_usermacro.present "Creates a new usermacro."
zabbix_usermacro.present:
  - name: ${1}
  - value: ${2}
  - hostid: ${3:None}
endsnippet

snippet zabbix_usermacro.absent "Ensures that the mediatype does not exist, eventually deletes the mediatype."
zabbix_usermacro.absent:
  - name: ${1}
  - hostid: ${2:None}
endsnippet

snippet gem.installed "Make sure that a gem is installed."
gem.installed:
  - name: ${1}
  - ruby: ${2:None}
  - gem_bin: ${3:None}
  - user: ${4:None}
  - version: ${5:None}
  - rdoc: ${6:False}
  - ri: ${7:False}
  - pre_releases: ${8:False}
  - proxy: ${9:None}
  - source: ${10:None}
endsnippet

snippet gem.removed "Make sure that a gem is not installed."
gem.removed:
  - name: ${1}
  - ruby: ${2:None}
  - user: ${3:None}
  - gem_bin: ${4:None}
endsnippet

snippet gem.sources_add "Make sure that a gem source is added."
gem.sources_add:
  - name: ${1}
  - ruby: ${2:None}
  - user: ${3:None}
endsnippet

snippet gem.sources_remove "Make sure that a gem source is removed."
gem.sources_remove:
  - name: ${1}
  - ruby: ${2:None}
  - user: ${3:None}
endsnippet

snippet keystone_domain.present "Ensure domain exists and is up-to-date"
keystone_domain.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_domain.absent "Ensure domain does not exist"
keystone_domain.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet mac_package.installed "Install a Mac OS Package from a pkg or dmg file, if given a dmg file it"
mac_package.installed:
  - name: ${1}
  - target: ${2:"LocalSystem"}
  - dmg: ${3:False}
  - store: ${4:False}
  - app: ${5:False}
  - mpkg: ${6:False}
  - user: ${7:None}
  - onlyif: ${8:None}
  - unless: ${9:None}
  - force: ${10:False}
  - allow_untrusted: ${11:False}
  - version_check: ${12:None}
endsnippet

snippet mac_package.failed_pkg ""
mac_package.failed_pkg:
  - f_pkg: ${1}
endsnippet

snippet infoblox_host_record.present "This will ensure that a host with the provided name exists."
infoblox_host_record.present:
  - name: ${1:None}
  - data: ${2:None}
  - ensure_data: ${3:True}
endsnippet

snippet infoblox_host_record.absent "Ensure the host with the given Name ipv4addr or mac is removed."
infoblox_host_record.absent:
  - name: ${1:None}
  - ipv4addr: ${2:None}
  - mac: ${3:None}
endsnippet

snippet aws_sqs.exists "Ensure the SQS queue exists."
aws_sqs.exists:
  - name: ${1}
  - region: ${2}
  - user: ${3:None}
  - opts: ${4:False}
endsnippet

snippet aws_sqs.absent "Remove the named SQS queue if it exists."
aws_sqs.absent:
  - name: ${1}
  - region: ${2}
  - user: ${3:None}
  - opts: ${4:False}
endsnippet

snippet apache_module.enabled "Ensure an Apache module is enabled."
apache_module.enabled:
  - name: ${1}
endsnippet

snippet apache_module.disabled "Ensure an Apache module is disabled."
apache_module.disabled:
  - name: ${1}
endsnippet

snippet nfs_export.present "Ensure that the named export is present with the given options"
nfs_export.present:
  - name: ${1}
  - clients: ${2:None}
  - hosts: ${3:None}
  - options: ${4:None}
  - exports: ${5:"/etc/exports"}
endsnippet

snippet nfs_export.absent "Ensure that the named path is not exported"
nfs_export.absent:
  - name: ${1}
  - exports: ${2:"/etc/exports"}
endsnippet

snippet vagrant.running "Defines and starts a new VM with specified arguments, or restart a"
vagrant.running:
  - name: ${1}
endsnippet

snippet vagrant.initialized "Defines a new VM with specified arguments, but does not start it."
vagrant.initialized:
  - name: ${1}
endsnippet

snippet vagrant.stopped "Stops a VM (or VMs) by shutting it (them) down nicely. (Runs ``vagrant halt``)"
vagrant.stopped:
  - name: ${1}
endsnippet

snippet vagrant.powered_off "Stops a VM (or VMs) by power off.  (Runs ``vagrant halt``.)"
vagrant.powered_off:
  - name: ${1}
endsnippet

snippet vagrant.destroyed "Stops a VM (or VMs) and removes all references to it (them). (Runs ``vagrant destroy``.)"
vagrant.destroyed:
  - name: ${1}
endsnippet

snippet vagrant.paused "Stores the state of a VM (or VMs) for fast restart. (Runs ``vagrant suspend``.)"
vagrant.paused:
  - name: ${1}
endsnippet

snippet vagrant.rebooted "Reboots a running, paused, or stopped VM (or VMs). (Runs ``vagrant reload``.)"
vagrant.rebooted:
  - name: ${1}
endsnippet

snippet pdbedit.absent "Ensure user account is absent"
pdbedit.absent:
  - name: ${1}
endsnippet

snippet pdbedit.managed "Manage user account"
pdbedit.managed:
  - name: ${1}
endsnippet

snippet pdbedit.present "Alias for pdbedit.managed"
pdbedit.present:
  - name: ${1}
endsnippet

snippet mssql_database.present "Ensure that the named database is present with the specified options"
mssql_database.present:
  - name: ${1}
  - containment: ${2:"NONE"}
  - options: ${3:None}
endsnippet

snippet mssql_database.absent "Ensure that the named database is absent"
mssql_database.absent:
  - name: ${1}
endsnippet

snippet svn.latest "Checkout or update the working directory to the latest revision from the"
svn.latest:
  - name: ${1}
  - target: ${2:None}
  - rev: ${3:None}
  - user: ${4:None}
  - username: ${5:None}
  - password: ${6:None}
  - force: ${7:False}
  - externals: ${8:True}
  - trust: ${9:False}
  - trust_failures: ${10:None}
endsnippet

snippet svn.export "Export a file or directory from an SVN repository"
svn.export:
  - name: ${1}
  - target: ${2:None}
  - rev: ${3:None}
  - user: ${4:None}
  - username: ${5:None}
  - password: ${6:None}
  - force: ${7:False}
  - overwrite: ${8:False}
  - externals: ${9:True}
  - trust: ${10:False}
  - trust_failures: ${11:None}
endsnippet

snippet svn.dirty "Determine if the working directory has been changed."
svn.dirty:
  - name: ${1}
  - target: ${2}
  - user: ${3:None}
  - username: ${4:None}
  - password: ${5:None}
  - ignore_unversioned: ${6:False}
endsnippet

snippet postgres_tablespace.present "Ensure that the named tablespace is present with the specified properties."
postgres_tablespace.present:
  - name: ${1}
  - directory: ${2}
  - options: ${3:None}
  - owner: ${4:None}
  - user: ${5:None}
  - maintenance_db: ${6:None}
  - db_password: ${7:None}
  - db_host: ${8:None}
  - db_port: ${9:None}
  - db_user: ${10:None}
endsnippet

snippet postgres_tablespace.absent "Ensure that the named tablespace is absent."
postgres_tablespace.absent:
  - name: ${1}
  - user: ${2:None}
  - maintenance_db: ${3:None}
  - db_user: ${4:None}
  - db_password: ${5:None}
  - db_host: ${6:None}
  - db_port: ${7:None}
endsnippet

snippet dracr.property_present "properties = {}"
dracr.property_present:
  - properties: ${1}
  - admin_username: ${2:"root"}
  - admin_password: ${3:"calvin"}
  - host: ${4:None}
endsnippet

snippet ifttt.trigger_event "Trigger an event in IFTTT"
ifttt.trigger_event:
  - name: ${1}
  - event: ${2}
  - value1: ${3:None}
  - value2: ${4:None}
  - value3: ${5:None}
endsnippet

snippet salt_proxy.configure_proxy "Create the salt proxy file and start the proxy process"
salt_proxy.configure_proxy:
  - name: ${1}
  - proxyname: ${2:"p8000"}
  - start: ${3:True}
endsnippet

snippet pip_state.installed "Make sure the package is installed"
pip_state.installed:
  - name: ${1}
  - pkgs: ${2:None}
  - pip_bin: ${3:None}
  - requirements: ${4:None}
  - bin_env: ${5:None}
  - use_wheel: ${6:False}
  - no_use_wheel: ${7:False}
  - log: ${8:None}
  - proxy: ${9:None}
  - timeout: ${10:None}
  - repo: ${11:None}
  - editable: ${12:None}
  - find_links: ${13:None}
  - index_url: ${14:None}
  - extra_index_url: ${15:None}
  - no_index: ${16:False}
  - mirrors: ${17:None}
  - build: ${18:None}
  - target: ${19:None}
  - download: ${20:None}
  - download_cache: ${21:None}
  - source: ${22:None}
  - upgrade: ${23:False}
  - force_reinstall: ${24:False}
  - ignore_installed: ${25:False}
  - exists_action: ${26:None}
  - no_deps: ${27:False}
  - no_install: ${28:False}
  - no_download: ${29:False}
  - install_options: ${30:None}
  - global_options: ${31:None}
  - user: ${32:None}
  - cwd: ${33:None}
  - pre_releases: ${34:False}
  - cert: ${35:None}
  - allow_all_external: ${36:False}
  - allow_external: ${37:None}
  - allow_unverified: ${38:None}
  - process_dependency_links: ${39:False}
  - env_vars: ${40:None}
  - use_vt: ${41:False}
  - trusted_host: ${42:None}
  - no_cache_dir: ${43:False}
  - cache_dir: ${44:None}
  - no_binary: ${45:None}
endsnippet

snippet pip_state.removed "Make sure that a package is not installed."
pip_state.removed:
  - name: ${1}
  - requirements: ${2:None}
  - bin_env: ${3:None}
  - log: ${4:None}
  - proxy: ${5:None}
  - timeout: ${6:None}
  - user: ${7:None}
  - cwd: ${8:None}
  - use_vt: ${9:False}
endsnippet

snippet pip_state.uptodate "Verify that the system is completely up to date."
pip_state.uptodate:
  - name: ${1}
  - bin_env: ${2:None}
  - user: ${3:None}
  - cwd: ${4:None}
  - use_vt: ${5:False}
endsnippet

snippet smtp.send_msg "Send a message via SMTP"
smtp.send_msg:
  - name: ${1}
  - recipient: ${2}
  - subject: ${3}
  - sender: ${4:None}
  - profile: ${5:None}
  - use_ssl: ${6:"True"}
  - attachments: ${7:None}
endsnippet

snippet grafana4_user.present "Ensure that a user is present."
grafana4_user.present:
  - name: ${1}
  - password: ${2}
  - email: ${3:None}
  - is_admin: ${4:False}
  - fullname: ${5:None}
  - theme: ${6:None}
  - default_organization: ${7:None}
  - organizations: ${8:None}
  - profile: ${9:"grafana"}
endsnippet

snippet grafana4_user.absent "Ensure that a user is present."
grafana4_user.absent:
  - name: ${1}
  - profile: ${2:"grafana"}
endsnippet

snippet zenoss.monitored "Ensure a device is monitored. The 'name' given will be used for Zenoss device name and should be resolvable."
zenoss.monitored:
  - name: ${1}
  - device_class: ${2:None}
  - collector: ${3:"localhost"}
  - prod_state: ${4:None}
endsnippet

snippet boto3_elasticache.cache_cluster_present "Ensure a given cache cluster exists."
boto3_elasticache.cache_cluster_present:
  - name: ${1}
  - wait: ${2:900}
  - security_groups: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto3_elasticache.cache_cluster_absent "Ensure a given cache cluster is deleted."
boto3_elasticache.cache_cluster_absent:
  - name: ${1}
  - wait: ${2:600}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto3_elasticache.replication_group_present "Ensure a replication group exists and is in the given state."
boto3_elasticache.replication_group_present:
  - name: ${1}
  - wait: ${2:900}
  - security_groups: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto3_elasticache.replication_group_absent "Ensure a given replication group is deleted."
boto3_elasticache.replication_group_absent:
  - name: ${1}
  - wait: ${2:600}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto3_elasticache.cache_subnet_group_present "Ensure cache subnet group exists."
boto3_elasticache.cache_subnet_group_present:
  - name: ${1}
  - subnets: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto3_elasticache.cache_subnet_group_absent "Ensure a given cache subnet group is deleted."
boto3_elasticache.cache_subnet_group_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto3_elasticache.cache_parameter_group_present "Ensure cache parameter group exists."
boto3_elasticache.cache_parameter_group_present:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto3_elasticache.cache_parameter_group_absent "Ensure a given cache parameter group is absent."
boto3_elasticache.cache_parameter_group_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet host.present "Ensures that the named host is present with the given ip"
host.present:
  - name: ${1}
  - ip: ${2}
  - clean: ${3:False}
endsnippet

snippet host.absent "Ensure that the named host is absent"
host.absent:
  - name: ${1}
  - ip: ${2}
endsnippet

snippet host.only "Ensure that only the given hostnames are associated with the"
host.only:
  - name: ${1}
  - hostnames: ${2}
endsnippet

snippet powerpath.license_present "Ensures that the specified PowerPath license key is present"
powerpath.license_present:
  - name: ${1}
endsnippet

snippet powerpath.license_absent "Ensures that the specified PowerPath license key is absent"
powerpath.license_absent:
  - name: ${1}
endsnippet

snippet xmpp.send_msg "Send a message to an XMPP user"
xmpp.send_msg:
  - name: ${1}
  - recipient: ${2}
  - profile: ${3}
endsnippet

snippet xmpp.send_msg_multi "Send a message to an list of recipients or rooms"
xmpp.send_msg_multi:
  - name: ${1}
  - profile: ${2}
  - recipients: ${3:None}
  - rooms: ${4:None}
endsnippet

snippet tuned.profile "This state module allows you to modify system tuned parameters"
tuned.profile:
  - name: ${1}
endsnippet

snippet tuned.off "Turns 'tuned' off."
tuned.off:
  - name: ${1:None}
endsnippet

snippet saltutil.sync_all "Performs the same task as saltutil.sync_all module"
saltutil.sync_all:
  - name: ${1}
endsnippet

snippet saltutil.sync_beacons "Performs the same task as saltutil.sync_beacons module"
saltutil.sync_beacons:
  - name: ${1}
endsnippet

snippet saltutil.sync_clouds "Performs the same task as saltutil.sync_clouds module"
saltutil.sync_clouds:
  - name: ${1}
endsnippet

snippet saltutil.sync_engines "Performs the same task as saltutil.sync_engines module"
saltutil.sync_engines:
  - name: ${1}
endsnippet

snippet saltutil.sync_grains "Performs the same task as saltutil.sync_grains module"
saltutil.sync_grains:
  - name: ${1}
endsnippet

snippet saltutil.sync_log_handlers "Performs the same task as saltutil.sync_log_handlers module"
saltutil.sync_log_handlers:
  - name: ${1}
endsnippet

snippet saltutil.sync_modules "Performs the same task as saltutil.sync_modules module"
saltutil.sync_modules:
  - name: ${1}
endsnippet

snippet saltutil.sync_output "Performs the same task as saltutil.sync_output module"
saltutil.sync_output:
  - name: ${1}
endsnippet

snippet saltutil.sync_outputters "Performs the same task as saltutil.sync_outputters module"
saltutil.sync_outputters:
  - name: ${1}
endsnippet

snippet saltutil.sync_pillar "Performs the same task as saltutil.sync_pillar module"
saltutil.sync_pillar:
  - name: ${1}
endsnippet

snippet saltutil.sync_proxymodules "Performs the same task as saltutil.sync_proxymodules module"
saltutil.sync_proxymodules:
  - name: ${1}
endsnippet

snippet saltutil.sync_renderers "Performs the same task as saltutil.sync_renderers module"
saltutil.sync_renderers:
  - name: ${1}
endsnippet

snippet saltutil.sync_returners "Performs the same task as saltutil.sync_returners module"
saltutil.sync_returners:
  - name: ${1}
endsnippet

snippet saltutil.sync_sdb "Performs the same task as saltutil.sync_sdb module"
saltutil.sync_sdb:
  - name: ${1}
endsnippet

snippet saltutil.sync_states "Performs the same task as saltutil.sync_states module"
saltutil.sync_states:
  - name: ${1}
endsnippet

snippet saltutil.sync_thorium "Performs the same task as saltutil.sync_thorium module"
saltutil.sync_thorium:
  - name: ${1}
endsnippet

snippet saltutil.sync_utils "Performs the same task as saltutil.sync_utils module"
saltutil.sync_utils:
  - name: ${1}
endsnippet

snippet incron.present "Verifies that the specified incron job is present for the specified user."
incron.present:
  - name: ${1}
  - path: ${2}
  - mask: ${3}
  - cmd: ${4}
  - user: ${5:"root"}
endsnippet

snippet incron.absent "Verifies that the specified incron job is absent for the specified user; only"
incron.absent:
  - name: ${1}
  - path: ${2}
  - mask: ${3}
  - cmd: ${4}
  - user: ${5:"root"}
endsnippet

snippet vbox_guest.additions_installed "Ensure that the VirtualBox Guest Additions are installed. Uses the CD,"
vbox_guest.additions_installed:
  - name: ${1}
  - reboot: ${2:False}
  - upgrade_os: ${3:False}
endsnippet

snippet vbox_guest.additions_removed "Ensure that the VirtualBox Guest Additions are removed. Uses the CD,"
vbox_guest.additions_removed:
  - name: ${1}
  - force: ${2:False}
endsnippet

snippet vbox_guest.grant_access_to_shared_folders_to "Grant access to auto-mounted shared folders to the users."
vbox_guest.grant_access_to_shared_folders_to:
  - name: ${1}
  - users: ${2:None}
endsnippet

snippet neutron_secgroup_rule.present "Ensure a security group rule exists"
neutron_secgroup_rule.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet neutron_secgroup_rule.absent "Ensure a security group rule does not exist"
neutron_secgroup_rule.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet rbac_solaris.managed "Manage RBAC properties for user"
rbac_solaris.managed:
  - name: ${1}
  - roles: ${2:None}
  - profiles: ${3:None}
  - authorizations: ${4:None}
endsnippet

snippet disk.status "Return the current disk usage stats for the named mount point"
disk.status:
  - name: ${1}
  - maximum: ${2:None}
  - minimum: ${3:None}
  - absolute: ${4:False}
endsnippet

snippet iptables.chain_present "Verify the chain is exist."
iptables.chain_present:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.chain_absent "Verify the chain is absent."
iptables.chain_absent:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.append "Add a rule to the end of the specified chain."
iptables.append:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.insert "Insert a rule into a chain"
iptables.insert:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.delete "Delete a rule to a chain"
iptables.delete:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.set_policy "Sets the default policy for iptables firewall tables"
iptables.set_policy:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.flush "Flush current iptables state"
iptables.flush:
  - name: ${1}
  - table: ${2:"filter"}
  - family: ${3:"ipv4"}
endsnippet

snippet iptables.mod_aggregate "The mod_aggregate function which looks up all rules in the available"
iptables.mod_aggregate:
  - low: ${1}
  - chunks: ${2}
  - running: ${3}
endsnippet

snippet win_license.activate "Install and activate the given product key"
win_license.activate:
  - name: ${1}
endsnippet

snippet mysql_grants.present "Ensure that the grant is present with the specified properties"
mysql_grants.present:
  - name: ${1}
  - grant: ${2:None}
  - database: ${3:None}
  - user: ${4:None}
  - host: ${5:"localhost"}
  - grant_option: ${6:False}
  - escape: ${7:True}
  - revoke_first: ${8:False}
  - ssl_option: ${9:False}
endsnippet

snippet mysql_grants.absent "Ensure that the grant is absent"
mysql_grants.absent:
  - name: ${1}
  - grant: ${2:None}
  - database: ${3:None}
  - user: ${4:None}
  - host: ${5:"localhost"}
  - grant_option: ${6:False}
  - escape: ${7:True}
endsnippet

snippet netusers.managed "Manages the configuration of the users on the device, as specified in the state SLS file. Users not defined in that"
netusers.managed:
  - name: ${1}
  - users: ${2:None}
  - defaults: ${3:None}
endsnippet

snippet grains.exists "Ensure that a grain is set"
grains.exists:
  - name: ${1}
  - delimiter: ${2:DEFAULT_TARGET_DELIM}
endsnippet

snippet grains.present "Ensure that a grain is set"
grains.present:
  - name: ${1}
  - value: ${2}
  - delimiter: ${3:DEFAULT_TARGET_DELIM}
  - force: ${4:False}
endsnippet

snippet grains.list_present "Ensure the value is present in the list-type grain. Note: If the grain that is"
grains.list_present:
  - name: ${1}
  - value: ${2}
  - delimiter: ${3:DEFAULT_TARGET_DELIM}
endsnippet

snippet grains.list_absent "Delete a value from a grain formed as a list."
grains.list_absent:
  - name: ${1}
  - value: ${2}
  - delimiter: ${3:DEFAULT_TARGET_DELIM}
endsnippet

snippet grains.absent "Delete a grain from the grains config file"
grains.absent:
  - name: ${1}
  - destructive: ${2:False}
  - delimiter: ${3:DEFAULT_TARGET_DELIM}
  - force: ${4:False}
endsnippet

snippet grains.append "Append a value to a list in the grains config file. The grain that is being"
grains.append:
  - name: ${1}
  - value: ${2}
  - convert: ${3:False}
  - delimiter: ${4:DEFAULT_TARGET_DELIM}
endsnippet

snippet jenkins.present "Ensure the job is present in the Jenkins configured jobs"
jenkins.present:
  - name: ${1}
  - config: ${2:None}
endsnippet

snippet jenkins.absent "Ensure the job is absent from the Jenkins configured jobs"
jenkins.absent:
  - name: ${1}
endsnippet

snippet lvs_server.present "Ensure that the named service is present."
lvs_server.present:
  - name: ${1}
  - protocol: ${2:None}
  - service_address: ${3:None}
  - server_address: ${4:None}
  - packet_forward_method: ${5:"dr"}
  - weight: ${6:1}
endsnippet

snippet lvs_server.absent "Ensure the LVS Real Server in specified service is absent."
lvs_server.absent:
  - name: ${1}
  - protocol: ${2:None}
  - service_address: ${3:None}
  - server_address: ${4:None}
endsnippet

snippet win_snmp.agent_settings "Manage the SNMP sysContact, sysLocation, and sysServices settings."
win_snmp.agent_settings:
  - name: ${1}
  - contact: ${2}
  - location: ${3}
  - services: ${4:None}
endsnippet

snippet win_snmp.auth_traps_enabled "Manage the sending of authentication traps."
win_snmp.auth_traps_enabled:
  - name: ${1}
  - status: ${2:True}
endsnippet

snippet win_snmp.community_names "Manage the SNMP accepted community names and their permissions."
win_snmp.community_names:
  - name: ${1}
  - communities: ${2:None}
endsnippet

snippet boto_cfn.present "Ensure cloud formation stack is present."
boto_cfn.present:
  - name: ${1}
  - template_body: ${2:None}
  - template_url: ${3:None}
  - parameters: ${4:None}
  - notification_arns: ${5:None}
  - disable_rollback: ${6:None}
  - timeout_in_minutes: ${7:None}
  - capabilities: ${8:None}
  - tags: ${9:None}
  - on_failure: ${10:None}
  - stack_policy_body: ${11:None}
  - stack_policy_url: ${12:None}
  - use_previous_template: ${13:None}
  - stack_policy_during_update_body: ${14:None}
  - stack_policy_during_update_url: ${15:None}
  - region: ${16:None}
  - key: ${17:None}
  - keyid: ${18:None}
  - profile: ${19:None}
endsnippet

snippet boto_cfn.absent "Ensure cloud formation stack is absent."
boto_cfn.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet netyang.managed "Manage the device configuration given the input data structured"
netyang.managed:
  - name: ${1}
  - data: ${2}
endsnippet

snippet netyang.configured "Configure the network device, given the input data strucuted"
netyang.configured:
  - name: ${1}
  - data: ${2}
endsnippet

snippet zabbix_service.present "Ensure service exists under service root."
zabbix_service.present:
  - host: ${1}
  - service_root: ${2}
  - trigger_desc: ${3}
  - service_name: ${4:None}
endsnippet

snippet zabbix_service.absent "Ensure service does not exists under service root."
zabbix_service.absent:
  - host: ${1}
  - service_root: ${2}
  - service_name: ${3:None}
endsnippet

snippet trafficserver.bounce_cluster "Bounce all Traffic Server nodes in the cluster. Bouncing Traffic Server"
trafficserver.bounce_cluster:
  - name: ${1}
endsnippet

snippet trafficserver.bounce_local "Bounce Traffic Server on the local node. Bouncing Traffic Server shuts down"
trafficserver.bounce_local:
  - name: ${1}
  - drain: ${2:False}
endsnippet

snippet trafficserver.clear_cluster "Clears accumulated statistics on all nodes in the cluster."
trafficserver.clear_cluster:
  - name: ${1}
endsnippet

snippet trafficserver.clear_node "Clears accumulated statistics on the local node."
trafficserver.clear_node:
  - name: ${1}
endsnippet

snippet trafficserver.restart_cluster "Restart the traffic_manager process and the traffic_server process on all"
trafficserver.restart_cluster:
  - name: ${1}
endsnippet

snippet trafficserver.restart_local "Restart the traffic_manager and traffic_server processes on the local node."
trafficserver.restart_local:
  - name: ${1}
  - drain: ${2:False}
endsnippet

snippet trafficserver.config "Set Traffic Server configuration variable values."
trafficserver.config:
  - name: ${1}
  - value: ${2}
endsnippet

snippet trafficserver.shutdown "Shut down Traffic Server on the local node."
trafficserver.shutdown:
  - name: ${1}
endsnippet

snippet trafficserver.startup "Start Traffic Server on the local node."
trafficserver.startup:
  - name: ${1}
endsnippet

snippet trafficserver.refresh "Initiate a Traffic Server configuration file reread. Use this command to"
trafficserver.refresh:
  - name: ${1}
endsnippet

snippet trafficserver.zero_cluster "Reset performance statistics to zero across the cluster."
trafficserver.zero_cluster:
  - name: ${1}
endsnippet

snippet trafficserver.zero_node "Reset performance statistics to zero on the local node."
trafficserver.zero_node:
  - name: ${1}
endsnippet

snippet trafficserver.offline "Mark a cache storage device as offline. The storage is identified by a path"
trafficserver.offline:
  - name: ${1}
  - path: ${2}
endsnippet

snippet csf.rule_present "Ensure iptable rule exists."
csf.rule_present:
  - name: ${1}
  - method: ${2}
  - port: ${3:None}
  - proto: ${4:"tcp"}
  - direction: ${5:"in"}
  - port_origin: ${6:"d"}
  - ip_origin: ${7:"s"}
  - ttl: ${8:None}
  - comment: ${9:""}
  - reload: ${10:False}
endsnippet

snippet csf.rule_absent "Ensure iptable is not present."
csf.rule_absent:
  - name: ${1}
  - method: ${2}
  - port: ${3:None}
  - proto: ${4:"tcp"}
  - direction: ${5:"in"}
  - port_origin: ${6:"d"}
  - ip_origin: ${7:"s"}
  - ttl: ${8:None}
  - reload: ${9:False}
endsnippet

snippet csf.ports_open "Ensure ports are open for a protocol, in a direction."
csf.ports_open:
  - name: ${1}
  - ports: ${2}
  - proto: ${3:"tcp"}
  - direction: ${4:"in"}
endsnippet

snippet csf.nics_skip "Alias for :mod:`csf.nics_skipped <salt.states.csf.nics_skipped>`"
csf.nics_skip:
  - name: ${1}
  - nics: ${2}
  - ipv6: ${3}
endsnippet

snippet csf.nics_skipped "name"
csf.nics_skipped:
  - name: ${1}
  - nics: ${2}
  - ipv6: ${3:False}
endsnippet

snippet csf.testing_on "Ensure testing mode is enabled in csf."
csf.testing_on:
  - name: ${1}
  - reload: ${2:False}
endsnippet

snippet csf.testing_off "Ensure testing mode is enabled in csf."
csf.testing_off:
  - name: ${1}
  - reload: ${2:False}
endsnippet

snippet csf.option_present "Ensure the state of a particular option/setting in csf."
csf.option_present:
  - name: ${1}
  - value: ${2}
  - reload: ${3:False}
endsnippet

snippet boto_secgroup.present "Ensure the security group exists with the specified rules."
boto_secgroup.present:
  - name: ${1}
  - description: ${2}
  - vpc_id: ${3:None}
  - vpc_name: ${4:None}
  - rules: ${5:None}
  - rules_egress: ${6:None}
  - delete_ingress_rules: ${7:True}
  - delete_egress_rules: ${8:True}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
  - tags: ${13:None}
endsnippet

snippet boto_secgroup.absent "Ensure a security group with the specified name does not exist."
boto_secgroup.absent:
  - name: ${1}
  - vpc_id: ${2:None}
  - vpc_name: ${3:None}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet at.present "Add a job to queue."
at.present:
  - name: ${1}
  - timespec: ${2}
  - tag: ${3:None}
  - user: ${4:None}
  - job: ${5:None}
  - unique_tag: ${6:False}
endsnippet

snippet at.absent "Remove a job from queue"
at.absent:
  - name: ${1}
  - jobid: ${2:None}
endsnippet

snippet at.watch "Add an at job if trigger by watch"
at.watch:
  - name: ${1}
  - timespec: ${2}
  - tag: ${3:None}
  - user: ${4:None}
  - job: ${5:None}
  - unique_tag: ${6:False}
endsnippet

snippet at.mod_watch "The at watcher, called to invoke the watch command."
at.mod_watch:
  - name: ${1}
endsnippet

snippet boto_cognitoidentity.pool_present "Ensure Cognito Identity Pool exists."
boto_cognitoidentity.pool_present:
  - name: ${1}
  - IdentityPoolName: ${2}
  - AuthenticatedRole: ${3}
  - AllowUnauthenticatedIdentities: ${4:False}
  - UnauthenticatedRole: ${5:None}
  - SupportedLoginProviders: ${6:None}
  - DeveloperProviderName: ${7:None}
  - OpenIdConnectProviderARNs: ${8:None}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
endsnippet

snippet boto_cognitoidentity.pool_absent "Ensure cognito identity pool with passed properties is absent."
boto_cognitoidentity.pool_absent:
  - name: ${1}
  - IdentityPoolName: ${2}
  - RemoveAllMatched: ${3:False}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet grafana_dashboard.present "Ensure the grafana dashboard exists and is managed."
grafana_dashboard.present:
  - name: ${1}
  - base_dashboards_from_pillar: ${2:None}
  - base_panels_from_pillar: ${3:None}
  - base_rows_from_pillar: ${4:None}
  - dashboard: ${5:None}
  - profile: ${6:"grafana"}
endsnippet

snippet grafana_dashboard.absent "Ensure the named grafana dashboard is absent."
grafana_dashboard.absent:
  - name: ${1}
  - profile: ${2:"grafana"}
endsnippet

snippet gnomedesktop.wm_preferences "wm_preferences: sets values in the org.gnome.desktop.wm.preferences schema"
gnomedesktop.wm_preferences:
  - name: ${1}
  - user: ${2:None}
  - action_double_click_titlebar: ${3:None}
  - action_middle_click_titlebar: ${4:None}
  - action_right_click_titlebar: ${5:None}
  - application_based: ${6:None}
  - audible_bell: ${7:None}
  - auto_raise: ${8:None}
  - auto_raise_delay: ${9:None}
  - button_layout: ${10:None}
  - disable_workarounds: ${11:None}
  - focus_mode: ${12:None}
  - focus_new_windows: ${13:None}
  - mouse_button_modifier: ${14:None}
  - num_workspaces: ${15:None}
  - raise_on_click: ${16:None}
  - resize_with_right_button: ${17:None}
  - theme: ${18:None}
  - titlebar_font: ${19:None}
  - titlebar_uses_system_font: ${20:None}
  - visual_bell: ${21:None}
  - visual_bell_type: ${22:None}
  - workspace_names: ${23:None}
endsnippet

snippet gnomedesktop.desktop_lockdown "desktop_lockdown: sets values in the org.gnome.desktop.lockdown schema"
gnomedesktop.desktop_lockdown:
  - name: ${1}
  - user: ${2:None}
  - disable_application_handlers: ${3:None}
  - disable_command_line: ${4:None}
  - disable_lock_screen: ${5:None}
  - disable_log_out: ${6:None}
  - disable_print_setup: ${7:None}
  - disable_printing: ${8:None}
  - disable_save_to_disk: ${9:None}
  - disable_user_switching: ${10:None}
  - user_administration_disabled: ${11:None}
endsnippet

snippet gnomedesktop.desktop_interface "desktop_interface: sets values in the org.gnome.desktop.interface schema"
gnomedesktop.desktop_interface:
  - name: ${1}
  - user: ${2:None}
  - automatic_mnemonics: ${3:None}
  - buttons_have_icons: ${4:None}
  - can_change_accels: ${5:None}
  - clock_format: ${6:None}
  - clock_show_date: ${7:None}
  - clock_show_seconds: ${8:None}
  - cursor_blink: ${9:None}
  - cursor_blink_time: ${10:None}
  - cursor_blink_timeout: ${11:None}
  - cursor_size: ${12:None}
  - cursor_theme: ${13:None}
  - document_font_name: ${14:None}
  - enable_animations: ${15:None}
  - font_name: ${16:None}
  - gtk_color_palette: ${17:None}
  - gtk_color_scheme: ${18:None}
  - gtk_im_module: ${19:None}
  - gtk_im_preedit_style: ${20:None}
  - gtk_im_status_style: ${21:None}
  - gtk_key_theme: ${22:None}
  - gtk_theme: ${23:None}
  - gtk_timeout_initial: ${24:None}
  - gtk_timeout_repeat: ${25:None}
  - icon_theme: ${26:None}
  - menubar_accel: ${27:None}
  - menubar_detachable: ${28:None}
  - menus_have_icons: ${29:None}
  - menus_have_tearoff: ${30:None}
  - monospace_font_name: ${31:None}
  - show_input_method_menu: ${32:None}
  - show_unicode_menu: ${33:None}
  - text_scaling_factor: ${34:None}
  - toolbar_detachable: ${35:None}
  - toolbar_icons_size: ${36:None}
  - toolbar_style: ${37:None}
  - toolkit_accessibility: ${38:None}
endsnippet

snippet boto_lc.present "Ensure the launch configuration exists."
boto_lc.present:
  - name: ${1}
  - image_id: ${2}
  - key_name: ${3:None}
  - vpc_id: ${4:None}
  - vpc_name: ${5:None}
  - security_groups: ${6:None}
  - user_data: ${7:None}
  - cloud_init: ${8:None}
  - instance_type: ${9:"m1.small"}
  - kernel_id: ${10:None}
  - ramdisk_id: ${11:None}
  - block_device_mappings: ${12:None}
  - delete_on_termination: ${13:None}
  - instance_monitoring: ${14:False}
  - spot_price: ${15:None}
  - instance_profile_name: ${16:None}
  - ebs_optimized: ${17:False}
  - associate_public_ip_address: ${18:None}
  - region: ${19:None}
  - key: ${20:None}
  - keyid: ${21:None}
  - profile: ${22:None}
endsnippet

snippet boto_lc.absent "Ensure the named launch configuration is deleted."
boto_lc.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet logrotate.set_ "Set a new value for a specific configuration line."
logrotate.set_:
  - name: ${1}
  - key: ${2}
  - value: ${3}
  - setting: ${4:None}
  - conf_file: ${5:_DEFAULT_CONF}
endsnippet

snippet network.managed "Ensure that the named interface is configured properly."
network.managed:
  - name: ${1}
  - type: ${2}
  - enabled: ${3:True}
endsnippet

snippet network.routes "Manage network interface static routes."
network.routes:
  - name: ${1}
endsnippet

snippet network.system "Ensure that global network settings are configured properly."
network.system:
  - name: ${1}
endsnippet

snippet selinux.mode "Verifies the mode SELinux is running in, can be set to enforcing,"
selinux.mode:
  - name: ${1}
endsnippet

snippet selinux.boolean "Set up an SELinux boolean"
selinux.boolean:
  - name: ${1}
  - value: ${2}
  - persist: ${3:False}
endsnippet

snippet selinux.module "Enable/Disable and optionally force a specific version for an SELinux module"
selinux.module:
  - name: ${1}
  - module_state: ${2:"Enabled"}
  - version: ${3:"any"}
endsnippet

snippet selinux.module_install "Installs custom SELinux module from given file"
selinux.module_install:
  - name: ${1}
endsnippet

snippet selinux.module_remove "Removes SELinux module"
selinux.module_remove:
  - name: ${1}
endsnippet

snippet selinux.fcontext_policy_present "Makes sure a SELinux policy for a given filespec (name), filetype"
selinux.fcontext_policy_present:
  - name: ${1}
  - sel_type: ${2}
  - filetype: ${3:"a"}
  - sel_user: ${4:None}
  - sel_level: ${5:None}
endsnippet

snippet selinux.fcontext_policy_absent "Makes sure an SELinux file context policy for a given filespec"
selinux.fcontext_policy_absent:
  - name: ${1}
  - filetype: ${2:"a"}
  - sel_type: ${3:None}
  - sel_user: ${4:None}
  - sel_level: ${5:None}
endsnippet

snippet selinux.fcontext_policy_applied "Checks and makes sure the SELinux policies for a given filespec are"
selinux.fcontext_policy_applied:
  - name: ${1}
  - recursive: ${2:False}
endsnippet

snippet selinux.port_policy_present "Makes sure an SELinux port policy for a given port, protocol and SELinux context type is present."
selinux.port_policy_present:
  - name: ${1}
  - sel_type: ${2}
  - protocol: ${3:None}
  - port: ${4:None}
  - sel_range: ${5:None}
endsnippet

snippet selinux.port_policy_absent "Makes sure an SELinux port policy for a given port, protocol and SELinux context type is absent."
selinux.port_policy_absent:
  - name: ${1}
  - sel_type: ${2:None}
  - protocol: ${3:None}
  - port: ${4:None}
endsnippet

snippet infoblox_cname.present "Ensure the CNAME with the given data is present."
infoblox_cname.present:
  - name: ${1:None}
  - data: ${2:None}
  - ensure_data: ${3:True}
endsnippet

snippet infoblox_cname.absent "Ensure the CNAME with the given name or canonical name is removed"
infoblox_cname.absent:
  - name: ${1:None}
  - canonical: ${2:None}
endsnippet

snippet boto_rds.present "Ensure RDS instance exists."
boto_rds.present:
  - name: ${1}
  - allocated_storage: ${2}
  - db_instance_class: ${3}
  - engine: ${4}
  - master_username: ${5}
  - master_user_password: ${6}
  - db_name: ${7:None}
  - storage_type: ${8:None}
  - db_security_groups: ${9:None}
  - vpc_security_group_ids: ${10:None}
  - vpc_security_groups: ${11:None}
  - availability_zone: ${12:None}
  - db_subnet_group_name: ${13:None}
  - preferred_maintenance_window: ${14:None}
  - db_parameter_group_name: ${15:None}
  - db_cluster_identifier: ${16:None}
  - tde_credential_arn: ${17:None}
  - tde_credential_password: ${18:None}
  - storage_encrypted: ${19:None}
  - kms_keyid: ${20:None}
  - backup_retention_period: ${21:None}
  - preferred_backup_window: ${22:None}
  - port: ${23:None}
  - multi_az: ${24:None}
  - engine_version: ${25:None}
  - auto_minor_version_upgrade: ${26:None}
  - license_model: ${27:None}
  - iops: ${28:None}
  - option_group_name: ${29:None}
  - character_set_name: ${30:None}
  - publicly_accessible: ${31:None}
  - wait_status: ${32:None}
  - tags: ${33:None}
  - copy_tags_to_snapshot: ${34:None}
  - region: ${35:None}
  - domain: ${36:None}
  - key: ${37:None}
  - keyid: ${38:None}
  - monitoring_interval: ${39:None}
  - monitoring_role_arn: ${40:None}
  - domain_iam_role_name: ${41:None}
  - promotion_tier: ${42:None}
  - profile: ${43:None}
endsnippet

snippet boto_rds.replica_present "Ensure RDS replica exists."
boto_rds.replica_present:
  - name: ${1}
  - source: ${2}
  - db_instance_class: ${3:None}
  - availability_zone: ${4:None}
  - port: ${5:None}
  - auto_minor_version_upgrade: ${6:None}
  - iops: ${7:None}
  - option_group_name: ${8:None}
  - publicly_accessible: ${9:None}
  - tags: ${10:None}
  - region: ${11:None}
  - key: ${12:None}
  - keyid: ${13:None}
  - profile: ${14:None}
  - db_parameter_group_name: ${15:None}
endsnippet

snippet boto_rds.subnet_group_present "Ensure DB subnet group exists."
boto_rds.subnet_group_present:
  - name: ${1}
  - description: ${2}
  - subnet_ids: ${3:None}
  - subnet_names: ${4:None}
  - tags: ${5:None}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_rds.absent "Ensure RDS instance is absent."
boto_rds.absent:
  - name: ${1}
  - skip_final_snapshot: ${2:None}
  - final_db_snapshot_identifier: ${3:None}
  - tags: ${4:None}
  - wait_for_deletion: ${5:True}
  - timeout: ${6:180}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_rds.subnet_group_absent ""
boto_rds.subnet_group_absent:
  - name: ${1}
  - tags: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_rds.parameter_present "Ensure DB parameter group exists and update parameters."
boto_rds.parameter_present:
  - name: ${1}
  - db_parameter_group_family: ${2}
  - description: ${3}
  - parameters: ${4:None}
  - apply_method: ${5:"pending-reboot"}
  - tags: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_kms.key_present "Ensure the KMS key exists. KMS keys can not be deleted, so this function"
boto_kms.key_present:
  - name: ${1}
  - policy: ${2}
  - description: ${3:None}
  - key_usage: ${4:None}
  - grants: ${5:None}
  - manage_grants: ${6:False}
  - key_rotation: ${7:False}
  - enabled: ${8:True}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
endsnippet

snippet grafana4_datasource.present "Ensure that a data source is present."
grafana4_datasource.present:
  - name: ${1}
  - type: ${2}
  - url: ${3}
  - access: ${4:None}
  - user: ${5:None}
  - password: ${6:None}
  - database: ${7:None}
  - basic_auth: ${8:None}
  - basic_auth_user: ${9:None}
  - basic_auth_password: ${10:None}
  - tls_auth: ${11:None}
  - json_data: ${12:None}
  - is_default: ${13:None}
  - with_credentials: ${14:None}
  - type_logo_url: ${15:None}
  - orgname: ${16:None}
  - profile: ${17:"grafana"}
endsnippet

snippet grafana4_datasource.absent "Ensure that a data source is present."
grafana4_datasource.absent:
  - name: ${1}
  - orgname: ${2:None}
  - profile: ${3:"grafana"}
endsnippet

snippet alternatives.install "Install new alternative for defined <name>"
alternatives.install:
  - name: ${1}
  - link: ${2}
  - path: ${3}
  - priority: ${4}
endsnippet

snippet alternatives.remove "Removes installed alternative for defined <name> and <path>"
alternatives.remove:
  - name: ${1}
  - path: ${2}
endsnippet

snippet alternatives.auto "Instruct alternatives to use the highest priority"
alternatives.auto:
  - name: ${1}
endsnippet

snippet alternatives.set_ "Sets alternative for <name> to <path>, if <path> is defined"
alternatives.set_:
  - name: ${1}
  - path: ${2}
endsnippet

snippet zpool.present "ensure storage pool is present on the system"
zpool.present:
  - name: ${1}
  - properties: ${2:None}
  - filesystem_properties: ${3:None}
  - layout: ${4:None}
  - config: ${5:None}
endsnippet

snippet zpool.absent "ensure storage pool is absent on the system"
zpool.absent:
  - name: ${1}
  - export: ${2:False}
  - force: ${3:False}
endsnippet

snippet keystone_user.present "Ensure domain exists and is up-to-date"
keystone_user.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_user.absent "Ensure user does not exists"
keystone_user.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet ipmi.boot_device "Request power state change"
ipmi.boot_device:
  - name: ${1:"default"}
endsnippet

snippet ipmi.power "Request power state change"
ipmi.power:
  - name: ${1:"power_on"}
  - wait: ${2:300}
endsnippet

snippet ipmi.user_present "Ensure IPMI user and user privileges."
ipmi.user_present:
  - name: ${1}
  - uid: ${2}
  - password: ${3}
  - channel: ${4:14}
  - callback: ${5:False}
  - link_auth: ${6:True}
  - ipmi_msg: ${7:True}
  - privilege_level: ${8:"administrator"}
endsnippet

snippet ipmi.user_absent "Remove user"
ipmi.user_absent:
  - name: ${1}
  - channel: ${2:14}
endsnippet

snippet keystone_role.present "Ensure an role exists"
keystone_role.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_role.absent "Ensure role does not exist"
keystone_role.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet modjk_worker.stop "    The ``expr_form`` argument has been renamed to ``tgt_type``, earlier"
modjk_worker.stop:
  - name: ${1}
  - lbn: ${2}
  - target: ${3}
  - profile: ${4:"default"}
  - tgt_type: ${5:"glob"}
endsnippet

snippet modjk_worker.activate "    The ``expr_form`` argument has been renamed to ``tgt_type``, earlier"
modjk_worker.activate:
  - name: ${1}
  - lbn: ${2}
  - target: ${3}
  - profile: ${4:"default"}
  - tgt_type: ${5:"glob"}
endsnippet

snippet modjk_worker.disable "    The ``expr_form`` argument has been renamed to ``tgt_type``, earlier"
modjk_worker.disable:
  - name: ${1}
  - lbn: ${2}
  - target: ${3}
  - profile: ${4:"default"}
  - tgt_type: ${5:"glob"}
endsnippet

snippet lvs_service.present "Ensure that the named service is present."
lvs_service.present:
  - name: ${1}
  - protocol: ${2:None}
  - service_address: ${3:None}
  - scheduler: ${4:"wlc"}
endsnippet

snippet lvs_service.absent "Ensure the LVS service is absent."
lvs_service.absent:
  - name: ${1}
  - protocol: ${2:None}
  - service_address: ${3:None}
endsnippet

snippet boto_elasticache.cache_cluster_present ""
boto_elasticache.cache_cluster_present:
endsnippet

snippet boto_elasticache.present "Ensure the cache cluster exists."
boto_elasticache.present:
  - name: ${1}
  - engine: ${2:None}
  - cache_node_type: ${3:None}
  - num_cache_nodes: ${4:None}
  - preferred_availability_zone: ${5:None}
  - port: ${6:None}
  - cache_parameter_group_name: ${7:None}
  - cache_security_group_names: ${8:None}
  - replication_group_id: ${9:None}
  - auto_minor_version_upgrade: ${10:True}
  - security_group_ids: ${11:None}
  - cache_subnet_group_name: ${12:None}
  - engine_version: ${13:None}
  - notification_topic_arn: ${14:None}
  - preferred_maintenance_window: ${15:None}
  - wait: ${16:None}
  - region: ${17:None}
  - key: ${18:None}
  - keyid: ${19:None}
  - profile: ${20:None}
endsnippet

snippet boto_elasticache.subnet_group_present "Ensure ElastiCache subnet group exists."
boto_elasticache.subnet_group_present:
  - name: ${1}
  - subnet_ids: ${2:None}
  - subnet_names: ${3:None}
  - description: ${4:None}
  - tags: ${5:None}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_elasticache.cache_cluster_absent ""
boto_elasticache.cache_cluster_absent:
endsnippet

snippet boto_elasticache.absent "Ensure the named elasticache cluster is deleted."
boto_elasticache.absent:
  - name: ${1}
  - wait: ${2:True}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_elasticache.replication_group_present ""
boto_elasticache.replication_group_present:
endsnippet

snippet boto_elasticache.creategroup "Ensure the a replication group is create."
boto_elasticache.creategroup:
  - name: ${1}
  - primary_cluster_id: ${2}
  - replication_group_description: ${3}
  - wait: ${4:None}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_elasticache.subnet_group_absent ""
boto_elasticache.subnet_group_absent:
  - name: ${1}
  - tags: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_elasticache.replication_group_absent ""
boto_elasticache.replication_group_absent:
  - name: ${1}
  - tags: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet virt.keys "Manage libvirt keys."
virt.keys:
  - name: ${1}
  - basepath: ${2:"/etc/pki"}
endsnippet

snippet virt.stopped "Stops a VM by shutting it down nicely."
virt.stopped:
  - name: ${1}
  - connection: ${2:None}
  - username: ${3:None}
  - password: ${4:None}
endsnippet

snippet virt.powered_off "Stops a VM by power off."
virt.powered_off:
  - name: ${1}
  - connection: ${2:None}
  - username: ${3:None}
  - password: ${4:None}
endsnippet

snippet virt.running "Starts an existing guest, or defines and starts a new VM with specified arguments."
virt.running:
  - name: ${1}
  - cpu: ${2:None}
  - mem: ${3:None}
  - image: ${4:None}
  - vm_type: ${5:None}
  - disk_profile: ${6:None}
  - disks: ${7:None}
  - nic_profile: ${8:None}
  - interfaces: ${9:None}
  - graphics: ${10:None}
  - loader: ${11:None}
  - seed: ${12:True}
  - install: ${13:True}
  - pub_key: ${14:None}
  - priv_key: ${15:None}
  - update: ${16:False}
  - connection: ${17:None}
  - username: ${18:None}
  - password: ${19:None}
  - os_type: ${20:None}
  - arch: ${21:None}
endsnippet

snippet virt.snapshot "Takes a snapshot of a particular VM or by a UNIX-style wildcard."
virt.snapshot:
  - name: ${1}
  - suffix: ${2:None}
  - connection: ${3:None}
  - username: ${4:None}
  - password: ${5:None}
endsnippet

snippet virt.rebooted "Reboots VMs"
virt.rebooted:
  - name: ${1}
  - connection: ${2:None}
  - username: ${3:None}
  - password: ${4:None}
endsnippet

snippet virt.unpowered "   Use :py:func:`~salt.modules.virt.powered_off` instead."
virt.unpowered:
  - name: ${1}
endsnippet

snippet virt.saved "   Use :py:func:`~salt.modules.virt.snapshot` instead."
virt.saved:
  - name: ${1}
  - suffix: ${2:None}
endsnippet

snippet virt.reverted "Reverts to the particular snapshot."
virt.reverted:
  - name: ${1}
  - snapshot: ${2:None}
  - cleanup: ${3:False}
endsnippet

snippet virt.network_running "Defines and starts a new network with specified arguments."
virt.network_running:
  - name: ${1}
  - bridge: ${2}
  - forward: ${3}
  - vport: ${4:None}
  - tag: ${5:None}
  - autostart: ${6:True}
  - connection: ${7:None}
  - username: ${8:None}
  - password: ${9:None}
endsnippet

snippet virt.pool_running "Defines and starts a new pool with specified arguments."
virt.pool_running:
  - name: ${1}
  - ptype: ${2:None}
  - target: ${3:None}
  - permissions: ${4:None}
  - source: ${5:None}
  - transient: ${6:False}
  - autostart: ${7:True}
  - connection: ${8:None}
  - username: ${9:None}
  - password: ${10:None}
endsnippet

snippet eselect.set_ "Verify that the given module is set to the given target"
eselect.set_:
  - name: ${1}
  - target: ${2}
  - module_parameter: ${3:None}
  - action_parameter: ${4:None}
endsnippet

snippet heat.deployed "Deploy stack with the specified properties"
heat.deployed:
  - name: ${1}
  - template: ${2:None}
  - environment: ${3:None}
  - params: ${4:None}
  - poll: ${5:5}
  - rollback: ${6:False}
  - timeout: ${7:60}
  - update: ${8:False}
  - profile: ${9:None}
endsnippet

snippet heat.absent "Ensure that the named stack is absent"
heat.absent:
  - name: ${1}
  - poll: ${2:5}
  - timeout: ${3:60}
  - profile: ${4:None}
endsnippet

snippet ports.installed "Verify that the desired port is installed, and that it was compiled with"
ports.installed:
  - name: ${1}
  - options: ${2:None}
endsnippet

snippet aptpkg.held "Set package in 'hold' state, meaning it will not be upgraded."
aptpkg.held:
  - name: ${1}
endsnippet

snippet apache_site.enabled "Ensure an Apache site is enabled."
apache_site.enabled:
  - name: ${1}
endsnippet

snippet apache_site.disabled "Ensure an Apache site is disabled."
apache_site.disabled:
  - name: ${1}
endsnippet

snippet neutron_secgroup.present "Ensure a security group exists."
neutron_secgroup.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet neutron_secgroup.absent "Ensure a security group does not exist"
neutron_secgroup.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet mongodb_database.absent "Ensure that the named database is absent. Note that creation doesn't make"
mongodb_database.absent:
  - name: ${1}
  - user: ${2:None}
  - password: ${3:None}
  - host: ${4:None}
  - port: ${5:None}
  - authdb: ${6:None}
endsnippet

snippet artifactory.downloaded "Ensures that the artifact from artifactory exists at given location. If it doesn't exist, then"
artifactory.downloaded:
  - name: ${1}
  - artifact: ${2}
  - target_dir: ${3:"/tmp"}
  - target_file: ${4:None}
  - use_literal_group_id: ${5:False}
endsnippet

snippet influxdb08_user.present "Ensure that the cluster admin or database user is present."
influxdb08_user.present:
  - name: ${1}
  - passwd: ${2}
  - database: ${3:None}
  - user: ${4:None}
  - password: ${5:None}
  - host: ${6:None}
  - port: ${7:None}
endsnippet

snippet influxdb08_user.absent "Ensure that the named cluster admin or database user is absent."
influxdb08_user.absent:
  - name: ${1}
  - database: ${2:None}
  - user: ${3:None}
  - password: ${4:None}
  - host: ${5:None}
  - port: ${6:None}
endsnippet

snippet openvswitch_bridge.present "Ensures that the named bridge exists, eventually creates it."
openvswitch_bridge.present:
  - name: ${1}
  - parent: ${2:None}
  - vlan: ${3:None}
endsnippet

snippet openvswitch_bridge.absent "Ensures that the named bridge does not exist, eventually deletes it."
openvswitch_bridge.absent:
  - name: ${1}
endsnippet

snippet acme.cert "Obtain/renew a certificate from an ACME CA, probably Let's Encrypt."
acme.cert:
  - name: ${1}
  - aliases: ${2:None}
  - email: ${3:None}
  - webroot: ${4:None}
  - test_cert: ${5:False}
  - renew: ${6:None}
  - keysize: ${7:None}
  - server: ${8:None}
  - owner: ${9:"root"}
  - group: ${10:"root"}
  - mode: ${11:"0640"}
  - certname: ${12:None}
  - preferred_challenges: ${13:None}
  - tls_sni_01_port: ${14:None}
  - tls_sni_01_address: ${15:None}
  - http_01_port: ${16:None}
  - http_01_address: ${17:None}
  - dns_plugin: ${18:None}
  - dns_plugin_credentials: ${19:None}
endsnippet

snippet apache.configfile ""
apache.configfile:
  - name: ${1}
  - config: ${2}
endsnippet

snippet boto_datapipeline.present "Ensure the data pipeline exists with matching definition."
boto_datapipeline.present:
  - name: ${1}
  - pipeline_objects: ${2:None}
  - pipeline_objects_from_pillars: ${3:"boto_datapipeline_pipeline_objects"}
  - parameter_objects: ${4:None}
  - parameter_objects_from_pillars: ${5:"boto_datapipeline_parameter_objects"}
  - parameter_values: ${6:None}
  - parameter_values_from_pillars: ${7:"boto_datapipeline_parameter_values"}
  - region: ${8:None}
  - key: ${9:None}
  - keyid: ${10:None}
  - profile: ${11:None}
endsnippet

snippet boto_datapipeline.absent "Ensure a pipeline with the service_name does not exist"
boto_datapipeline.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_datapipeline.mutating_helper ""
boto_datapipeline.mutating_helper:
  - structure: ${1}
endsnippet

snippet reg.present "Ensure a registry key or value is present."
reg.present:
  - name: ${1}
  - vname: ${2:None}
  - vdata: ${3:None}
  - vtype: ${4:"REG_SZ"}
  - use_32bit_registry: ${5:False}
  - win_owner: ${6:None}
  - win_perms: ${7:None}
  - win_deny_perms: ${8:None}
  - win_inheritance: ${9:True}
  - win_perms_reset: ${10:False}
endsnippet

snippet reg.absent "Ensure a registry value is removed. To remove a key use key_absent."
reg.absent:
  - name: ${1}
  - vname: ${2:None}
  - use_32bit_registry: ${3:False}
endsnippet

snippet reg.key_absent "Ensure a registry key is removed. This will remove the key, subkeys, and all"
reg.key_absent:
  - name: ${1}
  - use_32bit_registry: ${2:False}
endsnippet

snippet keyboard.system "Set the keyboard layout for the system"
keyboard.system:
  - name: ${1}
endsnippet

snippet keyboard.xorg "Set the keyboard layout for XOrg"
keyboard.xorg:
  - name: ${1}
endsnippet

snippet cyg.installed "Make sure that a package is installed."
cyg.installed:
  - name: ${1}
  - cyg_arch: ${2:"x86_64"}
  - mirrors: ${3:None}
endsnippet

snippet cyg.removed "Make sure that a package is not installed."
cyg.removed:
  - name: ${1}
  - cyg_arch: ${2:"x86_64"}
  - mirrors: ${3:None}
endsnippet

snippet cyg.updated "Make sure all packages are up to date."
cyg.updated:
  - name: ${1:None}
  - cyg_arch: ${2:"x86_64"}
  - mirrors: ${3:None}
endsnippet

snippet cyg.same "True if the two dicts are the same."
cyg.same:
  - self: ${1}
endsnippet

snippet cyg.added "Return a set of additions to past_dict."
cyg.added:
  - self: ${1}
endsnippet

snippet cyg.removed "Return a set of things removed from past_dict."
cyg.removed:
  - self: ${1}
endsnippet

snippet cyg.changed "Return a set of the keys with changed values."
cyg.changed:
  - self: ${1}
endsnippet

snippet cyg.unchanged "Return a set of the keys with unchanged values."
cyg.unchanged:
  - self: ${1}
endsnippet

snippet azurearm_resource.resource_group_present "Ensure a resource group exists."
azurearm_resource.resource_group_present:
  - name: ${1}
  - location: ${2}
  - managed_by: ${3:None}
  - tags: ${4:None}
  - connection_auth: ${5:None}
endsnippet

snippet azurearm_resource.resource_group_absent "Ensure a resource group does not exist in the current subscription."
azurearm_resource.resource_group_absent:
  - name: ${1}
  - connection_auth: ${2:None}
endsnippet

snippet azurearm_resource.policy_definition_present "Ensure a security policy definition exists."
azurearm_resource.policy_definition_present:
  - name: ${1}
  - policy_rule: ${2:None}
  - policy_type: ${3:None}
  - mode: ${4:None}
  - display_name: ${5:None}
  - description: ${6:None}
  - metadata: ${7:None}
  - parameters: ${8:None}
  - policy_rule_json: ${9:None}
  - policy_rule_file: ${10:None}
  - template: ${11:"jinja"}
  - source_hash: ${12:None}
  - source_hash_name: ${13:None}
  - skip_verify: ${14:False}
  - connection_auth: ${15:None}
endsnippet

snippet azurearm_resource.policy_definition_absent "Ensure a policy definition does not exist in the current subscription."
azurearm_resource.policy_definition_absent:
  - name: ${1}
  - connection_auth: ${2:None}
endsnippet

snippet azurearm_resource.policy_assignment_present "Ensure a security policy assignment exists."
azurearm_resource.policy_assignment_present:
  - name: ${1}
  - scope: ${2}
  - definition_name: ${3}
  - display_name: ${4:None}
  - description: ${5:None}
  - assignment_type: ${6:None}
  - parameters: ${7:None}
  - connection_auth: ${8:None}
endsnippet

snippet azurearm_resource.policy_assignment_absent "Ensure a policy assignment does not exist in the provided scope."
azurearm_resource.policy_assignment_absent:
  - name: ${1}
  - scope: ${2}
  - connection_auth: ${3:None}
endsnippet

snippet elasticsearch.index_absent "Ensure that the named index is absent."
elasticsearch.index_absent:
  - name: ${1}
endsnippet

snippet elasticsearch.index_present "Ensure that the named index is present."
elasticsearch.index_present:
  - name: ${1}
  - definition: ${2:None}
endsnippet

snippet elasticsearch.alias_absent "Ensure that the index alias is absent."
elasticsearch.alias_absent:
  - name: ${1}
  - index: ${2}
endsnippet

snippet elasticsearch.alias_present "Ensure that the named index alias is present."
elasticsearch.alias_present:
  - name: ${1}
  - index: ${2}
  - definition: ${3:None}
endsnippet

snippet elasticsearch.index_template_absent "Ensure that the named index template is absent."
elasticsearch.index_template_absent:
  - name: ${1}
endsnippet

snippet elasticsearch.index_template_present "Ensure that the named index templat eis present."
elasticsearch.index_template_present:
  - name: ${1}
  - definition: ${2}
  - check_definition: ${3:False}
endsnippet

snippet elasticsearch.pipeline_absent "Ensure that the named pipeline is absent"
elasticsearch.pipeline_absent:
  - name: ${1}
endsnippet

snippet elasticsearch.pipeline_present "Ensure that the named pipeline is present."
elasticsearch.pipeline_present:
  - name: ${1}
  - definition: ${2}
endsnippet

snippet elasticsearch.search_template_absent "Ensure that the search template is absent"
elasticsearch.search_template_absent:
  - name: ${1}
endsnippet

snippet elasticsearch.search_template_present "Ensure that the named search template is present."
elasticsearch.search_template_present:
  - name: ${1}
  - definition: ${2}
endsnippet

snippet postgres_group.present "Ensure that the named group is present with the specified privileges"
postgres_group.present:
  - name: ${1}
  - createdb: ${2:None}
  - createroles: ${3:None}
  - encrypted: ${4:None}
  - superuser: ${5:None}
  - inherit: ${6:None}
  - login: ${7:None}
  - replication: ${8:None}
  - password: ${9:None}
  - refresh_password: ${10:None}
  - groups: ${11:None}
  - user: ${12:None}
  - maintenance_db: ${13:None}
  - db_password: ${14:None}
  - db_host: ${15:None}
  - db_port: ${16:None}
  - db_user: ${17:None}
endsnippet

snippet postgres_group.absent "Ensure that the named group is absent"
postgres_group.absent:
  - name: ${1}
  - user: ${2:None}
  - maintenance_db: ${3:None}
  - db_password: ${4:None}
  - db_host: ${5:None}
  - db_port: ${6:None}
  - db_user: ${7:None}
endsnippet

snippet ddns.present "Ensures that the named DNS record is present with the given ttl."
ddns.present:
  - name: ${1}
  - zone: ${2}
  - ttl: ${3}
  - data: ${4}
  - rdtype: ${5:"A"}
endsnippet

snippet ddns.absent "Ensures that the named DNS record is absent."
ddns.absent:
  - name: ${1}
  - zone: ${2}
  - data: ${3:None}
  - rdtype: ${4:None}
endsnippet

snippet debconfmod.set_file "Set debconf selections from a file or a template"
debconfmod.set_file:
  - name: ${1}
  - source: ${2}
  - template: ${3:None}
  - context: ${4:None}
  - defaults: ${5:None}
endsnippet

snippet debconfmod.set "Set debconf selections"
debconfmod.set:
  - name: ${1}
  - data: ${2}
endsnippet

snippet cryptdev.mapped "Verify that a device is mapped"
cryptdev.mapped:
  - name: ${1}
  - device: ${2}
  - keyfile: ${3:None}
  - opts: ${4:None}
  - config: ${5:"/etc/crypttab"}
  - persist: ${6:True}
  - immediate: ${7:False}
  - match_on: ${8:"name"}
endsnippet

snippet cryptdev.unmapped "Ensure that a device is unmapped"
cryptdev.unmapped:
  - name: ${1}
  - config: ${2:"/etc/crypttab"}
  - persist: ${3:True}
  - immediate: ${4:False}
endsnippet

snippet boto_s3_bucket.present "Ensure bucket exists."
boto_s3_bucket.present:
  - name: ${1}
  - Bucket: ${2}
  - LocationConstraint: ${3:None}
  - ACL: ${4:None}
  - CORSRules: ${5:None}
  - LifecycleConfiguration: ${6:None}
  - Logging: ${7:None}
  - NotificationConfiguration: ${8:None}
  - Policy: ${9:None}
  - Replication: ${10:None}
  - RequestPayment: ${11:None}
  - Tagging: ${12:None}
  - Versioning: ${13:None}
  - Website: ${14:None}
  - region: ${15:None}
  - key: ${16:None}
  - keyid: ${17:None}
  - profile: ${18:None}
endsnippet

snippet boto_s3_bucket.absent "Ensure bucket with passed properties is absent."
boto_s3_bucket.absent:
  - name: ${1}
  - Bucket: ${2}
  - Force: ${3:False}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet mongodb_user.present "Ensure that the user is present with the specified properties"
mongodb_user.present:
  - name: ${1}
  - passwd: ${2}
  - database: ${3:"admin"}
  - user: ${4:None}
  - password: ${5:None}
  - host: ${6:"localhost"}
  - port: ${7:27017}
  - authdb: ${8:None}
  - roles: ${9:None}
endsnippet

snippet mongodb_user.absent "Ensure that the named user is absent"
mongodb_user.absent:
  - name: ${1}
  - user: ${2:None}
  - password: ${3:None}
  - host: ${4:None}
  - port: ${5:None}
  - database: ${6:"admin"}
  - authdb: ${7:None}
endsnippet

snippet pagerduty_schedule.present "Ensure that a pagerduty schedule exists."
pagerduty_schedule.present:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet pagerduty_schedule.absent "Ensure that a pagerduty schedule does not exist."
pagerduty_schedule.absent:
  - profile: ${1:"pagerduty"}
  - subdomain: ${2:None}
  - api_key: ${3:None}
endsnippet

snippet win_iis.deployed "Ensure the website has been deployed."
win_iis.deployed:
  - name: ${1}
  - sourcepath: ${2}
  - apppool: ${3:""}
  - hostheader: ${4:""}
  - ipaddress: ${5:"*"}
  - port: ${6:80}
  - protocol: ${7:"http"}
  - preload: ${8:""}
endsnippet

snippet win_iis.remove_site "Delete a website from IIS."
win_iis.remove_site:
  - name: ${1}
endsnippet

snippet win_iis.create_binding "Create an IIS binding."
win_iis.create_binding:
  - name: ${1}
  - site: ${2}
  - hostheader: ${3:""}
  - ipaddress: ${4:"*"}
  - port: ${5:80}
  - protocol: ${6:"http"}
  - sslflags: ${7:0}
endsnippet

snippet win_iis.remove_binding "Remove an IIS binding."
win_iis.remove_binding:
  - name: ${1}
  - site: ${2}
  - hostheader: ${3:""}
  - ipaddress: ${4:"*"}
  - port: ${5:80}
endsnippet

snippet win_iis.create_cert_binding "Assign a certificate to an IIS binding."
win_iis.create_cert_binding:
  - name: ${1}
  - site: ${2}
  - hostheader: ${3:""}
  - ipaddress: ${4:"*"}
  - port: ${5:443}
  - sslflags: ${6:0}
endsnippet

snippet win_iis.remove_cert_binding "Remove a certificate from an IIS binding."
win_iis.remove_cert_binding:
  - name: ${1}
  - site: ${2}
  - hostheader: ${3:""}
  - ipaddress: ${4:"*"}
  - port: ${5:443}
endsnippet

snippet win_iis.create_apppool "Create an IIS application pool."
win_iis.create_apppool:
  - name: ${1}
endsnippet

snippet win_iis.remove_apppool "Remove an IIS application pool."
win_iis.remove_apppool:
  - name: ${1}
endsnippet

snippet win_iis.container_setting "Set the value of the setting for an IIS container."
win_iis.container_setting:
  - name: ${1}
  - container: ${2}
  - settings: ${3:None}
endsnippet

snippet win_iis.create_app "Create an IIS application."
win_iis.create_app:
  - name: ${1}
  - site: ${2}
  - sourcepath: ${3}
  - apppool: ${4:None}
endsnippet

snippet win_iis.remove_app "Remove an IIS application."
win_iis.remove_app:
  - name: ${1}
  - site: ${2}
endsnippet

snippet win_iis.create_vdir "Create an IIS virtual directory."
win_iis.create_vdir:
  - name: ${1}
  - site: ${2}
  - sourcepath: ${3}
  - app: ${4:"/"}
endsnippet

snippet win_iis.remove_vdir "Remove an IIS virtual directory."
win_iis.remove_vdir:
  - name: ${1}
  - site: ${2}
  - app: ${3:"/"}
endsnippet

snippet win_iis.set_app "Set the value of the setting for an IIS web application."
win_iis.set_app:
  - name: ${1}
  - site: ${2}
  - settings: ${3:None}
endsnippet

snippet win_iis.webconfiguration_settings "Set the value of webconfiguration settings."
win_iis.webconfiguration_settings:
  - name: ${1}
  - settings: ${2:None}
endsnippet

snippet icinga2.generate_ticket "Generate an icinga2 ticket on the master."
icinga2.generate_ticket:
  - name: ${1}
  - output: ${2:None}
  - grain: ${3:None}
  - key: ${4:None}
  - overwrite: ${5:True}
endsnippet

snippet icinga2.generate_cert "Generate an icinga2 certificate and key on the client."
icinga2.generate_cert:
  - name: ${1}
endsnippet

snippet icinga2.save_cert "Save the certificate on master icinga2 node."
icinga2.save_cert:
  - name: ${1}
  - master: ${2}
endsnippet

snippet icinga2.request_cert "Request CA certificate from master icinga2 node."
icinga2.request_cert:
  - name: ${1}
  - master: ${2}
  - ticket: ${3}
  - port: ${4:"5665"}
endsnippet

snippet icinga2.node_setup "Setup the icinga2 node."
icinga2.node_setup:
  - name: ${1}
  - master: ${2}
  - ticket: ${3}
endsnippet

snippet boto_elb.present "Ensure the ELB exists."
boto_elb.present:
  - name: ${1}
  - listeners: ${2}
  - availability_zones: ${3:None}
  - subnets: ${4:None}
  - subnet_names: ${5:None}
  - security_groups: ${6:None}
  - scheme: ${7:"internet-facing"}
  - health_check: ${8:None}
  - attributes: ${9:None}
  - attributes_from_pillar: ${10:"boto_elb_attributes"}
  - cnames: ${11:None}
  - alarms: ${12:None}
  - alarms_from_pillar: ${13:"boto_elb_alarms"}
  - policies: ${14:None}
  - policies_from_pillar: ${15:"boto_elb_policies"}
  - backends: ${16:None}
  - region: ${17:None}
  - key: ${18:None}
  - keyid: ${19:None}
  - profile: ${20:None}
  - wait_for_sync: ${21:True}
  - tags: ${22:None}
  - instance_ids: ${23:None}
  - instance_names: ${24:None}
endsnippet

snippet boto_elb.register_instances "Add EC2 instance(s) to an Elastic Load Balancer. Removing an instance from"
boto_elb.register_instances:
  - name: ${1}
  - instances: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_elb.absent "Ensure an ELB does not exist"
boto_elb.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet vault.policy_present "Ensure a Vault policy with the given name and rules is present."
vault.policy_present:
  - name: ${1}
  - rules: ${2}
endsnippet

snippet boto_iot.thing_type_present "Ensure thing type exists."
boto_iot.thing_type_present:
  - name: ${1}
  - thingTypeName: ${2}
  - thingTypeDescription: ${3}
  - searchableAttributesList: ${4}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_iot.thing_type_absent "Ensure thing type with passed properties is absent."
boto_iot.thing_type_absent:
  - name: ${1}
  - thingTypeName: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_iot.policy_present "Ensure policy exists."
boto_iot.policy_present:
  - name: ${1}
  - policyName: ${2}
  - policyDocument: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_iot.policy_absent "Ensure policy with passed properties is absent."
boto_iot.policy_absent:
  - name: ${1}
  - policyName: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_iot.policy_attached "Ensure policy is attached to the given principal."
boto_iot.policy_attached:
  - name: ${1}
  - policyName: ${2}
  - principal: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_iot.policy_detached "Ensure policy is attached to the given principal."
boto_iot.policy_detached:
  - name: ${1}
  - policyName: ${2}
  - principal: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_iot.topic_rule_present "Ensure topic rule exists."
boto_iot.topic_rule_present:
  - name: ${1}
  - ruleName: ${2}
  - sql: ${3}
  - actions: ${4}
  - description: ${5:""}
  - ruleDisabled: ${6:False}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_iot.topic_rule_absent "Ensure topic rule with passed properties is absent."
boto_iot.topic_rule_absent:
  - name: ${1}
  - ruleName: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet mysql_user.present "Ensure that the named user is present with the specified properties. A"
mysql_user.present:
  - name: ${1}
  - host: ${2:"localhost"}
  - password: ${3:None}
  - password_hash: ${4:None}
  - allow_passwordless: ${5:False}
  - unix_socket: ${6:False}
  - password_column: ${7:None}
endsnippet

snippet mysql_user.absent "Ensure that the named user is absent"
mysql_user.absent:
  - name: ${1}
  - host: ${2:"localhost"}
endsnippet

snippet influxdb_user.present "Ensure that given user is present."
influxdb_user.present:
  - name: ${1}
  - passwd: ${2}
  - admin: ${3:False}
  - grants: ${4:None}
endsnippet

snippet influxdb_user.absent "Ensure that given user is absent."
influxdb_user.absent:
  - name: ${1}
endsnippet

snippet win_wusa.installed "Ensure an update is installed on the minion"
win_wusa.installed:
  - name: ${1}
  - source: ${2}
endsnippet

snippet win_wusa.uninstalled "Ensure an update is uninstalled from the minion"
win_wusa.uninstalled:
  - name: ${1}
endsnippet

snippet boto_s3.object_present "Ensure object exists in S3."
boto_s3.object_present:
  - name: ${1}
  - source: ${2:None}
  - hash_type: ${3:None}
  - extra_args: ${4:None}
  - extra_args_from_pillar: ${5:"boto_s3_object_extra_args"}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet marathon_app.config "Ensure that the marathon app with the given id is present and is configured"
marathon_app.config:
  - name: ${1}
  - config: ${2}
endsnippet

snippet marathon_app.absent "Ensure that the marathon app with the given id is not present."
marathon_app.absent:
  - name: ${1}
endsnippet

snippet marathon_app.running "Ensure that the marathon app with the given id is present and restart if set."
marathon_app.running:
  - name: ${1}
  - restart: ${2:False}
  - force: ${3:True}
endsnippet

snippet zabbix_action.present "Creates Zabbix Action object or if differs update it according defined parameters"
zabbix_action.present:
  - name: ${1}
  - params: ${2}
endsnippet

snippet zabbix_action.absent "Makes the Zabbix Action to be absent (either does not exist or delete it)."
zabbix_action.absent:
  - name: ${1}
endsnippet

snippet boto_cloudfront.present "Ensure the CloudFront distribution is present."
boto_cloudfront.present:
  - name: ${1}
  - config: ${2}
  - tags: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_cloudfront.distribution_present "Ensure the given CloudFront distribution exists in the described state."
boto_cloudfront.distribution_present:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_cloudfront.oai_bucket_policy_present "Ensure the given policy exists on an S3 bucket, granting access for the given origin access"
boto_cloudfront.oai_bucket_policy_present:
  - name: ${1}
  - Bucket: ${2}
  - OAI: ${3}
  - Policy: ${4}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_cloudfront.route53_alias_present "Ensure a Route53 Alias exists and is pointing at the given CloudFront"
boto_cloudfront.route53_alias_present:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_cloudfront.distribution_absent "Ensure a distribution with the given Name tag does not exist."
boto_cloudfront.distribution_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_cloudfront.origin_access_identity_present "Ensure a given CloudFront Origin Access Identity exists."
boto_cloudfront.origin_access_identity_present:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet boto_cloudfront.origin_access_identity_absent "Ensure a given CloudFront Origin Access Identity is absent."
boto_cloudfront.origin_access_identity_absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet kapacitor.task_present "Ensure that a task is present and up-to-date in Kapacitor."
kapacitor.task_present:
  - name: ${1}
  - tick_script: ${2}
  - task_type: ${3:"stream"}
  - database: ${4:None}
  - retention_policy: ${5:"default"}
  - enable: ${6:True}
  - dbrps: ${7:None}
endsnippet

snippet kapacitor.task_absent "Ensure that a task is absent from Kapacitor."
kapacitor.task_absent:
  - name: ${1}
endsnippet

snippet win_servermanager.installed "Install the windows feature. To install a single feature, use the ``name``"
win_servermanager.installed:
  - name: ${1}
  - features: ${2:None}
  - recurse: ${3:False}
  - restart: ${4:False}
  - source: ${5:None}
  - exclude: ${6:None}
endsnippet

snippet win_servermanager.removed "Remove the windows feature To remove a single feature, use the ``name``"
win_servermanager.removed:
  - name: ${1}
  - features: ${2:None}
  - remove_payload: ${3:False}
  - restart: ${4:False}
endsnippet

snippet bluecoat_sslv.distinguished_name_list_exists "Ensures that a distinguished name list exists with the items provided."
bluecoat_sslv.distinguished_name_list_exists:
  - name: ${1}
  - items: ${2}
endsnippet

snippet bluecoat_sslv.domain_name_list_exists "Ensures that a domain name list exists with the items provided."
bluecoat_sslv.domain_name_list_exists:
  - name: ${1}
  - items: ${2}
endsnippet

snippet bluecoat_sslv.ip_address_list_exists "Ensures that an IP address list exists with the items provided."
bluecoat_sslv.ip_address_list_exists:
  - name: ${1}
  - items: ${2}
endsnippet

snippet boto_route53.rr_present ""
boto_route53.rr_present:
endsnippet

snippet boto_route53.present "Ensure the Route53 record is present."
boto_route53.present:
  - name: ${1}
  - value: ${2}
  - zone: ${3}
  - record_type: ${4}
  - ttl: ${5:None}
  - identifier: ${6:None}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
  - wait_for_sync: ${11:True}
  - split_dns: ${12:False}
  - private_zone: ${13:False}
endsnippet

snippet boto_route53.rr_absent ""
boto_route53.rr_absent:
endsnippet

snippet boto_route53.absent "Ensure the Route53 record is deleted."
boto_route53.absent:
  - name: ${1}
  - zone: ${2}
  - record_type: ${3}
  - identifier: ${4:None}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
  - wait_for_sync: ${9:True}
  - split_dns: ${10:False}
  - private_zone: ${11:False}
endsnippet

snippet boto_route53.hosted_zone_present "Ensure a hosted zone exists with the given attributes. Note that most"
boto_route53.hosted_zone_present:
  - name: ${1}
  - domain_name: ${2:None}
  - private_zone: ${3:False}
  - caller_ref: ${4:None}
  - comment: ${5:""}
  - vpc_id: ${6:None}
  - vpc_name: ${7:None}
  - vpc_region: ${8:None}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
endsnippet

snippet boto_route53.hosted_zone_absent "Ensure the Route53 Hostes Zone described is absent"
boto_route53.hosted_zone_absent:
  - name: ${1}
  - domain_name: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet ansiblegate.playbooks "Run Ansible Playbooks"
ansiblegate.playbooks:
  - name: ${1}
  - rundir: ${2:None}
  - git_repo: ${3:None}
  - git_kwargs: ${4:None}
  - ansible_kwargs: ${5:None}
endsnippet

snippet ansiblegate.get_args "Get args and kwargs from the argset."
ansiblegate.get_args:
  - self: ${1}
  - argset: ${2}
endsnippet

snippet chronos_job.config "Ensure that the chronos job with the given name is present and is configured"
chronos_job.config:
  - name: ${1}
  - config: ${2}
endsnippet

snippet chronos_job.absent "Ensure that the chronos job with the given name is not present."
chronos_job.absent:
  - name: ${1}
endsnippet

snippet netsnmp.managed "Configures the SNMP on the device as specified in the SLS file."
netsnmp.managed:
  - name: ${1}
  - config: ${2:None}
  - defaults: ${3:None}
endsnippet

snippet openvswitch_port.present "Ensures that the named port exists on bridge, eventually creates it."
openvswitch_port.present:
  - name: ${1}
  - bridge: ${2}
  - tunnel_type: ${3:None}
  - id: ${4:None}
  - remote: ${5:None}
  - dst_port: ${6:None}
  - internal: ${7:False}
endsnippet

snippet openvswitch_port.absent "Ensures that the named port exists on bridge, eventually deletes it."
openvswitch_port.absent:
  - name: ${1}
  - bridge: ${2:None}
endsnippet

snippet x509.private_key_managed "Manage a private key's existence."
x509.private_key_managed:
  - name: ${1}
  - bits: ${2:2048}
  - passphrase: ${3:None}
  - cipher: ${4:"aes_128_cbc"}
  - new: ${5:False}
  - overwrite: ${6:False}
  - verbose: ${7:True}
endsnippet

snippet x509.csr_managed "Manage a Certificate Signing Request"
x509.csr_managed:
  - name: ${1}
endsnippet

snippet x509.certificate_managed "Manage a Certificate"
x509.certificate_managed:
  - name: ${1}
  - days_remaining: ${2:90}
  - managed_private_key: ${3:None}
  - append_certs: ${4:None}
endsnippet

snippet x509.crl_managed "Manage a Certificate Revocation List"
x509.crl_managed:
  - name: ${1}
  - signing_private_key: ${2}
  - signing_private_key_passphrase: ${3:None}
  - signing_cert: ${4:None}
  - revoked: ${5:None}
  - days_valid: ${6:100}
  - digest: ${7:""}
  - days_remaining: ${8:30}
  - include_expired: ${9:False}
endsnippet

snippet x509.pem_managed "Manage the contents of a PEM file directly with the content in text, ensuring correct formatting."
x509.pem_managed:
  - name: ${1}
  - text: ${2}
  - backup: ${3:False}
endsnippet

snippet postgres_cluster.present "Ensure that the named cluster is present with the specified properties."
postgres_cluster.present:
  - version: ${1}
  - name: ${2}
  - port: ${3:None}
  - encoding: ${4:None}
  - locale: ${5:None}
  - datadir: ${6:None}
endsnippet

snippet postgres_cluster.absent "Ensure that the named cluster is absent"
postgres_cluster.absent:
  - version: ${1}
  - name: ${2}
endsnippet

snippet postgres_user.present "Ensure that the named user is present with the specified privileges"
postgres_user.present:
  - name: ${1}
  - createdb: ${2:None}
  - createroles: ${3:None}
  - encrypted: ${4:None}
  - superuser: ${5:None}
  - replication: ${6:None}
  - inherit: ${7:None}
  - login: ${8:None}
  - password: ${9:None}
  - default_password: ${10:None}
  - refresh_password: ${11:None}
  - valid_until: ${12:None}
  - groups: ${13:None}
  - user: ${14:None}
  - maintenance_db: ${15:None}
  - db_password: ${16:None}
  - db_host: ${17:None}
  - db_port: ${18:None}
  - db_user: ${19:None}
endsnippet

snippet postgres_user.absent "Ensure that the named user is absent"
postgres_user.absent:
  - name: ${1}
  - user: ${2:None}
  - maintenance_db: ${3:None}
  - db_password: ${4:None}
  - db_host: ${5:None}
  - db_port: ${6:None}
  - db_user: ${7:None}
endsnippet

snippet netconfig.replace_pattern "Replace occurrences of a pattern in the configuration source. If"
netconfig.replace_pattern:
  - name: ${1}
  - pattern: ${2}
  - repl: ${3}
  - count: ${4:0}
  - flags: ${5:8}
  - bufsize: ${6:1}
  - append_if_not_found: ${7:False}
  - prepend_if_not_found: ${8:False}
  - not_found_content: ${9:None}
  - search_only: ${10:False}
  - show_changes: ${11:True}
  - backslash_literal: ${12:False}
  - source: ${13:"running"}
  - path: ${14:None}
  - test: ${15:False}
  - replace: ${16:True}
  - debug: ${17:False}
  - commit: ${18:True}
endsnippet

snippet netconfig.saved "Save the configuration to a file on the local file system."
netconfig.saved:
  - name: ${1}
  - source: ${2:"running"}
  - user: ${3:None}
  - group: ${4:None}
  - mode: ${5:None}
  - attrs: ${6:None}
  - makedirs: ${7:False}
  - dir_mode: ${8:None}
  - replace: ${9:True}
  - backup: ${10:""}
  - show_changes: ${11:True}
  - create: ${12:True}
  - tmp_dir: ${13:""}
  - tmp_ext: ${14:""}
  - encoding: ${15:None}
  - encoding_errors: ${16:"strict"}
  - allow_empty: ${17:False}
  - follow_symlinks: ${18:True}
  - check_cmd: ${19:None}
  - win_owner: ${20:None}
  - win_perms: ${21:None}
  - win_deny_perms: ${22:None}
  - win_inheritance: ${23:True}
  - win_perms_reset: ${24:False}
endsnippet

snippet netconfig.managed "Manages the configuration on network devices."
netconfig.managed:
  - name: ${1}
  - template_name: ${2:None}
  - template_source: ${3:None}
  - template_hash: ${4:None}
  - template_hash_name: ${5:None}
  - saltenv: ${6:"base"}
  - template_engine: ${7:"jinja"}
  - skip_verify: ${8:False}
  - context: ${9:None}
  - defaults: ${10:None}
  - test: ${11:False}
  - commit: ${12:True}
  - debug: ${13:False}
  - replace: ${14:False}
  - commit_in: ${15:None}
  - commit_at: ${16:None}
  - revert_in: ${17:None}
  - revert_at: ${18:None}
endsnippet

snippet netconfig.commit_cancelled "Cancel a commit scheduled to be executed via the ``commit_in`` and"
netconfig.commit_cancelled:
  - name: ${1}
endsnippet

snippet netconfig.commit_confirmed "Confirm a commit scheduled to be reverted via the ``revert_in`` and"
netconfig.commit_confirmed:
  - name: ${1}
endsnippet

snippet docker_container.running "Ensure that a container with a specific configuration is present and"
docker_container.running:
  - name: ${1}
  - image: ${2:None}
  - skip_translate: ${3:None}
  - ignore_collisions: ${4:False}
  - validate_ip_addrs: ${5:True}
  - force: ${6:False}
  - watch_action: ${7:"force"}
  - start: ${8:True}
  - shutdown_timeout: ${9:None}
  - client_timeout: ${10:salt.utils.docker.CLIENT_TIMEOUT
}
  - networks: ${11:None}
endsnippet

snippet docker_container.run "    If no tag is specified in the image name, and nothing matching the"
docker_container.run:
  - name: ${1}
  - image: ${2:None}
  - onlyif: ${3:None}
  - unless: ${4:None}
  - creates: ${5:None}
  - bg: ${6:False}
  - failhard: ${7:True}
  - replace: ${8:False}
  - force: ${9:False}
  - skip_translate: ${10:None}
  - ignore_collisions: ${11:False}
  - validate_ip_addrs: ${12:True}
  - client_timeout: ${13:salt.utils.docker.CLIENT_TIMEOUT
}
endsnippet

snippet docker_container.stopped "Ensure that a container (or containers) is stopped"
docker_container.stopped:
  - name: ${1:None}
  - containers: ${2:None}
  - shutdown_timeout: ${3:None}
  - unpause: ${4:False}
  - error_on_absent: ${5:True}
endsnippet

snippet docker_container.absent "Ensure that a container is absent"
docker_container.absent:
  - name: ${1}
  - force: ${2:False}
endsnippet

snippet docker_container.mod_run_check "Execute the onlyif/unless/creates logic. Returns a result dict if any of"
docker_container.mod_run_check:
  - onlyif: ${1}
  - unless: ${2}
  - creates: ${3}
endsnippet

snippet docker_container.mod_watch "The docker_container watcher, called to invoke the watch command."
docker_container.mod_watch:
  - name: ${1}
  - sfun: ${2:None}
endsnippet

snippet zabbix_usergroup.present "Creates new user group."
zabbix_usergroup.present:
  - name: ${1}
endsnippet

snippet zabbix_usergroup.absent "Ensures that the user group does not exist, eventually delete user group."
zabbix_usergroup.absent:
  - name: ${1}
endsnippet

snippet firewall.check "Checks if there is an open connection from the minion to the defined"
firewall.check:
  - name: ${1}
  - port: ${2:None}
endsnippet

snippet boto_lambda.function_present "Ensure function exists."
boto_lambda.function_present:
  - name: ${1}
  - FunctionName: ${2}
  - Runtime: ${3}
  - Role: ${4}
  - Handler: ${5}
  - ZipFile: ${6:None}
  - S3Bucket: ${7:None}
  - S3Key: ${8:None}
  - S3ObjectVersion: ${9:None}
  - Description: ${10:""}
  - Timeout: ${11:3}
  - MemorySize: ${12:128}
  - Permissions: ${13:None}
  - RoleRetries: ${14:5}
  - region: ${15:None}
  - key: ${16:None}
  - keyid: ${17:None}
  - profile: ${18:None}
  - VpcConfig: ${19:None}
  - Environment: ${20:None}
endsnippet

snippet boto_lambda.function_absent "Ensure function with passed properties is absent."
boto_lambda.function_absent:
  - name: ${1}
  - FunctionName: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_lambda.alias_present "Ensure alias exists."
boto_lambda.alias_present:
  - name: ${1}
  - FunctionName: ${2}
  - Name: ${3}
  - FunctionVersion: ${4}
  - Description: ${5:""}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_lambda.alias_absent "Ensure alias with passed properties is absent."
boto_lambda.alias_absent:
  - name: ${1}
  - FunctionName: ${2}
  - Name: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_lambda.event_source_mapping_present "Ensure event source mapping exists."
boto_lambda.event_source_mapping_present:
  - name: ${1}
  - EventSourceArn: ${2}
  - FunctionName: ${3}
  - StartingPosition: ${4}
  - Enabled: ${5:True}
  - BatchSize: ${6:100}
  - region: ${7:None}
  - key: ${8:None}
  - keyid: ${9:None}
  - profile: ${10:None}
endsnippet

snippet boto_lambda.event_source_mapping_absent "Ensure event source mapping with passed properties is absent."
boto_lambda.event_source_mapping_absent:
  - name: ${1}
  - EventSourceArn: ${2}
  - FunctionName: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet keystone_project.present "Ensure a project exists and is up-to-date"
keystone_project.present:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet keystone_project.absent "Ensure a project does not exists"
keystone_project.absent:
  - name: ${1}
  - auth: ${2:None}
endsnippet

snippet ini_manage.options_present "    /home/saltminion/api-paste.ini:"
ini_manage.options_present:
  - name: ${1}
  - sections: ${2:None}
  - separator: ${3:"="}
  - strict: ${4:False}
endsnippet

snippet ini_manage.options_absent "    /home/saltminion/api-paste.ini:"
ini_manage.options_absent:
  - name: ${1}
  - sections: ${2:None}
  - separator: ${3:"="}
endsnippet

snippet ini_manage.sections_present "    /home/saltminion/api-paste.ini:"
ini_manage.sections_present:
  - name: ${1}
  - sections: ${2:None}
  - separator: ${3:"="}
endsnippet

snippet ini_manage.sections_absent "    /home/saltminion/api-paste.ini:"
ini_manage.sections_absent:
  - name: ${1}
  - sections: ${2:None}
  - separator: ${3:"="}
endsnippet

snippet solrcloud.alias "Create alias and enforce collection list."
solrcloud.alias:
  - name: ${1}
  - collections: ${2}
endsnippet

snippet solrcloud.collection "Create collection and enforce options."
solrcloud.collection:
  - name: ${1}
  - options: ${2:None}
endsnippet

snippet ntp.managed "Manage NTP servers"
ntp.managed:
  - name: ${1}
  - servers: ${2:None}
endsnippet

snippet boto_cloudwatch_alarm.present "Ensure the cloudwatch alarm exists."
boto_cloudwatch_alarm.present:
  - name: ${1}
  - attributes: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_cloudwatch_alarm.absent "Ensure the named cloudwatch alarm is deleted."
boto_cloudwatch_alarm.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet git.latest "Make sure the repository is cloned to the given directory and is"
git.latest:
  - name: ${1}
  - rev: ${2:"HEAD"}
  - target: ${3:None}
  - branch: ${4:None}
  - user: ${5:None}
  - password: ${6:None}
  - update_head: ${7:True}
  - force_checkout: ${8:False}
  - force_clone: ${9:False}
  - force_fetch: ${10:False}
  - force_reset: ${11:False}
  - submodules: ${12:False}
  - bare: ${13:False}
  - mirror: ${14:False}
  - remote: ${15:"origin"}
  - fetch_tags: ${16:True}
  - sync_tags: ${17:True}
  - depth: ${18:None}
  - identity: ${19:None}
  - https_user: ${20:None}
  - https_pass: ${21:None}
  - onlyif: ${22:None}
  - unless: ${23:None}
  - refspec_branch: ${24:"*"}
  - refspec_tag: ${25:"*"}
  - output_encoding: ${26:None}
endsnippet

snippet git.present "Ensure that a repository exists in the given directory"
git.present:
  - name: ${1}
  - force: ${2:False}
  - bare: ${3:True}
  - template: ${4:None}
  - separate_git_dir: ${5:None}
  - shared: ${6:None}
  - user: ${7:None}
  - password: ${8:None}
  - output_encoding: ${9:None}
endsnippet

snippet git.detached "Make sure a repository is cloned to the given target directory and is"
git.detached:
  - name: ${1}
  - rev: ${2}
  - target: ${3:None}
  - remote: ${4:"origin"}
  - user: ${5:None}
  - password: ${6:None}
  - force_clone: ${7:False}
  - force_checkout: ${8:False}
  - fetch_remote: ${9:True}
  - hard_reset: ${10:False}
  - submodules: ${11:False}
  - identity: ${12:None}
  - https_user: ${13:None}
  - https_pass: ${14:None}
  - onlyif: ${15:None}
  - unless: ${16:None}
  - output_encoding: ${17:None}
endsnippet

snippet git.cloned "Ensure that a repository has been cloned to the specified target directory."
git.cloned:
  - name: ${1}
  - target: ${2:None}
  - branch: ${3:None}
  - user: ${4:None}
  - password: ${5:None}
  - identity: ${6:None}
  - https_user: ${7:None}
  - https_pass: ${8:None}
  - output_encoding: ${9:None}
endsnippet

snippet git.config_unset "Ensure that the named config key is not present"
git.config_unset:
  - name: ${1}
  - value_regex: ${2:None}
  - repo: ${3:None}
  - user: ${4:None}
  - password: ${5:None}
  - output_encoding: ${6:None}
endsnippet

snippet git.config_set "    Renamed from ``git.config`` to ``git.config_set``. For earlier"
git.config_set:
  - name: ${1}
  - value: ${2:None}
  - multivar: ${3:None}
  - repo: ${4:None}
  - user: ${5:None}
  - password: ${6:None}
  - output_encoding: ${7:None}
endsnippet

snippet git.mod_run_check "Execute the onlyif and unless logic. Return a result dict if:"
git.mod_run_check:
  - cmd_kwargs: ${1}
  - onlyif: ${2}
  - unless: ${3}
endsnippet

snippet splunk_search.present "Ensure a search is present"
splunk_search.present:
  - name: ${1}
  - profile: ${2:"splunk"}
endsnippet

snippet splunk_search.absent "Ensure a search is absent"
splunk_search.absent:
  - name: ${1}
  - profile: ${2:"splunk"}
endsnippet

snippet boto_apigateway.present "Ensure the spcified api_name with the corresponding swaggerfile is deployed to the"
boto_apigateway.present:
  - name: ${1}
  - api_name: ${2}
  - swagger_file: ${3}
  - stage_name: ${4}
  - api_key_required: ${5}
  - lambda_integration_role: ${6}
  - lambda_region: ${7:None}
  - stage_variables: ${8:None}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
  - lambda_funcname_format: ${13:"{stage}_{api}_{resource}_{method}"}
  - authorization_type: ${14:"NONE"}
  - error_response_template: ${15:None}
  - response_template: ${16:None}
endsnippet

snippet boto_apigateway.absent "Ensure the stage_name associated with the given api_name deployed by boto_apigateway's"
boto_apigateway.absent:
  - name: ${1}
  - api_name: ${2}
  - stage_name: ${3}
  - nuke_api: ${4:False}
  - region: ${5:None}
  - key: ${6:None}
  - keyid: ${7:None}
  - profile: ${8:None}
endsnippet

snippet boto_apigateway.usage_plan_present "Ensure the spcifieda usage plan with the corresponding metrics is deployed"
boto_apigateway.usage_plan_present:
  - name: ${1}
  - plan_name: ${2}
  - description: ${3:None}
  - throttle: ${4:None}
  - quota: ${5:None}
  - region: ${6:None}
  - key: ${7:None}
  - keyid: ${8:None}
  - profile: ${9:None}
endsnippet

snippet boto_apigateway.usage_plan_absent "Ensures usage plan identified by name is no longer present"
boto_apigateway.usage_plan_absent:
  - name: ${1}
  - plan_name: ${2}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
endsnippet

snippet boto_apigateway.usage_plan_association_present "Ensures usage plan identified by name is added to provided api_stages"
boto_apigateway.usage_plan_association_present:
  - name: ${1}
  - plan_name: ${2}
  - api_stages: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_apigateway.usage_plan_association_absent "Ensures usage plan identified by name is removed from provided api_stages"
boto_apigateway.usage_plan_association_absent:
  - name: ${1}
  - plan_name: ${2}
  - api_stages: ${3}
  - region: ${4:None}
  - key: ${5:None}
  - keyid: ${6:None}
  - profile: ${7:None}
endsnippet

snippet boto_apigateway.md5_filehash "returns md5 hash for the swagger file"
boto_apigateway.md5_filehash:
  - self: ${1}
endsnippet

snippet boto_apigateway.info "returns the swagger info object as a dictionary"
boto_apigateway.info:
  - self: ${1}
endsnippet

snippet boto_apigateway.info_json "returns the swagger info object as a pretty printed json string."
boto_apigateway.info_json:
  - self: ${1}
endsnippet

snippet boto_apigateway.rest_api_name "returns the name of the api"
boto_apigateway.rest_api_name:
  - self: ${1}
endsnippet

snippet boto_apigateway.rest_api_version "returns the version field in the swagger info object"
boto_apigateway.rest_api_version:
  - self: ${1}
endsnippet

snippet boto_apigateway.models "generator to return the tuple of model and its schema to create on aws."
boto_apigateway.models:
  - self: ${1}
endsnippet

snippet boto_apigateway.paths "returns an iterator for the relative resource paths specified in the swagger file"
boto_apigateway.paths:
  - self: ${1}
endsnippet

snippet boto_apigateway.basePath "returns the base path field as defined in the swagger file"
boto_apigateway.basePath:
  - self: ${1}
endsnippet

snippet boto_apigateway.restApiId "returns the rest api id as returned by AWS on creation of the rest api"
boto_apigateway.restApiId:
  - self: ${1}
endsnippet

snippet boto_apigateway.restApiId "allows the assignment of the rest api id on creation of the rest api"
boto_apigateway.restApiId:
  - self: ${1}
  - restApiId: ${2}
endsnippet

snippet boto_apigateway.deployment_label_json "this property returns the unique description in pretty printed json for"
boto_apigateway.deployment_label_json:
  - self: ${1}
endsnippet

snippet boto_apigateway.deployment_label "this property returns the deployment label dictionary (mainly used by"
boto_apigateway.deployment_label:
  - self: ${1}
endsnippet

snippet boto_apigateway.no_more_deployments_remain "Helper function to find whether there are deployments left with stages associated"
boto_apigateway.no_more_deployments_remain:
  - self: ${1}
endsnippet

snippet boto_apigateway.overwrite_stage_variables "overwrite the given stage_name's stage variables with the given stage_variables"
boto_apigateway.overwrite_stage_variables:
  - self: ${1}
  - ret: ${2}
  - stage_variables: ${3}
endsnippet

snippet boto_apigateway.delete_stage "Method to delete the given stage_name.  If the current deployment tied to the given"
boto_apigateway.delete_stage:
  - self: ${1}
  - ret: ${2}
endsnippet

snippet boto_apigateway.verify_api "this method helps determine if the given stage_name is already on a deployment"
boto_apigateway.verify_api:
  - self: ${1}
  - ret: ${2}
endsnippet

snippet boto_apigateway.publish_api "this method tie the given stage_name to a deployment matching the given swagger_file"
boto_apigateway.publish_api:
  - self: ${1}
  - ret: ${2}
  - stage_variables: ${3}
endsnippet

snippet boto_apigateway.deploy_api "this method create the top level rest api in AWS apigateway"
boto_apigateway.deploy_api:
  - self: ${1}
  - ret: ${2}
endsnippet

snippet boto_apigateway.delete_api "Method to delete a Rest Api named defined in the swagger file's Info Object's title value."
boto_apigateway.delete_api:
  - self: ${1}
  - ret: ${2}
endsnippet

snippet boto_apigateway.deploy_models "Method to deploy swagger file's definition objects and associated schema to AWS Apigateway as Models"
boto_apigateway.deploy_models:
  - self: ${1}
  - ret: ${2}
endsnippet

snippet boto_apigateway.deploy_resources "Method to deploy resources defined in the swagger file."
boto_apigateway.deploy_resources:
  - self: ${1}
  - ret: ${2}
  - api_key_required: ${3}
  - lambda_integration_role: ${4}
  - lambda_region: ${5}
  - authorization_type: ${6}
endsnippet

snippet boto_apigateway.location "returns location in the swagger parameter object"
boto_apigateway.location:
  - self: ${1}
endsnippet

snippet boto_apigateway.name "returns parameter name in the swagger parameter object"
boto_apigateway.name:
  - self: ${1}
endsnippet

snippet boto_apigateway.schema "returns the name of the schema given the reference in the swagger parameter object"
boto_apigateway.schema:
  - self: ${1}
endsnippet

snippet boto_apigateway.schema "returns the name of the schema given the reference in the swagger method response object"
boto_apigateway.schema:
  - self: ${1}
endsnippet

snippet boto_apigateway.headers "returns the headers dictionary in the method response object"
boto_apigateway.headers:
  - self: ${1}
endsnippet

snippet logadm.rotate "Add a log to the logadm configuration"
logadm.rotate:
  - name: ${1}
endsnippet

snippet logadm.remove "Remove a log from the logadm configuration"
logadm.remove:
  - name: ${1}
  - log_file: ${2:None}
endsnippet

snippet infoblox_a.present "Ensure infoblox A record."
infoblox_a.present:
  - name: ${1:None}
  - ipv4addr: ${2:None}
  - data: ${3:None}
  - ensure_data: ${4:True}
endsnippet

snippet infoblox_a.absent "Ensure infoblox A record is removed."
infoblox_a.absent:
  - name: ${1:None}
  - ipv4addr: ${2:None}
endsnippet

snippet pkgrepo.managed "This state manages software package repositories. Currently, :mod:`yum"
pkgrepo.managed:
  - name: ${1}
  - ppa: ${2:None}
endsnippet

snippet pkgrepo.absent "This function deletes the specified repo on the system, if it exists. It"
pkgrepo.absent:
  - name: ${1}
endsnippet

snippet lxd.init "Initalizes the LXD Daemon, as LXD doesn't tell if its initialized"
lxd.init:
  - name: ${1}
  - storage_backend: ${2:"dir"}
  - trust_password: ${3:None}
  - network_address: ${4:None}
  - network_port: ${5:None}
  - storage_create_device: ${6:None}
  - storage_create_loop: ${7:None}
  - storage_pool: ${8:None}
  - done_file: ${9:"%SALT_CONFIG_DIR%/lxd_initialized"}
endsnippet

snippet lxd.config_managed "Manage a LXD Server config setting."
lxd.config_managed:
  - name: ${1}
  - value: ${2}
  - force_password: ${3:False}
endsnippet

snippet lxd.authenticate "Authenticate with a remote peer."
lxd.authenticate:
  - name: ${1}
  - remote_addr: ${2}
  - password: ${3}
  - cert: ${4}
  - key: ${5}
  - verify_cert: ${6:True}
endsnippet

snippet win_dacl.present "Ensure an ACE is present"
win_dacl.present:
  - name: ${1}
  - objectType: ${2}
  - user: ${3}
  - permission: ${4}
  - acetype: ${5}
  - propagation: ${6}
endsnippet

snippet win_dacl.absent "Ensure an ACL does not exist"
win_dacl.absent:
  - name: ${1}
  - objectType: ${2}
  - user: ${3}
  - permission: ${4}
  - acetype: ${5}
  - propagation: ${6}
endsnippet

snippet win_dacl.inherit "Ensure an object is inheriting ACLs from its parent"
win_dacl.inherit:
  - name: ${1}
  - objectType: ${2}
  - clear_existing_acl: ${3:False}
endsnippet

snippet win_dacl.disinherit "Ensure an object is not inheriting ACLs from its parent"
win_dacl.disinherit:
  - name: ${1}
  - objectType: ${2}
  - copy_inherited_acl: ${3:True}
endsnippet

snippet rabbitmq_user.present "Ensure the RabbitMQ user exists."
rabbitmq_user.present:
  - name: ${1}
  - password: ${2:None}
  - force: ${3:False}
  - tags: ${4:None}
  - perms: ${5:()
}
  - runas: ${6:None}
endsnippet

snippet rabbitmq_user.absent "Ensure the named user is absent"
rabbitmq_user.absent:
  - name: ${1}
  - runas: ${2:None}
endsnippet

snippet zabbix_mediatype.present "Creates new mediatype."
zabbix_mediatype.present:
  - name: ${1}
  - mediatype: ${2}
endsnippet

snippet zabbix_mediatype.absent "Ensures that the mediatype does not exist, eventually deletes the mediatype."
zabbix_mediatype.absent:
  - name: ${1}
endsnippet

snippet cisconso.value_present "Ensure a specific value exists at a given path"
cisconso.value_present:
  - name: ${1}
  - datastore: ${2}
  - path: ${3}
  - config: ${4}
endsnippet

snippet cisconso.added ""
cisconso.added:
  - self: ${1}
endsnippet

snippet cisconso.removed ""
cisconso.removed:
  - self: ${1}
endsnippet

snippet cisconso.changed ""
cisconso.changed:
  - self: ${1}
endsnippet

snippet cisconso.unchanged ""
cisconso.unchanged:
  - self: ${1}
endsnippet

snippet smartos.config_present "Ensure configuration property is set to value in /usbkey/config"
smartos.config_present:
  - name: ${1}
  - value: ${2}
endsnippet

snippet smartos.config_absent "Ensure configuration property is absent in /usbkey/config"
smartos.config_absent:
  - name: ${1}
endsnippet

snippet smartos.source_present "Ensure an image source is present on the computenode"
smartos.source_present:
  - name: ${1}
  - source_type: ${2:"imgapi"}
endsnippet

snippet smartos.source_absent "Ensure an image source is absent on the computenode"
smartos.source_absent:
  - name: ${1}
endsnippet

snippet smartos.image_present "Ensure image is present on the computenode"
smartos.image_present:
  - name: ${1}
endsnippet

snippet smartos.image_absent "Ensure image is absent on the computenode"
smartos.image_absent:
  - name: ${1}
endsnippet

snippet smartos.image_vacuum "Delete images not in use or installed via image_present"
smartos.image_vacuum:
  - name: ${1}
endsnippet

snippet smartos.vm_present "Ensure vm is present on the computenode"
smartos.vm_present:
  - name: ${1}
  - vmconfig: ${2}
  - config: ${3:None}
endsnippet

snippet smartos.vm_absent "Ensure vm is absent on the computenode"
smartos.vm_absent:
  - name: ${1}
  - archive: ${2:False}
endsnippet

snippet smartos.vm_running "Ensure vm is in the running state on the computenode"
smartos.vm_running:
  - name: ${1}
endsnippet

snippet smartos.vm_stopped "Ensure vm is in the stopped state on the computenode"
smartos.vm_stopped:
  - name: ${1}
endsnippet

snippet esxi.coredump_configured "Ensures a host's core dump configuration."
esxi.coredump_configured:
  - name: ${1}
  - enabled: ${2}
  - dump_ip: ${3}
  - host_vnic: ${4:"vmk0"}
  - dump_port: ${5:6500}
endsnippet

snippet esxi.password_present "Ensures the given password is set on the ESXi host. Passwords cannot be obtained from"
esxi.password_present:
  - name: ${1}
  - password: ${2}
endsnippet

snippet esxi.ntp_configured "Ensures a host's NTP server configuration such as setting NTP servers, ensuring the"
esxi.ntp_configured:
  - name: ${1}
  - service_running: ${2}
  - ntp_servers: ${3:None}
  - service_policy: ${4:None}
  - service_restart: ${5:False}
  - update_datetime: ${6:False}
endsnippet

snippet esxi.vmotion_configured "Configures a host's VMotion properties such as enabling VMotion and setting"
esxi.vmotion_configured:
  - name: ${1}
  - enabled: ${2}
  - device: ${3:"vmk0"}
endsnippet

snippet esxi.vsan_configured "Configures a host's VSAN properties such as enabling or disabling VSAN, or"
esxi.vsan_configured:
  - name: ${1}
  - enabled: ${2}
  - add_disks_to_vsan: ${3:False}
endsnippet

snippet esxi.ssh_configured "Manage the SSH configuration for a host including whether or not SSH is running or"
esxi.ssh_configured:
  - name: ${1}
  - service_running: ${2}
  - ssh_key: ${3:None}
  - ssh_key_file: ${4:None}
  - service_policy: ${5:None}
  - service_restart: ${6:False}
  - certificate_verify: ${7:False}
endsnippet

snippet esxi.syslog_configured "Ensures the specified syslog configuration parameters. By default,"
esxi.syslog_configured:
  - name: ${1}
  - syslog_configs: ${2}
  - firewall: ${3:True}
  - reset_service: ${4:True}
  - reset_syslog_config: ${5:False}
  - reset_configs: ${6:None}
endsnippet

snippet esxi.diskgroups_configured "Configures the disk groups to use for vsan."
esxi.diskgroups_configured:
  - name: ${1}
  - diskgroups: ${2}
  - erase_disks: ${3:False}
endsnippet

snippet esxi.host_cache_configured "Configures the host cache used for swapping."
esxi.host_cache_configured:
  - name: ${1}
  - enabled: ${2}
  - datastore: ${3}
  - swap_size: ${4:"100%"}
  - dedicated_backing_disk: ${5:False}
  - erase_backing_disk: ${6:False}
endsnippet

snippet libcloud_dns.state_result ""
libcloud_dns.state_result:
  - result: ${1}
  - message: ${2}
  - name: ${3}
  - changes: ${4:None}
endsnippet

snippet libcloud_dns.zone_present "Ensures a record is present."
libcloud_dns.zone_present:
  - domain: ${1}
  - type: ${2}
  - profile: ${3}
endsnippet

snippet libcloud_dns.zone_absent "Ensures a record is absent."
libcloud_dns.zone_absent:
  - domain: ${1}
  - profile: ${2}
endsnippet

snippet libcloud_dns.record_present "Ensures a record is present."
libcloud_dns.record_present:
  - name: ${1}
  - zone: ${2}
  - type: ${3}
  - data: ${4}
  - profile: ${5}
endsnippet

snippet libcloud_dns.record_absent "Ensures a record is absent."
libcloud_dns.record_absent:
  - name: ${1}
  - zone: ${2}
  - type: ${3}
  - data: ${4}
  - profile: ${5}
endsnippet

snippet wordpress.installed "Run the initial setup of wordpress"
wordpress.installed:
  - name: ${1}
  - user: ${2}
  - admin_user: ${3}
  - admin_password: ${4}
  - admin_email: ${5}
  - title: ${6}
  - url: ${7}
endsnippet

snippet wordpress.activated "Activate wordpress plugins"
wordpress.activated:
  - name: ${1}
  - path: ${2}
  - user: ${3}
endsnippet

snippet wordpress.deactivated "Deactivate wordpress plugins"
wordpress.deactivated:
  - name: ${1}
  - path: ${2}
  - user: ${3}
endsnippet

snippet zabbix_hostgroup.present "Ensures that the host group exists, eventually creates new host group."
zabbix_hostgroup.present:
  - name: ${1}
endsnippet

snippet zabbix_hostgroup.absent "Ensures that the host group does not exist, eventually delete host group."
zabbix_hostgroup.absent:
  - name: ${1}
endsnippet

snippet boto_iam_role.present "Ensure the IAM role exists."
boto_iam_role.present:
  - name: ${1}
  - policy_document: ${2:None}
  - policy_document_from_pillars: ${3:None}
  - path: ${4:None}
  - policies: ${5:None}
  - policies_from_pillars: ${6:None}
  - managed_policies: ${7:None}
  - create_instance_profile: ${8:True}
  - region: ${9:None}
  - key: ${10:None}
  - keyid: ${11:None}
  - profile: ${12:None}
  - delete_policies: ${13:True}
endsnippet

snippet boto_iam_role.absent "Ensure the IAM role is deleted."
boto_iam_role.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet junos.rpc "Executes the given rpc. The returned data can be stored in a file"
junos.rpc:
  - name: ${1}
  - dest: ${2:None}
  - format: ${3:"xml"}
  - args: ${4:None}
endsnippet

snippet junos.set_hostname "Changes the hostname of the device."
junos.set_hostname:
  - name: ${1}
endsnippet

snippet junos.commit "Commits the changes loaded into the candidate configuration."
junos.commit:
  - name: ${1}
endsnippet

snippet junos.rollback "Rollbacks the committed changes."
junos.rollback:
  - name: ${1}
  - id: ${2}
endsnippet

snippet junos.diff "Gets the difference between the candidate and the current configuration."
junos.diff:
  - name: ${1}
  - d_id: ${2}
endsnippet

snippet junos.cli "Executes the CLI commands and reuturns the text output."
junos.cli:
  - name: ${1}
endsnippet

snippet junos.shutdown "Shuts down the device."
junos.shutdown:
  - name: ${1}
endsnippet

snippet junos.install_config "Loads and commits the configuration provided."
junos.install_config:
  - name: ${1}
endsnippet

snippet junos.zeroize "Resets the device to default factory settings."
junos.zeroize:
  - name: ${1}
endsnippet

snippet junos.install_os "Installs the given image on the device. After the installation is complete"
junos.install_os:
  - name: ${1}
endsnippet

snippet junos.file_copy "Copies the file from the local device to the junos device."
junos.file_copy:
  - name: ${1}
  - dest: ${2:None}
endsnippet

snippet junos.lock "Attempts an exclusive lock on the candidate configuration. This"
junos.lock:
  - name: ${1}
endsnippet

snippet junos.unlock "Unlocks the candidate configuration."
junos.unlock:
  - name: ${1}
endsnippet

snippet junos.load "Loads the configuration provided onto the junos device."
junos.load:
  - name: ${1}
endsnippet

snippet junos.commit_check "Perform a commit check on the configuration."
junos.commit_check:
  - name: ${1}
endsnippet

snippet tomcat.war_deployed "Enforce that the WAR will be deployed and started in the context path,"
tomcat.war_deployed:
  - name: ${1}
  - war: ${2}
  - force: ${3:False}
  - url: ${4:"http://localhost:8080/manager"}
  - timeout: ${5:180}
  - temp_war_location: ${6:None}
  - version: ${7:True}
endsnippet

snippet tomcat.wait "Wait for the Tomcat Manager to load."
tomcat.wait:
  - name: ${1}
  - url: ${2:"http://localhost:8080/manager"}
  - timeout: ${3:180}
endsnippet

snippet tomcat.mod_watch "The tomcat watcher, called to invoke the watch command."
tomcat.mod_watch:
  - name: ${1}
  - url: ${2:"http://localhost:8080/manager"}
  - timeout: ${3:180}
endsnippet

snippet tomcat.undeployed "Enforce that the WAR will be undeployed from the server"
tomcat.undeployed:
  - name: ${1}
  - url: ${2:"http://localhost:8080/manager"}
  - timeout: ${3:180}
endsnippet

snippet win_dism.capability_installed "Install a DISM capability"
win_dism.capability_installed:
  - name: ${1}
  - source: ${2:None}
  - limit_access: ${3:False}
  - image: ${4:None}
  - restart: ${5:False}
endsnippet

snippet win_dism.capability_removed "Uninstall a DISM capability"
win_dism.capability_removed:
  - name: ${1}
  - image: ${2:None}
  - restart: ${3:False}
endsnippet

snippet win_dism.feature_installed "Install a DISM feature"
win_dism.feature_installed:
  - name: ${1}
  - package: ${2:None}
  - source: ${3:None}
  - limit_access: ${4:False}
  - enable_parent: ${5:False}
  - image: ${6:None}
  - restart: ${7:False}
endsnippet

snippet win_dism.feature_removed "Disables a feature."
win_dism.feature_removed:
  - name: ${1}
  - remove_payload: ${2:False}
  - image: ${3:None}
  - restart: ${4:False}
endsnippet

snippet win_dism.package_installed "Install a package."
win_dism.package_installed:
  - name: ${1}
  - ignore_check: ${2:False}
  - prevent_pending: ${3:False}
  - image: ${4:None}
  - restart: ${5:False}
endsnippet

snippet win_dism.package_removed "Uninstall a package"
win_dism.package_removed:
  - name: ${1}
  - image: ${2:None}
  - restart: ${3:False}
endsnippet

snippet boto_dynamodb.present "Ensure the DynamoDB table exists. Table throughput can be updated after"
boto_dynamodb.present:
  - name: ${1:None}
  - table_name: ${2:None}
  - region: ${3:None}
  - key: ${4:None}
  - keyid: ${5:None}
  - profile: ${6:None}
  - read_capacity_units: ${7:None}
  - write_capacity_units: ${8:None}
  - alarms: ${9:None}
  - alarms_from_pillar: ${10:"boto_dynamodb_alarms"}
  - hash_key: ${11:None}
  - hash_key_data_type: ${12:None}
  - range_key: ${13:None}
  - range_key_data_type: ${14:None}
  - local_indexes: ${15:None}
  - global_indexes: ${16:None}
  - backup_configs_from_pillars: ${17:"boto_dynamodb_backup_configs"}
endsnippet

snippet boto_dynamodb.absent "Ensure the DynamoDB table does not exist."
boto_dynamodb.absent:
  - name: ${1}
  - region: ${2:None}
  - key: ${3:None}
  - keyid: ${4:None}
  - profile: ${5:None}
endsnippet

snippet memcached.managed "Manage a memcached key."
memcached.managed:
  - name: ${1}
  - value: ${2:None}
  - host: ${3:DEFAULT_HOST}
  - port: ${4:DEFAULT_PORT}
  - time: ${5:DEFAULT_TIME}
  - min_compress_len: ${6:DEFAULT_MIN_COMPRESS_LEN}
endsnippet

snippet memcached.absent "Ensure that a memcached key is not present."
memcached.absent:
  - name: ${1}
  - value: ${2:None}
  - host: ${3:DEFAULT_HOST}
  - port: ${4:DEFAULT_PORT}
  - time: ${5:DEFAULT_TIME}
endsnippet

snippet opsgenie.create_alert "Create an alert in OpsGenie. Example usage with Salt's requisites and other"
opsgenie.create_alert:
  - name: ${1:None}
  - api_key: ${2:None}
  - reason: ${3:None}
  - action_type: ${4:"Create"}
endsnippet

snippet opsgenie.close_alert "Close an alert in OpsGenie. It's a wrapper function for create_alert."
opsgenie.close_alert:
  - name: ${1:None}
  - api_key: ${2:None}
  - reason: ${3:"Conditions are met."}
  - action_type: ${4:"Close"}
endsnippet

snippet postgres_language.present "Ensure that a named language is present in the specified"
postgres_language.present:
  - name: ${1}
  - maintenance_db: ${2}
  - user: ${3:None}
  - db_password: ${4:None}
  - db_host: ${5:None}
  - db_port: ${6:None}
  - db_user: ${7:None}
endsnippet

snippet postgres_language.absent "Ensure that a named language is absent in the specified"
postgres_language.absent:
  - name: ${1}
  - maintenance_db: ${2}
  - user: ${3:None}
  - db_password: ${4:None}
  - db_host: ${5:None}
  - db_port: ${6:None}
  - db_user: ${7:None}
endsnippet

snippet ssh_auth.present "Verifies that the specified SSH key is present for the specified user"
ssh_auth.present:
  - name: ${1}
  - user: ${2}
  - enc: ${3:"ssh-rsa"}
  - comment: ${4:""}
  - source: ${5:""}
  - options: ${6:None}
  - config: ${7:".ssh/authorized_keys"}
  - fingerprint_hash_type: ${8:None}
endsnippet

snippet ssh_auth.absent "Verifies that the specified SSH key is absent"
ssh_auth.absent:
  - name: ${1}
  - user: ${2}
  - enc: ${3:"ssh-rsa"}
  - comment: ${4:""}
  - source: ${5:""}
  - options: ${6:None}
  - config: ${7:".ssh/authorized_keys"}
  - fingerprint_hash_type: ${8:None}
endsnippet

snippet ssh_auth.manage "Ensures that only the specified ssh_keys are present for the specified user"
ssh_auth.manage:
  - name: ${1}
  - ssh_keys: ${2}
  - user: ${3}
  - enc: ${4:"ssh-rsa"}
  - comment: ${5:""}
  - source: ${6:""}
  - options: ${7:None}
  - config: ${8:".ssh/authorized_keys"}
  - fingerprint_hash_type: ${9:None}
endsnippet

